(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    651396,      14873]
NotebookOptionsPosition[    639110,      14494]
NotebookOutlinePosition[    639522,      14512]
CellTagsIndexPosition[    639479,      14509]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Rosenzweig-MacArthur consumer-resource model with parasitism and a directly \
transmitted parasite\
\>", "Section",
 CellChangeTimes->{{3.687004007042266*^9, 3.687004040757531*^9}}],

Cell[CellGroupData[{

Cell["\<\
Parasites increase host mortality rate in a resource-independent way\
\>", "Subsection",
 CellChangeTimes->{{3.687009260219686*^9, 3.6870092666312723`*^9}, {
  3.687101582777829*^9, 3.687101591864902*^9}}],

Cell[TextData[{
 "The full model assumes logistic growth of the resource (",
 StyleBox["R",
  FontSlant->"Italic"],
 "), with a Type II functional response for both susceptible (",
 StyleBox["S",
  FontSlant->"Italic"],
 ") and infected (",
 StyleBox["Q",
  FontSlant->"Italic"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Q", "m"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ") hosts. We assume that all hosts are born susceptible, and that the birth \
rates for susceptible and infected hosts are identical. There are two strains \
of pathogen circulating in the population, the resident and mutant. These \
strains differ in their virulence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"v", " ", "and", " ", 
     SubscriptBox["v", "m"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", respectively) and transmission rates; we assume that transmission rate is \
a function of virulence according to ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", "(", "v", ")"}], "=", 
    RowBox[{
     SubscriptBox["\[Beta]", "0"], 
     FractionBox["v", 
      RowBox[{"1", "+", "v"}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". \n\nTo determine whether the mutant can invade, we need to evaluate the \
stability of the mutant-free equilibrium, which can do by looking at the \
eigenvalues of the Jacobian matrix. Notice that the Jacobian is block upper \
triangular, so the eigenvalues are given by the eigenvalues of the \
block-diagonal matrix "
}], "Text",
 CellChangeTimes->{{3.687004053189085*^9, 3.68700420060925*^9}, {
  3.6870043215804996`*^9, 3.687004436656695*^9}, {3.687004568316966*^9, 
  3.687004593437023*^9}, {3.6870046290450573`*^9, 3.687004649012034*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "model"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dR", "=", 
     RowBox[{
      RowBox[{"\[Rho]", " ", "R", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox["R", "K"]}], ")"}]}], "-", 
      RowBox[{
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q", " ", "+", " ", "Qm"}], ")"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dS", "=", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q", " ", "+", " ", "Qm"}], ")"}]}], "-", 
      RowBox[{"d", " ", "S"}], "-", 
      RowBox[{
       RowBox[{"\[Beta]", "[", "v", "]"}], " ", "S", " ", "Q"}], " ", "-", 
      RowBox[{
       RowBox[{"\[Beta]", "[", "vm", "]"}], " ", "S", " ", "Qm"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Beta]", "[", "v", "]"}], " ", "S", " ", "Q"}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQm", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Beta]", "[", "vm", "]"}], " ", "S", " ", "Qm"}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "vm"}], ")"}], " ", "Qm"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Stability", " ", "analysis"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Calculate", " ", "the", " ", "Jacobian"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"J", "=", 
    RowBox[{"Simplify", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Qm"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "Qm"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Qm"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "Qm"}], "]"}]}], "}"}]}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Evaluate", " ", "the", " ", "Jacobian", " ", "at", " ", "the", " ", 
     "equilibrium", " ", "of", " ", "interest", " ", 
     RowBox[{"(", 
      RowBox[{"Qm", "=", "0"}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"J", "/.", 
     RowBox[{"{", 
      RowBox[{"Qm", "\[Rule]", "0"}], "}"}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.683665236459867*^9, 3.683665359323009*^9}, {
   3.683665404813575*^9, 3.68366547699438*^9}, {3.683666132061904*^9, 
   3.6836661691249237`*^9}, {3.683666215246019*^9, 3.683666248315669*^9}, 
   3.6836664294444437`*^9, {3.6836665751017103`*^9, 3.683666620667544*^9}, {
   3.683667219677795*^9, 3.6836672485482407`*^9}, {3.683667323469551*^9, 
   3.683667386683793*^9}, {3.6836675406939783`*^9, 3.683667557779666*^9}, {
   3.683667680285685*^9, 3.683667740513286*^9}, {3.6836677819498453`*^9, 
   3.6836678072856207`*^9}, {3.6836687554044857`*^9, 3.683668812476284*^9}, {
   3.683668845622505*^9, 3.6836688897799597`*^9}, {3.683669595022902*^9, 
   3.683669607643983*^9}, {3.6836698919656057`*^9, 3.683670006005756*^9}, {
   3.683670041941581*^9, 3.68367004901373*^9}, {3.683673275631042*^9, 
   3.683673291212096*^9}, {3.683927147839081*^9, 3.683927214853394*^9}, {
   3.683971388120756*^9, 3.683971474524976*^9}, {3.684406082211471*^9, 
   3.6844061367620363`*^9}, 3.684445377524424*^9, 3.687004050639835*^9, {
   3.687004248107334*^9, 3.687004307597363*^9}, {3.687004439076009*^9, 
   3.6870045097482567`*^9}, {3.687004553669538*^9, 3.687004556335442*^9}, {
   3.6876144621122503`*^9, 3.687614486656507*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "fs"}], " ", "h", " ", "K", " ", 
        RowBox[{"(", 
         RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"K", "-", 
          RowBox[{"2", " ", "R"}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "\[Rho]"}]}], 
      RowBox[{"K", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], "2"]}]], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"es", " ", "fs", " ", "h", " ", 
       RowBox[{"(", 
        RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"h", "+", "R"}], ")"}], "2"]], ",", 
     RowBox[{
      RowBox[{"-", "d"}], "+", 
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      RowBox[{"Q", " ", 
       RowBox[{"\[Beta]", "[", "v", "]"}]}], "-", 
      RowBox[{"Qm", " ", 
       RowBox[{"\[Beta]", "[", "vm", "]"}]}]}], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      RowBox[{"S", " ", 
       RowBox[{"\[Beta]", "[", "v", "]"}]}]}], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      RowBox[{"S", " ", 
       RowBox[{"\[Beta]", "[", "vm", "]"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"Q", " ", 
      RowBox[{"\[Beta]", "[", "v", "]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "d"}], "-", "v", "+", 
      RowBox[{"S", " ", 
       RowBox[{"\[Beta]", "[", "v", "]"}]}]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"Qm", " ", 
      RowBox[{"\[Beta]", "[", "vm", "]"}]}], ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "d"}], "-", "vm", "+", 
      RowBox[{"S", " ", 
       RowBox[{"\[Beta]", "[", "vm", "]"}]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.684447303215189*^9, 3.6846698191224318`*^9, 
  3.684676985273048*^9, 3.684687531732296*^9, 3.684754634904945*^9, 
  3.6847549129270983`*^9, 3.6850901011536903`*^9, 3.685091425525071*^9, 
  3.6851934884916983`*^9, 3.685194720133748*^9, 3.687004473361158*^9, 
  3.687004510304344*^9, 3.6870045566726923`*^9, 3.687614487531129*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{
        RowBox[{
         RowBox[{"-", "fs"}], " ", "h", " ", "K", " ", 
         RowBox[{"(", 
          RowBox[{"Q", "+", "S"}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"K", "-", 
           RowBox[{"2", " ", "R"}]}], ")"}], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "\[Rho]"}]}], 
       RowBox[{"K", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"]}]], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}]},
     {
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "h", " ", 
        RowBox[{"(", 
         RowBox[{"Q", "+", "S"}], ")"}]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], "2"]], 
      RowBox[{
       RowBox[{"-", "d"}], "+", 
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       RowBox[{"Q", " ", 
        RowBox[{"\[Beta]", "[", "v", "]"}]}]}], 
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       RowBox[{"S", " ", 
        RowBox[{"\[Beta]", "[", "v", "]"}]}]}], 
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       RowBox[{"S", " ", 
        RowBox[{"\[Beta]", "[", "vm", "]"}]}]}]},
     {"0", 
      RowBox[{"Q", " ", 
       RowBox[{"\[Beta]", "[", "v", "]"}]}], 
      RowBox[{
       RowBox[{"-", "d"}], "-", "v", "+", 
       RowBox[{"S", " ", 
        RowBox[{"\[Beta]", "[", "v", "]"}]}]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}]},
     {"0", "0", "0", 
      RowBox[{
       RowBox[{"-", "d"}], "-", "vm", "+", 
       RowBox[{"S", " ", 
        RowBox[{"\[Beta]", "[", "vm", "]"}]}]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.684447303215189*^9, 3.6846698191224318`*^9, 
  3.684676985273048*^9, 3.684687531732296*^9, 3.684754634904945*^9, 
  3.6847549129270983`*^9, 3.6850901011536903`*^9, 3.685091425525071*^9, 
  3.6851934884916983`*^9, 3.685194720133748*^9, 3.687004473361158*^9, 
  3.687004510304344*^9, 3.6870045566726923`*^9, 3.687614487550858*^9}]
}, Open  ]],

Cell[TextData[{
 "If the system goes to a stable equilibrium, the invasion fitness of the \
mutant is given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Beta]", "(", 
       SubscriptBox["v", "m"], ")"}], 
      OverscriptBox["S", "^"]}], "-", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["v", "m"], "+", "d"}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", where ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["S", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the equilibrium abundance of susceptibles, set by the resident."
}], "Text",
 CellChangeTimes->{{3.68700495951369*^9, 3.6870050296119127`*^9}, {
  3.687007624973708*^9, 3.687007630934164*^9}, {3.687614496769731*^9, 
  3.6876145056508083`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{
    RowBox[{"-", "d"}], "-", "vm", "+", 
    RowBox[{"S", " ", 
     RowBox[{"\[Beta]", "[", "vm", "]"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6870076323436337`*^9, 3.687007640058958*^9}, 
   3.6876145228504553`*^9}],

Cell[CellGroupData[{

Cell["\<\
Finding the singular strategy when the resident dynamics go to a stable \
equilibrium\
\>", "Subsubsection",
 CellChangeTimes->{{3.687005034044724*^9, 3.6870050485458612`*^9}}],

Cell[TextData[{
 "If the resident dynamics approach the stable equilibrium, we should be able \
to calculate the singular strategy analytically. This will be a useful \
comparison point for situations where the dynamics are not stable. From the \
fact that, at equilibrium, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["dQ", "dt"], "=", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", we can immediately calculate that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["S", "^"], "=", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", "v"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}]}], 
     RowBox[{
      SubscriptBox["\[Beta]", "0"], "v"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". "
}], "Text",
 CellChangeTimes->{{3.687006529062045*^9, 3.68700657177782*^9}, {
   3.68700684139579*^9, 3.6870068833472567`*^9}, {3.687007263676857*^9, 
   3.687007273790606*^9}, 3.687008035080208*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Calculating", " ", "the", " ", "equilibrium"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"dQ", "\[Equal]", "0"}], ",", "S"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"r", "=", 
    RowBox[{"r", "/.", 
     RowBox[{
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{"dQ", "\[Equal]", "0"}], ",", "S"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.687006576526287*^9, 3.687006696957065*^9}, {
  3.687006794822165*^9, 3.687006834735914*^9}, {3.687007735953511*^9, 
  3.68700774574067*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"S", "\[Rule]", 
    FractionBox[
     RowBox[{"d", "+", "v"}], 
     RowBox[{"\[Beta]", "[", "v", "]"}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.687614526459745*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "d"}], "-", "vm", "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{"\[Beta]", "[", "vm", "]"}]}], 
   RowBox[{"\[Beta]", "[", "v", "]"}]]}]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.687614526474472*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{"r", ",", "vm"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{
     SuperscriptBox["\[Beta]", "\[Prime]",
      MultilineFunction->None], "[", "v", "]"}]}], 
   RowBox[{"\[Beta]", "[", "v", "]"}]]}]], "Output",
 CellChangeTimes->{3.68761462326373*^9}]
}, Open  ]],

Cell[TextData[{
 "The singular strategy is given by the value of ",
 StyleBox["v",
  FontSlant->"Italic"],
 " that satisfies ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}], 
      RowBox[{"\[Beta]", "'"}], 
      RowBox[{"(", "v", ")"}]}], "-", 
     RowBox[{"\[Beta]", "(", "v", ")"}]}], "=", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.687614671289815*^9, 3.6876147029059753`*^9}, 
   3.687614745866679*^9}],

Cell[TextData[{
 "We can also assess whether any such singular strategy will be \
evolutionarily stable by looking at the second derivative. You can see that \
this depends on the sign of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", "''"}], 
    RowBox[{"(", "v", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ": if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[Beta]", "''"}], 
     RowBox[{"(", "v", ")"}]}], "<", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (that is, if transmission rate is a saturating function of virulence), \
then the singular strategy will be evolutionarily stable."
}], "Text",
 CellChangeTimes->{{3.687614768771392*^9, 3.687614860324135*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{"r", ",", 
     RowBox[{"{", 
      RowBox[{"vm", ",", "2"}], "}"}]}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.687614757971652*^9, 3.687614759985258*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"d", "+", "v"}], ")"}], " ", 
   RowBox[{
    SuperscriptBox["\[Beta]", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "v", "]"}]}], 
  RowBox[{"\[Beta]", "[", "v", "]"}]]], "Output",
 CellChangeTimes->{3.6876147605940857`*^9}]
}, Open  ]],

Cell[TextData[{
 "We can assess whether the singular strategy is convergence stable by \
looking at the derivative of the fitness gradient with respect to the \
resident trait. Note that the numerator (which is sign-determining) can be \
written as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[Beta]", "(", "v", ")"}], 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], 
     RowBox[{"\[Beta]", "''"}], 
     RowBox[{"(", "v", ")"}]}], "-", 
    RowBox[{
     RowBox[{"\[Beta]", "'"}], 
     RowBox[{"(", "v", ")"}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"d", "+", "v"}], ")"}], 
        RowBox[{"\[Beta]", "'"}], 
        RowBox[{"(", "v", ")"}]}], "-", 
       RowBox[{"\[Beta]", "(", "v", ")"}]}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". At the singular strategy, we have that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}], 
      RowBox[{"\[Beta]", "'"}], 
      RowBox[{"(", "v", ")"}]}], "-", 
     RowBox[{"\[Beta]", "(", "v", ")"}]}], "=", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", so the convergence stability condition is just ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", 
     RowBox[{"(", "v", ")"}], 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], 
     RowBox[{"\[Beta]", "''"}], 
     RowBox[{"(", "v", ")"}]}], "<", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which is identical to the evolutionarily stability condition. Thus, a \
saturating relationship between virulence and transmission guarantees that \
any singular strategy will be both convergence stable and evolutionarily \
stable."
}], "Text",
 CellChangeTimes->{{3.68761495373133*^9, 3.6876150236290073`*^9}, {
  3.6876150876541*^9, 3.687615243510829*^9}, {3.6876153254704742`*^9, 
  3.6876153552707443`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{"r", ",", "vm"}], "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], ",", "v"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Numerator", "[", 
    RowBox[{"Simplify", "[", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{"r", ",", "vm"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], ",", "v"}], "]"}], "]"}], 
    "]"}], "\[Equal]", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       RowBox[{"\[Beta]", "'"}], "[", "v", "]"}]}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"d", "+", "v"}], ")"}], " ", 
        RowBox[{
         RowBox[{"\[Beta]", "'"}], "[", "v", "]"}]}], "-", 
       RowBox[{"\[Beta]", "[", "v", "]"}]}], ")"}]}], "+", 
    RowBox[{
     RowBox[{"\[Beta]", "[", "v", "]"}], " ", 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], " ", 
     RowBox[{
      RowBox[{"\[Beta]", "''"}], "[", "v", "]"}]}]}]}], "//", 
  "Simplify"}]}], "Input",
 CellChangeTimes->{{3.687614870877644*^9, 3.687614878854336*^9}, {
  3.6876150268369913`*^9, 3.687615085242673*^9}, {3.6876151282680817`*^9, 
  3.687615135061757*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}]}], " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["\[Beta]", "\[Prime]",
       MultilineFunction->None], "[", "v", "]"}], "2"]}], "+", 
   RowBox[{
    RowBox[{"\[Beta]", "[", "v", "]"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[Beta]", "\[Prime]",
        MultilineFunction->None], "[", "v", "]"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", 
       RowBox[{
        SuperscriptBox["\[Beta]", "\[Prime]\[Prime]",
         MultilineFunction->None], "[", "v", "]"}]}]}], ")"}]}]}], 
  SuperscriptBox[
   RowBox[{"\[Beta]", "[", "v", "]"}], "2"]]], "Output",
 CellChangeTimes->{{3.687614871278205*^9, 3.687614879135795*^9}, 
   3.687615031754753*^9, {3.687615080674281*^9, 3.687615085532686*^9}, 
   3.687615135351201*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.687614871278205*^9, 3.687614879135795*^9}, 
   3.687615031754753*^9, {3.687615080674281*^9, 3.687615085532686*^9}, 
   3.687615135371834*^9}]
}, Open  ]],

Cell[TextData[{
 "If we specify a functional form for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "(", "v", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", we can go even further, and actually calculate the singular strategy.\n\n\
For example, if we assume that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", "(", "v", ")"}], "=", 
    FractionBox[
     RowBox[{
      SubscriptBox["\[Beta]", "0"], "v"}], 
     RowBox[{"1", "+", "v"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", then the singular strategy is given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", " ", "+", " ", "v"}], ")"}], " ", 
       SubscriptBox["\[Beta]", "0"]}], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "v"}], ")"}], "2"]], "-", 
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "0"], "v"}], 
      RowBox[{"1", "+", "v"}]]}], "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       SubscriptBox["\[Beta]", "0"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "v"}], ")"}], "2"]], 
      RowBox[{"(", 
       RowBox[{"d", "-", 
        SuperscriptBox["v", "2"]}], ")"}]}], "=", "0"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". From this, you can see that the singular value of ",
 StyleBox["v is ",
  FontSlant->"Italic"],
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    SqrtBox["d"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.687614631657432*^9, 3.6876146540102987`*^9}, {
  3.687615426495294*^9, 3.68761547467043*^9}, {3.687615512774002*^9, 
  3.6876156778104887`*^9}}],

Cell["\<\
Thus, if the dynamics go to an equilibrium, there is one singular strategy \
that is both evolutionarily and convergence stable. You can also see that \
there is no dependence of the singular strategy or the fitness gradient on \
host resources, indicating that changes in resources will have no effect when \
the system is stable. It seems plausible that resources will have no effect \
when the dynamics are unstable, though that remains to be seen. If that is \
the case, then you might expect the ESS to be fairly similar in both stable \
and unstable populations, so whether the parasite will stabilize the host \
dynamics or not depends on how close the resident-only system is to the \
stability boundary. If the system is just barely unstable in the absence of \
any parasitism, then the addition of parasites will tend to stabilize.\
\>", "Text",
 CellChangeTimes->{{3.687007984748268*^9, 3.687008041672399*^9}, {
  3.687009023744102*^9, 3.687009209672557*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calculating the invasion exponent", "Subsubsection",
 CellChangeTimes->{{3.684460146428907*^9, 3.684460149889165*^9}}],

Cell[TextData[{
 "In general, whether a mutant can invade or not depends on the traits \
(parameters) of the resident. This dependence is \[OpenCurlyDoubleQuote]felt\
\[CloseCurlyDoubleQuote] through the effect of the resident on the dynamics \
of the system. \n\nFrom the above calculations, we know that whether the \
mutant parasite \[OpenCurlyDoubleQuote]strain\[CloseCurlyDoubleQuote] can \
invade or not depends on the abundance of susceptible hosts, which is \
determined by the traits of the resident parasite strain. To determine \
whether the mutant can invade, then, we need to determine the dynamics of the \
susceptible host population. \n\nIf the susceptible host population goes to \
an equilibrium, then we can simply plug this equilibrium into the invasion \
exponent expression. If the host population cycles, on the other hand, then \
we need to calculate the average host abundance over the cycle, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["1", "T"], 
    RowBox[{
     SuperscriptBox[
      SubscriptBox["\[Integral]", "0"], "T"], 
     RowBox[{
      RowBox[{"S", "(", "t", ")"}], " ", "dt"}]}]}], TraditionalForm]]],
 ". \n\nFor now, the only two parameters we are interested in varying are the \
resource carrying capacity (",
 StyleBox["K",
  FontSlant->"Italic"],
 ") and the virulence of the resident parasite (",
 StyleBox["v",
  FontSlant->"Italic"],
 "), so we write a new function, \[OpenCurlyQuote]CalcAvgS,\[CloseCurlyQuote] \
that takes those two parameters as arguments, along with a parameter \
\[OpenCurlyQuote]dt\[CloseCurlyQuote] that determines how accurate our \
Riemann sum approximation of the integral will be. \n\nFirst, let\
\[CloseCurlyQuote]s confirm that we can get different dynamics by varying the \
resource carrying capacity.\n\nWith ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "1"}], TraditionalForm]]],
 ", the system approaches a stable equilibrium:"
}], "Text",
 CellChangeTimes->{{3.684241537392727*^9, 3.684241719847601*^9}, {
   3.6842557782466*^9, 3.6842557814043303`*^9}, {3.684405916496601*^9, 
   3.684405935764387*^9}, 3.684406998790498*^9, {3.684407802671483*^9, 
   3.684407802837376*^9}, {3.6844514172838783`*^9, 3.6844514535190907`*^9}, {
   3.6844515079951563`*^9, 3.684451597199505*^9}, {3.684460154250347*^9, 
   3.684460569868102*^9}, {3.6844606030742283`*^9, 3.684460610254986*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"K", "\[Rule]", "1"}], ",", 
     RowBox[{"v", "\[Rule]", "1"}], ",", 
     RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
     RowBox[{"fs", "\[Rule]", "1"}], ",", 
     RowBox[{"h", "\[Rule]", "1"}], ",", 
     RowBox[{"d", "\[Rule]", "0.1"}], ",", 
     RowBox[{"v", "\[Rule]", "0.1"}], ",", 
     RowBox[{"B0", "\[Rule]", "5"}], ",", 
     RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dR", "=", 
   RowBox[{
    RowBox[{"\[Rho]", " ", "R", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox["R", "K"]}], ")"}]}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dS", "=", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"es", " ", "fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
    RowBox[{"d", " ", "S"}], "-", 
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dQ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"soln", "=", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dS", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dQ", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dR", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
        RowBox[{
         RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
         RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
     RowBox[{"{", 
      RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
     RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "1000"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.684451959038443*^9, 3.6844521172206917`*^9}, {
  3.6844521502833843`*^9, 3.6844521562963667`*^9}, {3.684452195839579*^9, 
  3.684452235748176*^9}, {3.684452360033771*^9, 3.684452446860776*^9}, {
  3.684456162452084*^9, 3.684456362131954*^9}, {3.6844605742291803`*^9, 
  3.6844605743581047`*^9}, {3.6844608882399607`*^9, 3.684460925797792*^9}, {
  3.68485798942669*^9, 3.684857992254428*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwcmXc81f8Xx4UQMpJCRFaRUbLD+2TvvUP2HhfXSCKSkZEkJRmVtPuqqERJ
IWRv7iUrJSIhNPi9P7+/PJ6Pz3if9TrnfK597iGWXrQ0NDR6DDQ0xN/Zn3+N
db1XNPjjh0bWNhdQexmTuPaNHsTHvis2ivId9bLGOvDemEQj5tPkshff0LHG
peLs0O/IbzlKuG94Gg3UKizR3VhCTMu7jmd1T6Cs66F5KG0NlfqUXqlxGUXa
Jx+pnAr9hyKPmL7qShpEG/fJwRSpLcDwb1r4o2QvcsjfAesldCAmssISv7ML
VaSUc+7mZgCGpYvW3p/bEEek6aR8GhPIaY0XttJ8RAGecxWW/5hhi0RczSRX
M2q0PJ9MCt0OpeoXpJT7P6B9xw7YZ31mB279gy6auz6gN7snd/ZLcQK7o6uR
49NGNMf29N+U9w4QuxZgef5SI+JjSJheKuECi4kzOgz3G5H+P7MOWspO2OQy
5+j81ogilve+5OTeBaN7o1skTD+gm7PfS4TMdkObrSZjVvsH1DlRkyabxgO6
ZG1jGt8mtDGUHqbxnheKPZvNr+xuRlJdjsdN/vFBqnt3oDSlGTk2SWg7KfHD
lblLbJJPWlBK7ZpUQKgAwH779eNXP6KK5x+4Yx7shZXBxQ+jF1rRxKO8jdTP
gpC36TDHeKUNCZry+fZI7QPNC/F15O4O9Lw5gTrcvA8OXsuzYj3biYx1Zswn
vIWh2r2pjFm0C8WovVRZLBEBtU3Rb+anuhHnS8HHa+qi8C6uqyv5cA+6eyRF
mIYiCpHdV3vr5ntQn6QtCzu3ODheUWZTjOtDh3iXqVJpB4D93f4V/R+D6EPu
cQt5cQl4LB/B0ToyhFw43jccfS8BZjkj+750DaMMxpzHhv8k4WYMt6tKGxV9
WZE94xsqDX6K6teDksZQXOiV5RA2GdhVy8TxlXMc7fy+4Rv1QAZ4rs2cVLox
jjSn2iySP8uCfeCG9b33E2juP75J3WOH4ObKq53VNpPoZZBpYcuFQ8Dm9TaH
/GUSmc1UcnZLHYaknffdRRg+I747Mx9tTh2GaKkU+tLsz2jaUyB5qPkw9Cra
pL7hnkZPhC3AmUcOKrL5mHUvTaPYsaTfY95yIL1641UkwxekX/SywrNSDgST
2QvaAr4gLqe54K90R6CQN+QU5c0XNMorJBFoeQSWJMirfL+/oPsDVpMLJUfg
t8mTqsFdX5HQladGbL+OwCiLd0s081eUZ8tZIWUkD2LhdVMWjV8Q6y4Sv1GJ
PCyUT67qwBeU2Nee5LciD3+zE/vJodNoLVf6e4qhAmyjW2sucPiMgq0zbMqK
FWCXjv9/m1um0BTX7Ov6ZQV4Qh9Y8u/0BHLoMRCfNFCEsvnv+qtfxlB7zt2s
LcWKkJxvINfyHOvPknFVcFkR0g6ord0coaBXnN4nNAyUoKHVJb3PdQgd6qr/
4FSkBJ7H1fmbjQZQWbbIoVNLSrBfwcqVrbAP8ZsnXs3XVwav3IyXd4x6UQ77
OM3LQmV4PHnytK9RD2LqQH79P5VB1ejwzcYL3Sguq6hrWU8FfqKVVMvt3WjZ
5J8KV6EKbOd6oK//qgv5b3e6efinCvzxG6oryepCn1pfMZvrqUJm55/F6bNd
yDqDNzz4uirIdz0qX8vtQi1G0ZSMRVU4UyZ2vfF1FwKWAa0HukeB/s2jdr4/
Xeh5i8LD5oKjYP7UN9TPsBtJnc/d+fXHUeB+H3nn/r1udNNgKZZBVw32m5mR
1Xb3IJ5tlp9FC9Tg/n4RjY8Xe1BWU7mJ1g81gFreGMTTi+hT2Z+76ajDsmEk
+u9eL4rRC9575po6jCsmd1vq9CGvxoMLNdoaMPvF3iv9aj8aPnfejpKvAeJC
Gbt+mA4gc52Z2vV5DVg86tWwZ/sgUqsvy1bMR8CTMdWUXjSEmMc5eAcjAVwe
COiu0I2gBgATnxsAq2WqHy5Mj6AzJSEJvz4CLMXPKrS3jKJfJ9pndu47BprX
Y9WtDMbQk9p/AqVGx2CE5PQloGoMBQpKWx6JPAYMkrPy4+LjaHw0/ZXFx2MQ
UJ3NmbI8jq5rVM+PrRyDhQMnToRaTCDbom/CJCFNYLBx5xW4PYE4N3jtNg01
4fVr16pD3ydQq7NBelaEJgh/adtg3D+JUl5H1wqUaII2pT6o1mwSaQrcXXrY
ogljQtP1pp6T6F/swH61FU1oPG1w/4Ub1ieVwemjoBYYbPl+yVhnEoWrKWY7
GmpBAvPBZ+zbJ5HMda/6GbIWxJPfPtv3cgLN/Mldiy7WgoaIvT+k9CZQ6fF6
KaYWLfjOYmX6pGYcnahecr2yrAXPuW6ycQiMI749IpfFBbUhlVM1Xzt4DGUP
J/zTJmvDB/0uidcbI+j24ros7XV8/dW3TZMnVPSKKcy99r02SBR19vZHUlCH
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
ar2VGuTAhfoWDzTt9t1m91EOzJ2dewodbKPckP+DA6UfL/qQ3wemZT+fmOIA
v7sfi/STxcKeldMpaI0wDkDvl61zfPofBUPZbaHoDz9DOl1mUeDRJkh+P/6a
xteWM5eCxUZvM9ALRn40aC6lIDpOppbs308LdneKUvDn1OxXaIl4zxd+4hTk
n2aR83umu5KRjAQFfY9detCK2l+qqldRsGHX9S/ogoVZO49LUdBmpDyK1vp4
uFxIhoKmtd0/0OWFkroFchSU2BRMoY3COp5YraNAe8mFadgPR9423Pu4gQKD
20qz0EFyz3JOAwUWZq7k84JT3HUiehQc7/hAxot7qZ1dtIMC+V+55O9JpP+S
OWhAQVZ29wDZX7wLr043ouDk/Iuf0AqGXqszTCgI8unrJPNdoZpqYEaB4cbB
VvTT8huXIi0pcC0LqEEbJrgtU7Om4Ke6Kem3xqPS8a/3U5DqsZnst/t1Piym
21FwrszhLrpL+PL5FQ4UdAe+y0W7fTogVOpEgcKP0iz0yAPRiMPOFFxZLZOO
9g1vnivgxqtP9nLyPvvX4fy5G+4UtKfeIf264lYgtdmLAlkx9Ui05m9fn0oO
BY7b20n/ltVvGHf3o0DEfEkMme/V0VOCgRQkyY+S969Gn1sj+UEU8Ge6kPFs
jI55WIZQoP7HMZns3xLyAxNhFKgkNaaR+Y5+PJIUScGF/ZmZaJ+L9s7dsRTs
L5DOR5+ZmPbUJp4331KDe+hTVldW1V+kIG6YTs6zx5Z8bCtOoaBAuPoZ+siZ
s5vV0ihIYz4lebo0ycZnp/PWXxb6Eu0Q7b4nLosC3S5jkr/dyNy8eTcoWKez
jvTb/t058/1zKHAeukrqZZVrenTyFgVvtPM+kP19/kjVidsUnNqynewXprWq
Abb3KViydoycp3ed89LZVcyrr/kF8vv9dv3CnxtKKZDrkyPWnvnr7uoKCsqy
K3rJ+e7pVs8Ftbz1B1wmz1dVLqUw9ZICmdwf7eR+fi8ZcqqRAuPSXLIfKeg8
7e17RcGRs7ItaJnfM9Ob31AgGBRB1idOC112q5uCo7TsJ2jRVgUf6U8U+LS/
Jnkt1ah7damPghYbBbJ/LYo7oSr8hYKl2woK0ELjQlHBgxTMtKCR/OfcsTDy
GqWAxu0i51U+z7hZTj8ouGtymTyfJgbEWZrTubC7roD016Bb2tjiuVzYd20O
qWefTE/udCEuRNubkfPBhx4Z96HFXDg5/IDsl516VZWHRbiwKkk/D/3uyhHp
tmVcsNvOdwf92uHm+0oJLhQ4dpP5Nj0x0daW5MKv1q9kPfUSw5cKpLjgrctP
1lvzTsUqTY4L9sMSpB8qNZsKRNZxQTlnfhXZDxLPCEcocuHG9HbSH2WTS07y
reeC+G//F+gn1vdf0FV531/6i+TZpz4jUXYrF27GfyR5Cy80cXmlzwWR37ak
HrKcU8/XmnBBVNfrDdl/BuNVuXt4652+lXze/MCjhBYrLmjlfSTPa5fqD38U
7bgQFnqdjM/QEHAOcOJCqOJrMp+oDMXat65ciN95l8w/Y5GFispxLqzfkliC
LuL6xged4sI59Zdk/S+Hk3+3+3Ahx/rSfXSP3dND6iwuvI7bQOo5WdtXHeLH
BbdLtaSeglsE13cFcUH+vBfJe9NSm6nw81wIXi9CrjuNpldtSeZCSWMS2V98
HKqVoq9wwZ87RPIPqxuK7b3GBakvOWQ/unt9s2PsbS5o5EeS80mNqH1l/30u
5C3bQPLuOBuguO0RF7Z1O5L9fuxbdkx8GRfUg/tJ3gKHXk4OVnIhXC+X5KGq
I1aR2MiFWXdu1aNtxZ3P67dzobTJsw7d8P43vayXC8Vfq8n/l9iZGXdo6ygX
ss90k/2y+KiyceEUF/KPSDxGq6hUqavx+8FjdtED9PLiyZnyy/1A0eEnyWuW
/roWCRU/uPeig3yeMa/8yUVNPxgTjSbjjTTYZi3e6QfzB/MqSf3ix6MizfzA
VuwwqVebbQRtzgE/KBJRJeszWy3rFOjsBycGF5PrFb1PDKed9IPNKm7k+5o5
1moMuh/wPWr/d5449VX8e4Af7J7QJ/UVnL/LTr7JD5wLbSvQx6+lpthK+oOm
TTaZn7eeVMRab38QuBVB+oPdmcGaqPEHYV+9UjJ+/4Mjq8UCYEtiMXk/mvj2
wtL4SAB86l9I/p6Qofma3nsBILX8Bfm8/OVXo1y+QPjSYkauD4z7nbhvHQh/
nwyT67eMVQYGbgZC/VQ/GU9G2NOZ/SsQvMJciVNa8joWGJ4FE40U4pIU8Vla
l8/CVk4acZfzWUW3b2dhv/xJ4vuX/MxH9ILgb9lt4vAGtpdvTBAw5roQPzbv
Z3h2BcGWiidl//K39HNXDobzK22In1sMbPzjHwzqXrXEWc1+X6Jbg+Hx9X/X
N1VcT+LKnoOWk0XE1fcaTTy9z0H/92PEfNnSOb9qz8GusGRi7Uu+885KhkDW
q2jiVy1bTLleIbBhO4f46OLfkczqEFied5n43hOzuiaRUJgqYhNPO3p13jqX
UKi3jiMeF5GaXP4wFMbOhRD3l6d9FBQKg+vHYohj3+fX2dqHweHeKOKtU6X3
r+eGwWW7CGJdp23+R6bCIP3Nv+v6VSWmcobhIPoykvi78tEqbko4UJH/Pp8Z
v0S3bZRnk3/X53iYF0Zti4A/Z/75+PZwpZ1RETDm889XhQYXSvVFwEWPf377
znj8r04k+Nv/8/9aUDya
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.15000000000000002`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.684452067429336*^9, 3.684452129202464*^9}, 
   3.6844522459837723`*^9, 3.684452312484198*^9, {3.6844523830055656`*^9, 
   3.684452447261578*^9}, {3.684456179363039*^9, 3.684456363100637*^9}, 
   3.684460576536672*^9, {3.684460889014583*^9, 3.684460926229488*^9}, 
   3.684670263785358*^9, 3.6846774698296833`*^9, 3.684687989921795*^9, 
   3.6847548152953663`*^9, 3.684755356378681*^9, {3.684857968610207*^9, 
   3.68485799258364*^9}, 3.684858183049143*^9, 3.685090556945882*^9, 
   3.685091441771214*^9, 3.6851939440482407`*^9, 3.685194728523492*^9, 
   3.685203321656074*^9, 3.687004869217554*^9}]
}, Open  ]],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "2"}], TraditionalForm]]],
 ", the system cycles:"
}], "Text",
 CellChangeTimes->{{3.6844605849478207`*^9, 3.684460593657486*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"K", "\[Rule]", "2"}], ",", 
     RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
     RowBox[{"fs", "\[Rule]", "1"}], ",", 
     RowBox[{"h", "\[Rule]", "1"}], ",", 
     RowBox[{"d", "\[Rule]", "0.1"}], ",", 
     RowBox[{"v", "\[Rule]", "0.1"}], ",", 
     RowBox[{"B0", "\[Rule]", "5"}], ",", 
     RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dR", "=", 
   RowBox[{
    RowBox[{"\[Rho]", " ", "R", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox["R", "K"]}], ")"}]}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dS", "=", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"es", " ", "fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
    RowBox[{"d", " ", "S"}], "-", 
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dQ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"soln", "=", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dS", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dQ", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dR", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
        RowBox[{
         RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
         RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
     RowBox[{"{", 
      RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
     RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "1000"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.684460596682674*^9, 3.684460596803994*^9}, {
  3.6844608294977407`*^9, 3.684460882009554*^9}, {3.6848580000435457`*^9, 
  3.684858002756715*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwUW3c8le8bVkolkZFQQiFJKiRK7tvI3nvvPc+xUklISEhKUolKkrTQUHa2
Y++9jnOMkj36Rr/z++t8rs/9jPe53+d6r+v64wg4+Bo4b6Wjo+PeTUf3/9+Z
hb9aKi7L8n/vvq/aSjcHTVk7hZWftcN6xpPqj8/noIMpxJz72TiY646qNirN
g0L1Ynoi8RecvpxS1z8yD92lZxbpny0Cs8huwmbQAiQ8IT6AW2ugkP1Ibmbr
Iihffit7lbgBOWcOaf0MW4TNnACffrEt6DBePkT5uQjmqWy4nkGPrquB1d6K
S1AQ/YF1/z4G5Lx3nXk8ZAn2BumMS93aiZyaWUW5KUvg6fSzwGCDEU2ZGHde
T1iCaoPYKAJxD9ol2nl+t14CAQURs4QJFjxwpGR0aOsSlOwf5+gSY0Ux2R6V
xZBF+Mmct0F2YcM/O34zzZEWgIchnLKYwY4ShRd0l5bnQW1Dt3lrPwcqVTXK
KW3MQeDSoa+s+zjxksXxkPn239AyVnTr5C0ubJR+u+JxfAY2e2/7yf/gRjqz
rs9FpEkQa7Ww1N7gwZc7lt77hFAgunRNzJPIi4KTlhs20mNQ8Llm35U3h1BY
mH9sq94IjL19sBkzwYcD9c396uKDENOWt9hwhx/3/mf/rICrD/h0eNzaxQTQ
+QJbT6VVN3yuCx/oqxPAu5+vs4Ysd4DWxSm9MZfDaLDF6Y79QBuMl+lVTdEf
QZKpwm1txla4IvdVdj7jCK7/SGj+87sJWL/yvVu7IIgL9qckfsuRIFsy+jBd
vyC6vvZ8mjRbB/LvZx/sCBbC38KbqLteA52iJrtZ9gnjXSH/unWDavDKKr7O
mSeMP02C1tsWKmHrYaElXt2jeHXnA6bg1h+QmhbnJvTzKPI1M5g0TlbAKe6l
AbFbIriLd0vrmGQF1Ny31JcSPoYRSnsUe9+Vg83eH1XnfxzDF3c/pNealMPy
bdFzSnaiKJr03CzrWDnE7Uh6p7EhisuTVxfEhcvhyI31wwaPjqPCyMO/TZrl
8G3TLsX8rBjy9WmnxT0qB70rtbvtO8TwjM6puDm2CqAunwxzI57ATd1S55+f
KiCUmLLkyyyOh97mBpdG/gCOX5tul96I4+ohp9c9YZXwxs1lMFTtJAr+4cj5
/KYKFMmN+lETJ5FjQKSohqEGfr7nGVdROIU3fpaxat6rha/eOmn1d07hZcpP
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
Bzq7XX7OQjy+9budr7a2Af4HhKp+Ww==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.1},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.68446059723318*^9, {3.684460830569313*^9, 3.6844608826855593`*^9}, 
   3.684461041581873*^9, 3.6846706929833937`*^9, 3.6846779495975647`*^9, 
   3.6846884526723633`*^9, 3.684755796429706*^9, {3.684857981836524*^9, 
   3.684858003139783*^9}, 3.684858187151741*^9, 3.685091018202627*^9, 
   3.685091444933323*^9, 3.685194412798211*^9, 3.685194731062402*^9, 
   3.6852033243335667`*^9, 3.687004872648488*^9}]
}, Open  ]],

Cell[TextData[{
 "The boundary between stability and cycles when ",
 StyleBox["K ",
  FontSlant->"Italic"],
 "= 2 can be found by playing around with values of ",
 StyleBox["d ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["v.",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.687009299977479*^9, 3.6870093345027943`*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"Fitness", " ", "gradient"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.684859430867618*^9, 3.684859472613536*^9}, {
  3.6848596586628113`*^9, 3.684856709696744*^9}, {3.6852033590401363`*^9, 
  3.6852033789517717`*^9}, {3.68520406022215*^9, 3.685204061141631*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using the secant method to find the singular strategies", \
"Subsubsection",
 CellChangeTimes->{{3.6852785856254873`*^9, 3.685278593825942*^9}, {
  3.685286729443479*^9, 3.685286733952943*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fitGrad", "[", 
    RowBox[{"{", 
     RowBox[{"thisK_", ",", "thisv_", ",", "thisB0_", ",", "dt_"}], "}"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "params", ",", "K", ",", "v", ",", "\[Rho]", ",", "fs", ",", "h", ",", 
       "d", ",", "B0", ",", "es", ",", "dR", ",", "R", ",", "S", ",", "Q", 
       ",", "dS", ",", "dQ", ",", "Eq", ",", "EndEq", ",", "AvgS", ",", 
       "soln", ",", "St", ",", "FirstPeak", ",", "T", ",", "SecondPeak", ",", 
       "Ssum"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"params", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"K", "\[Rule]", "thisK"}], ",", 
         RowBox[{"v", "\[Rule]", "thisv"}], ",", 
         RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
         RowBox[{"fs", "\[Rule]", "1"}], ",", 
         RowBox[{"h", "\[Rule]", "1"}], ",", 
         RowBox[{"d", "\[Rule]", "0.1"}], ",", 
         RowBox[{"B0", "\[Rule]", "thisB0"}], ",", 
         RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dR", "=", 
       RowBox[{
        RowBox[{"\[Rho]", " ", "R", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           FractionBox["R", "K"]}], ")"}]}], "-", 
        RowBox[{
         FractionBox[
          RowBox[{"fs", " ", "R"}], 
          RowBox[{"h", "+", "R"}]], " ", 
         RowBox[{"(", 
          RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dS", "=", 
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{"es", " ", "fs", " ", "R"}], 
          RowBox[{"h", "+", "R"}]], " ", 
         RowBox[{"(", 
          RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
        RowBox[{"d", " ", "S"}], "-", 
        RowBox[{
         RowBox[{"(", 
          FractionBox[
           RowBox[{"B0", " ", "v"}], 
           RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dQ", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          FractionBox[
           RowBox[{"B0", " ", "v"}], 
           RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Calculate", " ", "the", " ", "equilibria", " ", "of", " ", "the", " ",
         "system"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Eq", "=", 
       RowBox[{
        RowBox[{"Solve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"dR", "\[Equal]", "0"}], ",", 
            RowBox[{"dS", "\[Equal]", "0"}], ",", 
            RowBox[{"dQ", "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "S", ",", "Q"}], "}"}]}], "]"}], "/.", 
        "params"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Which", " ", "equilibrium", " ", "represents", " ", "the", " ", 
        "endemic", " ", "equilibrium", " ", "with", " ", "all", " ", "values",
         " ", 
        RowBox[{"positive", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"EndEq", "=", 
       RowBox[{"Eq", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{
               RowBox[{"Eq", "\[LeftDoubleBracket]", 
                RowBox[{"i", ",", ";;", ",", "2"}], "\[RightDoubleBracket]"}],
                ",", 
               RowBox[{
                RowBox[{"#", ">", "0"}], "&"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], ",", 
           "True"}], "]"}], "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
        "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Does", " ", "the", " ", "Jacobian", " ", "evaluated", " ", "at", " ", 
        "this", " ", "equilibrium", " ", "have", " ", "all", " ", "negative", 
        " ", "eigenvalues", " ", 
        RowBox[{"e", ".", "g", ".", " ", "is"}], " ", "the", " ", 
        "equilibrium", " ", 
        RowBox[{"stable", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"AvgS", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "Q"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "Q"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "Q"}], "]"}]}], "}"}]}], "}"}], "/.", 
               "params"}], "/.", "EndEq"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"#", "<", "0"}], "&"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"if", " ", "all", " ", "e"}], "-", 
            RowBox[{"values", " ", "are", " ", "negative"}]}], ",", " ", 
           RowBox[{"return", " ", "the", " ", "equilibrium", " ", "S"}]}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"EndEq", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"otherwise", ",", " ", 
           RowBox[{"numerically", " ", "solve"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"soln", "=", 
           RowBox[{"NDSolve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dS", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dQ", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dR", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
                RowBox[{
                 RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
                RowBox[{
                 RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
                 RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
             RowBox[{"{", 
              RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
             RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
             RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"St", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "800", ",", "900", ",", "dt"}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "find", " ", "the", " ", "first", " ", "peak", " ", "of", " ", 
            "the", " ", "cycle"}], " ", "*)"}], "\t", "\[IndentingNewLine]", 
          RowBox[{"FirstPeak", "=", " ", 
           RowBox[{"800", "+", 
            RowBox[{
             RowBox[{
              RowBox[{"Position", "[", 
               RowBox[{"St", ",", 
                RowBox[{"Max", "[", "St", "]"}]}], "]"}], 
              "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
             "dt"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Find", " ", "next", " ", "peak"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"St", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "FirstPeak", ",", "1000", ",", "dt"}], 
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Cycle", " ", "period"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"T", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 FractionBox[
                  RowBox[{
                   RowBox[{
                   "St", "\[LeftDoubleBracket]", "t", 
                    "\[RightDoubleBracket]"}], "-", 
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}]}], 
                  RowBox[{
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}], "-", 
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "2"}], "\[RightDoubleBracket]"}]}]], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "1", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "St", "]"}], "-", "2"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"_", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "<", "0"}], "&"}], ")"}]}]}], "]"}], 
             "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
            "dt"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Next", " ", "peak"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"SecondPeak", "=", 
           RowBox[{"FirstPeak", "+", "T"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Riemann", " ", "sum", " ", "to", " ", "find", " ", "the", " ", 
            "integral", " ", "of", " ", "S", 
            RowBox[{"(", "t", ")"}], " ", "over", " ", "the", " ", "cycle"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Ssum", "=", 
           RowBox[{"Sum", "[", 
            RowBox[{
             RowBox[{"dt", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", 
               RowBox[{"FirstPeak", "+", 
                RowBox[{"dt", "/", "2"}]}], ",", 
               RowBox[{"SecondPeak", "+", 
                RowBox[{"dt", "/", "2"}]}], ",", "dt"}], "}"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"calculate", " ", "the", " ", "average", " ", "S"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Ssum", "/", "T"}]}]}], "\[IndentingNewLine]", "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{
       FractionBox[
        RowBox[{
         RowBox[{"B0", " ", "AvgS"}], "-", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"1", "+", "v"}], ")"}], "2"]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "v"}], ")"}], "2"]], "/.", "params"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.684451491058712*^9, 3.684451498709157*^9}, {
   3.684451604539295*^9, 3.684451791255568*^9}, {3.684451901152554*^9, 
   3.684451921069169*^9}, {3.684459864892218*^9, 3.6844599372470407`*^9}, 
   3.6844600012512074`*^9, {3.684460037389927*^9, 3.684460086194024*^9}, {
   3.684460643123582*^9, 3.684460670460699*^9}, {3.6844610713999453`*^9, 
   3.684461113562046*^9}, {3.684461613026376*^9, 3.6844616605762787`*^9}, {
   3.6844617298486853`*^9, 3.6844618363765287`*^9}, {3.684462024742939*^9, 
   3.684462051881359*^9}, {3.684462106169607*^9, 3.6844622102017593`*^9}, {
   3.68446234278074*^9, 3.684462342831826*^9}, {3.684462389031413*^9, 
   3.6844624104986267`*^9}, {3.6845102976320753`*^9, 3.68451031188741*^9}, {
   3.684513228332176*^9, 3.6845132296346684`*^9}, {3.684514415790408*^9, 
   3.684514416261383*^9}, {3.684517682553866*^9, 3.68451771400926*^9}, {
   3.684858644808329*^9, 3.684858648531245*^9}, {3.684861180111555*^9, 
   3.684861188863456*^9}, {3.684861844445223*^9, 3.684861849269473*^9}, {
   3.685199417091984*^9, 3.685199426114366*^9}, {3.685199676116304*^9, 
   3.6851996925960703`*^9}, {3.6852039890991173`*^9, 3.685204067050282*^9}, {
   3.685204165376914*^9, 3.685204169122121*^9}, 3.6852044225193253`*^9, 
   3.685204511406601*^9, {3.685204566350975*^9, 3.685204583304344*^9}, 
   3.6852046278867207`*^9, {3.685204691687089*^9, 3.685204692584836*^9}, {
   3.6852049012642517`*^9, 3.685204909620894*^9}, {3.685205042078187*^9, 
   3.685205077617441*^9}, {3.685208830792323*^9, 3.685208833548361*^9}, {
   3.685209086123391*^9, 3.685209088475152*^9}, 3.685209190534054*^9, {
   3.685209437437945*^9, 3.685209484080401*^9}, {3.685210360716099*^9, 
   3.685210462045497*^9}, {3.685210609588832*^9, 3.6852106134022503`*^9}, {
   3.685210668303978*^9, 3.685210670822495*^9}, {3.6852116858679247`*^9, 
   3.6852116862714777`*^9}, 3.685211725469466*^9, 3.687009388968285*^9, {
   3.6871057783281517`*^9, 3.687105779620612*^9}}],

Cell[TextData[{
 "A better way to do it will be to write a custom root finding algorithm. We \
can do this using the secant method, which is essentially a finite difference \
approximation of Newton\[CloseCurlyQuote]s method, since we cannot compute \
the derivative of the fitness gradient with respect to ",
 StyleBox["v",
  FontSlant->"Italic"],
 ". To use this method, you must provide two initial values for ",
 StyleBox["v",
  FontSlant->"Italic"],
 ", and then you converge from there using the recursion relation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["v", "n"], "=", 
    FractionBox[
     RowBox[{
      RowBox[{
       SubscriptBox["v", 
        RowBox[{"n", "-", "2"}]], 
       RowBox[{"f", "(", 
        SubscriptBox["v", 
         RowBox[{"n", "-", "1"}]], ")"}]}], "-", 
      RowBox[{
       SubscriptBox["v", 
        RowBox[{"n", "-", "1"}]], 
       RowBox[{"f", "(", 
        SubscriptBox["v", 
         RowBox[{"n", "-", "2"}]], ")"}]}]}], 
     RowBox[{
      RowBox[{"f", "(", 
       SubscriptBox["v", 
        RowBox[{"n", "-", "1"}]], ")"}], "-", 
      RowBox[{"f", "(", 
       SubscriptBox["v", 
        RowBox[{"n", "-", "2"}]], ")"}]}]]}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{
  3.68527857974299*^9, {3.685286036836186*^9, 3.685286105528359*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcvBounds", "[", 
   RowBox[{"{", 
    RowBox[{"Kval_", ",", "B0val_"}], "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\[Rho]", ",", "K", ",", "fs", ",", "h", ",", "es", ",", "d", ",", "B0", 
      ",", "v", ",", "params", ",", "bounds"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"params", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"K", "\[Rule]", "Kval"}], ",", 
        RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
        RowBox[{"fs", "\[Rule]", "1"}], ",", 
        RowBox[{"h", "\[Rule]", "1"}], ",", 
        RowBox[{"d", "\[Rule]", "0.1"}], ",", 
        RowBox[{"B0", "\[Rule]", "B0val"}], ",", 
        RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Figure", " ", "out", " ", "when", " ", "the", " ", "per"}], 
        "-", 
        RowBox[{
        "capita", " ", "growth", " ", "rate", " ", "of", " ", "the", " ", 
         "infectious", " ", "class", " ", "is", " ", "equal", " ", "to", " ", 
         "zero"}]}], ",", " ", 
       RowBox[{
       "when", " ", "the", " ", "susceptible", " ", "population", " ", "is", 
        " ", "at", " ", "its", " ", "maximum"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"bounds", "=", 
      RowBox[{
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"B0", " ", "v"}], 
             RowBox[{"1", "+", "v"}]], 
            RowBox[{"(", 
             FractionBox[
              RowBox[{"es", " ", "h", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "d"}], " ", "h"}], "-", 
                 RowBox[{"d", " ", "K"}], "+", 
                 RowBox[{"es", " ", "fs", " ", "K"}]}], ")"}], " ", 
               "\[Rho]"}], 
              RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"d", "-", 
                  RowBox[{"es", " ", "fs"}]}], ")"}], "2"], " ", "K"}]], 
             ")"}]}], "-", "d", "-", "v"}], "\[Equal]", "0"}], ",", "v"}], 
        "]"}], "/.", "params"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Min", "[", 
        RowBox[{"bounds", "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", "1", ",", "2"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"Max", "[", 
        RowBox[{"bounds", "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", "1", ",", "2"}], "]"}], "]"}], "]"}]}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.685272884863634*^9, 3.6852731021901693`*^9}, {
  3.685276790026416*^9, 3.685276808692832*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"secantMethod", "[", 
   RowBox[{"{", 
    RowBox[{
    "v0init_", ",", "v1init_", ",", "Kval_", ",", "B0val_", ",", 
     "convcrit_"}], "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "v0uncon", ",", "v1uncon", ",", "v0con", ",", "v1con", ",", "conv", ",", 
      "g0", ",", "g1", ",", "v2con", ",", "v2uncon", ",", "vbnds"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "set", " ", "the", " ", "unconstrained", " ", "v", " ", "values", " ", 
      "for", " ", "use", " ", "in", " ", "calculating", " ", "the", " ", 
      "fitness", " ", "gradient"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"v0uncon", "=", "v0init"}], ";", "\[IndentingNewLine]", 
     RowBox[{"v1uncon", "=", "v1init"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"calculate", " ", "the", " ", "bounds", " ", "on", " ", "v"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"vbnds", "=", 
      RowBox[{"calcvBounds", "[", 
       RowBox[{"{", 
        RowBox[{"Kval", ",", "B0val"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "convert", " ", "v", " ", "to", " ", "the", " ", "unconstrained", " ", 
       "scale", " ", "for", " ", "use", " ", "in", " ", "the", " ", 
       "recurrence", " ", "relation"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"v0con", "=", 
      RowBox[{"Log", "[", 
       RowBox[{
        RowBox[{"(", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{"v0uncon", "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "[", "vbnds", "]"}], "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"(", 
           FractionBox[
            RowBox[{"(", 
             RowBox[{"v0uncon", "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Max", "[", "vbnds", "]"}], "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], ")"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"v1con", "=", 
      RowBox[{"Log", "[", 
       RowBox[{
        RowBox[{"(", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{"v1uncon", "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "[", "vbnds", "]"}], "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"(", 
           FractionBox[
            RowBox[{"(", 
             RowBox[{"v1uncon", "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Max", "[", "vbnds", "]"}], "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], ")"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Set", " ", "the", " ", "initial", " ", "value", " ", "of", " ", "the", 
       " ", "convergence", " ", "measure"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"conv", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"conv", ">", "convcrit"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "compute", " ", "the", " ", "value", " ", "of", " ", "the", " ", 
         "fitness", " ", "gradient", " ", "at", " ", "the", " ", 
         "unconstrained", " ", "values", " ", "of", " ", "v0", " ", "and", 
         " ", "v1"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"g0", "=", 
         RowBox[{"fitGrad", "[", 
          RowBox[{"{", 
           RowBox[{"Kval", ",", "v0uncon", ",", "B0val", ",", "0.001"}], 
           "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"g1", "=", 
         RowBox[{"fitGrad", "[", 
          RowBox[{"{", 
           RowBox[{"Kval", ",", "v1uncon", ",", "B0val", ",", "0.001"}], 
           "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "use", " ", "the", " ", "recurrence", " ", "relation", " ", "to", 
          " ", "update", " ", "the", " ", "constrained", " ", "value", " ", 
          "of", " ", "v"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"v2con", "=", 
         FractionBox[
          RowBox[{
           RowBox[{"v0con", " ", "g1"}], "-", 
           RowBox[{"v1con", " ", "g0"}]}], 
          RowBox[{"g1", "-", "g0"}]]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "compute", " ", "the", " ", "unconstrained", " ", "version"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"v2uncon", "=", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"Exp", "[", "v2con", "]"}], 
            RowBox[{"1", "+", 
             RowBox[{"Exp", "[", "v2con", "]"}]}]], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Max", "[", "vbnds", "]"}], "-", 
             RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]}], "+", 
          RowBox[{"Min", "[", "vbnds", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"v2uncon", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"v2uncon", "\[Equal]", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ",", 
           RowBox[{
            RowBox[{"Min", "[", "vbnds", "]"}], "+", "0.0001"}], ",", 
           "v2uncon"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"v2uncon", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"v2uncon", "\[Equal]", 
            RowBox[{"Max", "[", "vbnds", "]"}]}], ",", 
           RowBox[{
            RowBox[{"Max", "[", "vbnds", "]"}], "-", "0.0001"}], ",", 
           "v2uncon"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "set", " ", "the", " ", "convergence", " ", "criterion", " ", "to", 
          " ", "the", " ", "lower", " ", "of", " ", "g1", " ", "and", " ", 
          "g2"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"conv", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Abs", "[", "g0", "]"}], ",", 
            RowBox[{"Abs", "[", "g1", "]"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "update", " ", "the", " ", "unconstrained", " ", "and", " ", 
          "constrained", " ", "values", " ", "of", " ", "v0", " ", "and", " ",
           "v1"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"v0uncon", "=", "v1uncon"}], ";", "\[IndentingNewLine]", 
        RowBox[{"v0con", "=", "v1con"}], ";", "\[IndentingNewLine]", 
        RowBox[{"v1uncon", "=", "v2uncon"}], ";", "\[IndentingNewLine]", 
        RowBox[{"v1con", "=", 
         RowBox[{"Log", "[", 
          RowBox[{
           RowBox[{"(", 
            FractionBox[
             RowBox[{"(", 
              RowBox[{"v1uncon", "-", 
               RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Max", "[", "vbnds", "]"}], "-", 
               RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"(", 
              FractionBox[
               RowBox[{"(", 
                RowBox[{"v1uncon", "-", 
                 RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                 RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], 
            ")"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "v2uncon"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.685278703672469*^9, 3.6852787385356073`*^9}, {
  3.685278973819104*^9, 3.685279060252244*^9}, {3.685279098570673*^9, 
  3.685279151737397*^9}, {3.685279395751669*^9, 3.685279573850235*^9}, {
  3.6852796066436367`*^9, 3.6852796250831757`*^9}, {3.685279740103479*^9, 
  3.6852797405415087`*^9}, {3.685285595343451*^9, 3.685285735439293*^9}, {
  3.687009661037538*^9, 3.6870096725564337`*^9}}],

Cell[TextData[{
 "The value I would expect is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{
     RowBox[{"\[Sqrt]", "d"}], "=", 
     RowBox[{
      RowBox[{"\[Sqrt]", "0.1"}], "=", "0.316228"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.687020725681408*^9, 3.687020743837015*^9}}],

Cell[BoxData[
 RowBox[{"Sqrt", "[", "0.1", "]"}]], "Input"],

Cell[TextData[{
 "This is exactly what I see for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which produces a stable equilibrium at the initial parameter values."
}], "Text",
 CellChangeTimes->{{3.685286006224634*^9, 3.685286010015791*^9}, {
  3.687020753545701*^9, 3.687020770814303*^9}, {3.687105822570047*^9, 
  3.6871058282285433`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secantMethod", "[", 
  RowBox[{"{", 
   RowBox[{"0.1", ",", "0.11", ",", "1", ",", "5", ",", 
    SuperscriptBox["10", 
     RowBox[{"-", "12"}]]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.685285769580785*^9, 3.6852857893026457`*^9}, {
   3.685285953226468*^9, 3.685285953349868*^9}, {3.687010154495269*^9, 
   3.6870101585449533`*^9}, 3.687020735390926*^9, {3.68702078138957*^9, 
   3.687020801842235*^9}}],

Cell[BoxData["0.316227766016838`"], "Output",
 CellChangeTimes->{3.685285798677781*^9, 3.685285962317274*^9, 
  3.687009646116558*^9, 3.6870096902183647`*^9, 3.687009862006941*^9, 
  3.687010167473956*^9, 3.687020804539489*^9, 3.687105801140519*^9}]
}, Open  ]],

Cell[TextData[{
 "But it is also what I get when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "2"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which produces a stable limit cycle at the initial parameter values."
}], "Text",
 CellChangeTimes->{{3.6870208112805567`*^9, 3.687020830012126*^9}, {
  3.6871058163938503`*^9, 3.687105819948587*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secantMethod", "[", 
  RowBox[{"{", 
   RowBox[{"0.1", ",", "0.11", ",", "2", ",", "5", ",", 
    SuperscriptBox["10", 
     RowBox[{"-", "12"}]]}], "}"}], "]"}]], "Input"],

Cell[BoxData["0.31622776601683783`"], "Output",
 CellChangeTimes->{3.685285798677781*^9, 3.685285962317274*^9, 
  3.687009646116558*^9, 3.6870096902183647`*^9, 3.687009862006941*^9, 
  3.687010167480445*^9, 3.687020815088222*^9, 3.687105812775097*^9}]
}, Open  ]],

Cell["\<\
Thus, if no aspect of virulence, transmission, or host background mortality \
depends on resources, resources will have no effect on the evolution of \
virulence.

Below you can see that the reason the singular strategies are the same for \
the equilibrium and cycling cases is because the average S over the cycle is \
equal to the S value at the equilibrium.\
\>", "Text",
 CellChangeTimes->{{3.687020842195524*^9, 3.687020876024426*^9}, {
  3.687546166727583*^9, 3.687546172137744*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"dR", "=", 
     RowBox[{
      RowBox[{"\[Rho]", " ", "R", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox["R", "K"]}], ")"}]}], "-", 
      RowBox[{
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dS", "=", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
      RowBox[{"d", " ", "S"}], "-", 
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "v"}], 
         RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "v"}], 
         RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"params", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"K", "\[Rule]", "4"}], ",", 
       RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
       RowBox[{"fs", "\[Rule]", "1"}], ",", 
       RowBox[{"h", "\[Rule]", "1"}], ",", 
       RowBox[{"d", "\[Rule]", "0.01"}], ",", 
       RowBox[{"v", "\[Rule]", "0.1"}], ",", 
       RowBox[{"B0", "\[Rule]", "10"}], ",", 
       RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dt", "=", "0.001"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DOPRIamat", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", "/", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "/", "40"}], ",", 
         RowBox[{"9", "/", "40"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"44", "/", "45"}], ",", 
         RowBox[{
          RowBox[{"-", "56"}], "/", "15"}], ",", 
         RowBox[{"32", "/", "9"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"19372", "/", "6561"}], ",", 
         RowBox[{
          RowBox[{"-", "25360"}], "/", "2187"}], ",", 
         RowBox[{"64448", "/", "6561"}], ",", 
         RowBox[{
          RowBox[{"-", "212"}], "/", "729"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9017", "/", "3168"}], ",", 
         RowBox[{
          RowBox[{"-", "355"}], "/", "33"}], ",", 
         RowBox[{"46732", "/", "5247"}], ",", 
         RowBox[{"49", "/", "176"}], ",", 
         RowBox[{
          RowBox[{"-", "5103"}], "/", "18656"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"35", "/", "384"}], ",", "0", ",", 
         RowBox[{"500", "/", "1113"}], ",", 
         RowBox[{"125", "/", "192"}], ",", 
         RowBox[{
          RowBox[{"-", "2187"}], "/", "6784"}], ",", 
         RowBox[{"11", "/", "84"}]}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DOPRIbvec", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"35", "/", "384"}], ",", "0", ",", 
       RowBox[{"500", "/", "1113"}], ",", 
       RowBox[{"125", "/", "192"}], ",", 
       RowBox[{
        RowBox[{"-", "2187"}], "/", "6784"}], ",", 
       RowBox[{"11", "/", "84"}], ",", "0"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DOPRIcvec", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", "5"}], ",", 
       RowBox[{"3", "/", "10"}], ",", 
       RowBox[{"4", "/", "5"}], ",", 
       RowBox[{"8", "/", "9"}], ",", "1", ",", "1"}], "}"}]}], ";", 
    RowBox[{"DOPRIevec", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"71", "/", "57600"}], ",", "0", ",", 
       RowBox[{
        RowBox[{"-", "71"}], "/", "16695"}], ",", 
       RowBox[{"71", "/", "1920"}], ",", 
       RowBox[{
        RowBox[{"-", "17253"}], "/", "339200"}], ",", 
       RowBox[{"22", "/", "525"}], ",", 
       RowBox[{
        RowBox[{"-", "1"}], "/", "40"}]}], "}"}]}], ";", 
    RowBox[{
     RowBox[{"DOPRICoefficients", "[", 
      RowBox[{"5", ",", "p_"}], "]"}], ":=", 
     RowBox[{"N", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "DOPRIamat", ",", "DOPRIbvec", ",", "DOPRIcvec", ",", "DOPRIevec"}], 
        "}"}], ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"soln", "=", 
     RowBox[{"NDSolve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
           RowBox[{"(", 
            RowBox[{"dS", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", 
                RowBox[{"S", "[", "t", "]"}]}], ",", 
               RowBox[{"Q", "\[Rule]", 
                RowBox[{"Q", "[", "t", "]"}]}], ",", 
               RowBox[{"R", "\[Rule]", 
                RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
           RowBox[{"(", 
            RowBox[{"dQ", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", 
                RowBox[{"S", "[", "t", "]"}]}], ",", 
               RowBox[{"Q", "\[Rule]", 
                RowBox[{"Q", "[", "t", "]"}]}], ",", 
               RowBox[{"R", "\[Rule]", 
                RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
           RowBox[{"(", 
            RowBox[{"dR", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", 
                RowBox[{"S", "[", "t", "]"}]}], ",", 
               RowBox[{"Q", "\[Rule]", 
                RowBox[{"Q", "[", "t", "]"}]}], ",", 
               RowBox[{"R", "\[Rule]", 
                RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
          RowBox[{
           RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
          RowBox[{
           RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
           RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
       RowBox[{"{", 
        RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
       RowBox[{"Method", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<ExplicitRungeKutta\>\"", ",", 
          RowBox[{"\"\<DifferenceOrder\>\"", "\[Rule]", "5"}], ",", 
          RowBox[{"\"\<Coefficients\>\"", "\[Rule]", "DOPRICoefficients"}], 
          ",", 
          RowBox[{"\"\<StiffnessTest\>\"", "\[Rule]", "False"}]}], "}"}]}], 
       ",", 
       RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
       RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "800", ",", "1000"}], "}"}]}], "]"}], "]"}], ";"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Find", " ", "the", " ", "average", " ", "S", " ", "over", " ", "the", 
     " ", "cycle"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"St", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "800", ",", "900", ",", "dt"}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "find", " ", "the", " ", "first", " ", "peak", " ", "of", " ", "the", " ",
      "cycle"}], " ", "*)"}], "\t", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FirstPeak", "=", " ", 
     RowBox[{"800", "+", 
      RowBox[{
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"St", ",", 
          RowBox[{"Max", "[", "St", "]"}]}], "]"}], "\[LeftDoubleBracket]", 
        RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], " ", "dt"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Find", " ", "next", " ", "peak"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"St", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "FirstPeak", ",", "1000", ",", "dt"}], "}"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Cycle", " ", "period"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"T", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           FractionBox[
            RowBox[{
             RowBox[{
             "St", "\[LeftDoubleBracket]", "t", "\[RightDoubleBracket]"}], 
             "-", 
             RowBox[{"St", "\[LeftDoubleBracket]", 
              RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}]}], 
            RowBox[{
             RowBox[{"St", "\[LeftDoubleBracket]", 
              RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}], "-", 
             RowBox[{"St", "\[LeftDoubleBracket]", 
              RowBox[{"t", "+", "2"}], "\[RightDoubleBracket]"}]}]], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "1", ",", 
             RowBox[{
              RowBox[{"Length", "[", "St", "]"}], "-", "2"}]}], "}"}]}], 
          "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", "<", "0"}], "&"}], ")"}]}]}], "]"}], 
       "\[LeftDoubleBracket]", 
       RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", "dt"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Next", " ", "peak"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SecondPeak", "=", 
     RowBox[{"FirstPeak", "+", "T"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Riemann", " ", "sum", " ", "to", " ", "find", " ", "the", " ", 
     "integral", " ", "of", " ", "S", 
     RowBox[{"(", "t", ")"}], " ", "over", " ", "the", " ", "cycle"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Ssum", "=", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"dt", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
         "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", 
         RowBox[{"FirstPeak", "+", 
          RowBox[{"dt", "/", "2"}]}], ",", 
         RowBox[{"SecondPeak", "+", 
          RowBox[{"dt", "/", "2"}]}], ",", "dt"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "print", " ", "the", " ", "average", " ", "S", " ", "over", " ", "the", 
     " ", "cycle"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"AvgS", "=", 
    RowBox[{"Ssum", "/", "T"}]}]}]}]], "Input",
 CellChangeTimes->{
  3.687020786917714*^9, {3.687545982577653*^9, 3.68754602030873*^9}, 
   3.687546063274652*^9, {3.687546104382592*^9, 3.687546110097784*^9}, {
   3.687546175604937*^9, 3.6875461806141787`*^9}}],

Cell[BoxData["0.1209976967879985`"], "Output",
 CellChangeTimes->{3.6875461127450857`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"At", " ", 
    RowBox[{"equilibrium", ":"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"params", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"K", "\[Rule]", "2"}], ",", 
       RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
       RowBox[{"fs", "\[Rule]", "1"}], ",", 
       RowBox[{"h", "\[Rule]", "1"}], ",", 
       RowBox[{"d", "\[Rule]", "0.01"}], ",", 
       RowBox[{"v", "\[Rule]", "0.1"}], ",", 
       RowBox[{"B0", "\[Rule]", "10"}], ",", 
       RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Eq", "=", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"dR", "\[Equal]", "0"}], ",", 
          RowBox[{"dS", "\[Equal]", "0"}], ",", 
          RowBox[{"dQ", "\[Equal]", "0"}]}], "}"}], "/.", "params"}], ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "S", ",", "Q"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"EndEq", "=", 
    RowBox[{"Eq", "\[LeftDoubleBracket]", 
     RowBox[{
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"AllTrue", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"AllTrue", "[", 
                  RowBox[{
                   RowBox[{"Re", "[", 
                    RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"#", ">", "0"}], "&"}]}], "]"}], ",", 
                 RowBox[{"AllTrue", "[", 
                  RowBox[{
                   RowBox[{"Im", "[", 
                    RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"#", "<", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "9"}]]}], "&"}]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", 
                 RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "j", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"#", "\[Equal]", "True"}], "&"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", 
            RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], ",", 
        "True"}], "]"}], "\[LeftDoubleBracket]", 
      RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
     "\[RightDoubleBracket]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6875460380509233`*^9, 3.6875460472971487`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"R", "\[Rule]", "0.24666093274009326`"}], ",", 
   RowBox[{"S", "\[Rule]", "0.121`"}], ",", 
   RowBox[{"Q", "\[Rule]", "0.9719096584999403`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.687546047880004*^9, 3.687546095583967*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Parasites increase host mortality rate in a resource-independent way, second \
function\
\>", "Subsection",
 CellChangeTimes->{{3.687009260219686*^9, 3.6870092666312723`*^9}, {
  3.687101582777829*^9, 3.687101591864902*^9}, {3.687624758697657*^9, 
  3.6876247666065903`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{
    RowBox[{"-", "d"}], "-", "vm", "+", 
    RowBox[{"S", " ", 
     RowBox[{"\[Beta]", "[", "vm", "]"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6870076323436337`*^9, 3.687007640058958*^9}, 
   3.6876145228504553`*^9}],

Cell[CellGroupData[{

Cell["\<\
Finding the singular strategy when the resident dynamics go to a stable \
equilibrium\
\>", "Subsubsection",
 CellChangeTimes->{{3.687005034044724*^9, 3.6870050485458612`*^9}}],

Cell[TextData[{
 "If the resident dynamics approach the stable equilibrium, we should be able \
to calculate the singular strategy analytically. This will be a useful \
comparison point for situations where the dynamics are not stable. From the \
fact that, at equilibrium, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox["dQ", "dt"], "=", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", we can immediately calculate that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["S", "^"], "=", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", "v"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}]}], 
     RowBox[{
      SubscriptBox["\[Beta]", "0"], "v"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". "
}], "Text",
 CellChangeTimes->{{3.687006529062045*^9, 3.68700657177782*^9}, {
   3.68700684139579*^9, 3.6870068833472567`*^9}, {3.687007263676857*^9, 
   3.687007273790606*^9}, 3.687008035080208*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Calculating", " ", "the", " ", "equilibrium"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"dQ", "\[Equal]", "0"}], ",", "S"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{"r", "=", 
    RowBox[{"r", "/.", 
     RowBox[{
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{"dQ", "\[Equal]", "0"}], ",", "S"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.687006576526287*^9, 3.687006696957065*^9}, {
  3.687006794822165*^9, 3.687006834735914*^9}, {3.687007735953511*^9, 
  3.68700774574067*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"S", "\[Rule]", 
    FractionBox[
     RowBox[{"d", "+", "v"}], 
     RowBox[{"\[Beta]", "[", "v", "]"}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.687614526459745*^9, 
   3.6876247937820787`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "d"}], "-", "vm", "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{"\[Beta]", "[", "vm", "]"}]}], 
   RowBox[{"\[Beta]", "[", "v", "]"}]]}]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.687614526459745*^9, 
   3.687624793802247*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{"r", ",", "vm"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{
     SuperscriptBox["\[Beta]", "\[Prime]",
      MultilineFunction->None], "[", "v", "]"}]}], 
   RowBox[{"\[Beta]", "[", "v", "]"}]]}]], "Output",
 CellChangeTimes->{3.68761462326373*^9, 3.687624800581546*^9}]
}, Open  ]],

Cell[TextData[{
 "The singular strategy is given by the value of ",
 StyleBox["v",
  FontSlant->"Italic"],
 " that satisfies ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}], 
      RowBox[{"\[Beta]", "'"}], 
      RowBox[{"(", "v", ")"}]}], "-", 
     RowBox[{"\[Beta]", "(", "v", ")"}]}], "=", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.687614671289815*^9, 3.6876147029059753`*^9}, 
   3.687614745866679*^9}],

Cell[TextData[{
 "We can also assess whether any such singular strategy will be \
evolutionarily stable by looking at the second derivative. You can see that \
this depends on the sign of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", "''"}], 
    RowBox[{"(", "v", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ": if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[Beta]", "''"}], 
     RowBox[{"(", "v", ")"}]}], "<", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (that is, if transmission rate is a saturating function of virulence), \
then the singular strategy will be evolutionarily stable."
}], "Text",
 CellChangeTimes->{{3.687614768771392*^9, 3.687614860324135*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{"r", ",", 
     RowBox[{"{", 
      RowBox[{"vm", ",", "2"}], "}"}]}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.687614757971652*^9, 3.687614759985258*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"d", "+", "v"}], ")"}], " ", 
   RowBox[{
    SuperscriptBox["\[Beta]", "\[Prime]\[Prime]",
     MultilineFunction->None], "[", "v", "]"}]}], 
  RowBox[{"\[Beta]", "[", "v", "]"}]]], "Output",
 CellChangeTimes->{3.6876147605940857`*^9}]
}, Open  ]],

Cell[TextData[{
 "We can assess whether the singular strategy is convergence stable by \
looking at the derivative of the fitness gradient with respect to the \
resident trait. Note that the numerator (which is sign-determining) can be \
written as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[Beta]", "(", "v", ")"}], 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], 
     RowBox[{"\[Beta]", "''"}], 
     RowBox[{"(", "v", ")"}]}], "-", 
    RowBox[{
     RowBox[{"\[Beta]", "'"}], 
     RowBox[{"(", "v", ")"}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"d", "+", "v"}], ")"}], 
        RowBox[{"\[Beta]", "'"}], 
        RowBox[{"(", "v", ")"}]}], "-", 
       RowBox[{"\[Beta]", "(", "v", ")"}]}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". At the singular strategy, we have that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}], 
      RowBox[{"\[Beta]", "'"}], 
      RowBox[{"(", "v", ")"}]}], "-", 
     RowBox[{"\[Beta]", "(", "v", ")"}]}], "=", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", so the convergence stability condition is just ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", 
     RowBox[{"(", "v", ")"}], 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], 
     RowBox[{"\[Beta]", "''"}], 
     RowBox[{"(", "v", ")"}]}], "<", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which is identical to the evolutionarily stability condition. Thus, a \
saturating relationship between virulence and transmission guarantees that \
any singular strategy will be both convergence stable and evolutionarily \
stable."
}], "Text",
 CellChangeTimes->{{3.68761495373133*^9, 3.6876150236290073`*^9}, {
  3.6876150876541*^9, 3.687615243510829*^9}, {3.6876153254704742`*^9, 
  3.6876153552707443`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Simplify", "[", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{"r", ",", "vm"}], "]"}], "/.", 
     RowBox[{"{", 
      RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], ",", "v"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Numerator", "[", 
    RowBox[{"Simplify", "[", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{"r", ",", "vm"}], "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], ",", "v"}], "]"}], "]"}], 
    "]"}], "\[Equal]", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       RowBox[{"\[Beta]", "'"}], "[", "v", "]"}]}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"d", "+", "v"}], ")"}], " ", 
        RowBox[{
         RowBox[{"\[Beta]", "'"}], "[", "v", "]"}]}], "-", 
       RowBox[{"\[Beta]", "[", "v", "]"}]}], ")"}]}], "+", 
    RowBox[{
     RowBox[{"\[Beta]", "[", "v", "]"}], " ", 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}], " ", 
     RowBox[{
      RowBox[{"\[Beta]", "''"}], "[", "v", "]"}]}]}]}], "//", 
  "Simplify"}]}], "Input",
 CellChangeTimes->{{3.687614870877644*^9, 3.687614878854336*^9}, {
  3.6876150268369913`*^9, 3.687615085242673*^9}, {3.6876151282680817`*^9, 
  3.687615135061757*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"(", 
      RowBox[{"d", "+", "v"}], ")"}]}], " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["\[Beta]", "\[Prime]",
       MultilineFunction->None], "[", "v", "]"}], "2"]}], "+", 
   RowBox[{
    RowBox[{"\[Beta]", "[", "v", "]"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[Beta]", "\[Prime]",
        MultilineFunction->None], "[", "v", "]"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", 
       RowBox[{
        SuperscriptBox["\[Beta]", "\[Prime]\[Prime]",
         MultilineFunction->None], "[", "v", "]"}]}]}], ")"}]}]}], 
  SuperscriptBox[
   RowBox[{"\[Beta]", "[", "v", "]"}], "2"]]], "Output",
 CellChangeTimes->{{3.687614871278205*^9, 3.687614879135795*^9}, 
   3.687615031754753*^9, {3.687615080674281*^9, 3.687615085532686*^9}, 
   3.687615135351201*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.687614871278205*^9, 3.687614879135795*^9}, 
   3.687615031754753*^9, {3.687615080674281*^9, 3.687615085532686*^9}, 
   3.687615135371834*^9}]
}, Open  ]],

Cell[TextData[{
 "If we specify a functional form for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "(", "v", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", we can go even further, and actually calculate the singular strategy.\n\n\
For example, if we assume that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", "(", "v", ")"}], "=", 
    RowBox[{
     SubscriptBox["\[Beta]", "0"], "+", 
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "1"], "v"}], 
      RowBox[{"1", "+", "v"}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (so that the parasite can transmit, even if virulence is 0), then the \
singular strategy is given by "
}], "Text",
 CellChangeTimes->{{3.687614631657432*^9, 3.6876146540102987`*^9}, {
  3.687615426495294*^9, 3.68761547467043*^9}, {3.687615512774002*^9, 
  3.6876156778104887`*^9}, {3.6876247089211082`*^9, 3.6876247431053047`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"-", "d"}], "-", "vm", "+", 
          FractionBox[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"d", "+", "v"}], ")"}], " ", 
            RowBox[{"\[Beta]", "[", "vm", "]"}]}], 
           RowBox[{"\[Beta]", "[", "v", "]"}]]}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"\[Beta]", "[", "vm", "]"}], "\[Rule]", 
            RowBox[{"\[Beta]0", "+", 
             FractionBox[
              RowBox[{"\[Beta]1", " ", "vm"}], 
              RowBox[{"1", "+", "vm"}]]}]}], ",", 
           RowBox[{
            RowBox[{"\[Beta]", "[", "v", "]"}], "\[Rule]", 
            RowBox[{"\[Beta]0", "+", 
             FractionBox[
              RowBox[{"\[Beta]1", " ", "v"}], 
              RowBox[{"1", "+", "v"}]]}]}]}], "}"}]}], ",", "vm"}], "]"}], "/.", 
      RowBox[{"{", 
       RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], ")"}], "\[Equal]", "0"}], ",",
    "v"}], "]"}]], "Input",
 CellChangeTimes->{{3.6876248106401787`*^9, 3.68762486919589*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "\[Beta]0"}], "-", 
       SqrtBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "\[Beta]0"}], " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", "\[Beta]0", " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", 
          SuperscriptBox["\[Beta]1", "2"]}]}]]}], 
      RowBox[{"\[Beta]0", "+", "\[Beta]1"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "\[Beta]0"}], "+", 
       SqrtBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "\[Beta]0"}], " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", "\[Beta]0", " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", 
          SuperscriptBox["\[Beta]1", "2"]}]}]]}], 
      RowBox[{"\[Beta]0", "+", "\[Beta]1"}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.687624854049635*^9, 3.687624869569385*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"-", "d"}], "-", "vm", "+", 
        RowBox[{"S", " ", 
         RowBox[{"\[Beta]", "[", "vm", "]"}]}]}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\[Beta]", "[", "vm", "]"}], "\[Rule]", 
         RowBox[{"\[Beta]0", "+", 
          FractionBox[
           RowBox[{"\[Beta]1", " ", "vm"}], 
           RowBox[{"1", "+", "vm"}]]}]}], "}"}]}], ",", "vm"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{"vm", "\[Rule]", "v"}], "}"}]}], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.68762495385326*^9, 3.6876249586341963`*^9}, {
  3.687625007528635*^9, 3.687625012094792*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{"1", "+", 
    RowBox[{"2", " ", "v"}], "+", 
    SuperscriptBox["v", "2"], "-", 
    RowBox[{"S", " ", "\[Beta]1"}]}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"1", "+", "v"}], ")"}], "2"]]}]], "Output",
 CellChangeTimes->{{3.6876249555692472`*^9, 3.6876249589544*^9}, 
   3.6876250126147537`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using the secant method to find the singular strategies", \
"Subsubsection",
 CellChangeTimes->{{3.6852785856254873`*^9, 3.685278593825942*^9}, {
  3.685286729443479*^9, 3.685286733952943*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fitGrad", "[", 
    RowBox[{"{", 
     RowBox[{
     "thisK_", ",", "thisv_", ",", "thisB0_", ",", "thisB1_", ",", "dt_"}], 
     "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "params", ",", "K", ",", "v", ",", "\[Rho]", ",", "fs", ",", "h", ",", 
       "d", ",", "B0", ",", "B1", ",", "es", ",", "dR", ",", "R", ",", "S", 
       ",", "Q", ",", "dS", ",", "dQ", ",", "Eq", ",", "EndEq", ",", "AvgS", 
       ",", "soln", ",", "St", ",", "FirstPeak", ",", "T", ",", "SecondPeak", 
       ",", "Ssum"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"params", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"K", "\[Rule]", "thisK"}], ",", 
         RowBox[{"v", "\[Rule]", "thisv"}], ",", 
         RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
         RowBox[{"fs", "\[Rule]", "1"}], ",", 
         RowBox[{"h", "\[Rule]", "1"}], ",", 
         RowBox[{"d", "\[Rule]", "0.1"}], ",", 
         RowBox[{"B0", "\[Rule]", "thisB0"}], ",", 
         RowBox[{"B1", "\[Rule]", "thisB1"}], ",", 
         RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dR", "=", 
       RowBox[{
        RowBox[{"\[Rho]", " ", "R", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           FractionBox["R", "K"]}], ")"}]}], "-", 
        RowBox[{
         FractionBox[
          RowBox[{"fs", " ", "R"}], 
          RowBox[{"h", "+", "R"}]], " ", 
         RowBox[{"(", 
          RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dS", "=", 
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{"es", " ", "fs", " ", "R"}], 
          RowBox[{"h", "+", "R"}]], " ", 
         RowBox[{"(", 
          RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
        RowBox[{"d", " ", "S"}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"B0", "+", 
           FractionBox[
            RowBox[{"B1", " ", "v"}], 
            RowBox[{"1", "+", "v"}]]}], ")"}], " ", "S", " ", "Q"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dQ", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"B0", "+", 
           FractionBox[
            RowBox[{"B1", " ", "v"}], 
            RowBox[{"1", "+", "v"}]]}], ")"}], " ", "S", " ", "Q"}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Calculate", " ", "the", " ", "equilibria", " ", "of", " ", "the", " ",
         "system"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"Eq", "=", 
       RowBox[{
        RowBox[{"Solve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"dR", "\[Equal]", "0"}], ",", 
            RowBox[{"dS", "\[Equal]", "0"}], ",", 
            RowBox[{"dQ", "\[Equal]", "0"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"R", ",", "S", ",", "Q"}], "}"}]}], "]"}], "/.", 
        "params"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Which", " ", "equilibrium", " ", "represents", " ", "the", " ", 
        "endemic", " ", "equilibrium", " ", "with", " ", "all", " ", "values",
         " ", 
        RowBox[{"positive", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"EndEq", "=", 
       RowBox[{"Eq", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{
               RowBox[{"Eq", "\[LeftDoubleBracket]", 
                RowBox[{"i", ",", ";;", ",", "2"}], "\[RightDoubleBracket]"}],
                ",", 
               RowBox[{
                RowBox[{"#", ">", "0"}], "&"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], ",", 
           "True"}], "]"}], "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
        "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Does", " ", "the", " ", "Jacobian", " ", "evaluated", " ", "at", " ", 
        "this", " ", "equilibrium", " ", "have", " ", "all", " ", "negative", 
        " ", "eigenvalues", " ", 
        RowBox[{"e", ".", "g", ".", " ", "is"}], " ", "the", " ", 
        "equilibrium", " ", 
        RowBox[{"stable", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"AvgS", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "Q"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "Q"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "Q"}], "]"}]}], "}"}]}], "}"}], "/.", 
               "params"}], "/.", "EndEq"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"#", "<", "0"}], "&"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"if", " ", "all", " ", "e"}], "-", 
            RowBox[{"values", " ", "are", " ", "negative"}]}], ",", " ", 
           RowBox[{"return", " ", "the", " ", "equilibrium", " ", "S"}]}], 
          " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"EndEq", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"otherwise", ",", " ", 
           RowBox[{"numerically", " ", "solve"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"soln", "=", 
           RowBox[{"NDSolve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dS", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dQ", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dR", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
                RowBox[{
                 RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
                RowBox[{
                 RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
                 RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
             RowBox[{"{", 
              RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
             RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
             RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"St", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "800", ",", "900", ",", "dt"}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "find", " ", "the", " ", "first", " ", "peak", " ", "of", " ", 
            "the", " ", "cycle"}], " ", "*)"}], "\t", "\[IndentingNewLine]", 
          RowBox[{"FirstPeak", "=", " ", 
           RowBox[{"800", "+", 
            RowBox[{
             RowBox[{
              RowBox[{"Position", "[", 
               RowBox[{"St", ",", 
                RowBox[{"Max", "[", "St", "]"}]}], "]"}], 
              "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
             "dt"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Find", " ", "next", " ", "peak"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"St", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "FirstPeak", ",", "1000", ",", "dt"}], 
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Cycle", " ", "period"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"T", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 FractionBox[
                  RowBox[{
                   RowBox[{
                   "St", "\[LeftDoubleBracket]", "t", 
                    "\[RightDoubleBracket]"}], "-", 
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}]}], 
                  RowBox[{
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}], "-", 
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "2"}], "\[RightDoubleBracket]"}]}]], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "1", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "St", "]"}], "-", "2"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"_", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "<", "0"}], "&"}], ")"}]}]}], "]"}], 
             "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
            "dt"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Next", " ", "peak"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"SecondPeak", "=", 
           RowBox[{"FirstPeak", "+", "T"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Riemann", " ", "sum", " ", "to", " ", "find", " ", "the", " ", 
            "integral", " ", "of", " ", "S", 
            RowBox[{"(", "t", ")"}], " ", "over", " ", "the", " ", "cycle"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Ssum", "=", 
           RowBox[{"Sum", "[", 
            RowBox[{
             RowBox[{"dt", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", 
               RowBox[{"FirstPeak", "+", 
                RowBox[{"dt", "/", "2"}]}], ",", 
               RowBox[{"SecondPeak", "+", 
                RowBox[{"dt", "/", "2"}]}], ",", "dt"}], "}"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"calculate", " ", "the", " ", "average", " ", "S"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Ssum", "/", "T"}]}]}], "\[IndentingNewLine]", "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"-", 
        FractionBox[
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "v"}], "+", 
          SuperscriptBox["v", "2"], "-", 
          RowBox[{"AvgS", " ", "B1"}]}], 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"1", "+", "v"}], ")"}], "2"]]}], "/.", "params"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.684451491058712*^9, 3.684451498709157*^9}, {
   3.684451604539295*^9, 3.684451791255568*^9}, {3.684451901152554*^9, 
   3.684451921069169*^9}, {3.684459864892218*^9, 3.6844599372470407`*^9}, 
   3.6844600012512074`*^9, {3.684460037389927*^9, 3.684460086194024*^9}, {
   3.684460643123582*^9, 3.684460670460699*^9}, {3.6844610713999453`*^9, 
   3.684461113562046*^9}, {3.684461613026376*^9, 3.6844616605762787`*^9}, {
   3.6844617298486853`*^9, 3.6844618363765287`*^9}, {3.684462024742939*^9, 
   3.684462051881359*^9}, {3.684462106169607*^9, 3.6844622102017593`*^9}, {
   3.68446234278074*^9, 3.684462342831826*^9}, {3.684462389031413*^9, 
   3.6844624104986267`*^9}, {3.6845102976320753`*^9, 3.68451031188741*^9}, {
   3.684513228332176*^9, 3.6845132296346684`*^9}, {3.684514415790408*^9, 
   3.684514416261383*^9}, {3.684517682553866*^9, 3.68451771400926*^9}, {
   3.684858644808329*^9, 3.684858648531245*^9}, {3.684861180111555*^9, 
   3.684861188863456*^9}, {3.684861844445223*^9, 3.684861849269473*^9}, {
   3.685199417091984*^9, 3.685199426114366*^9}, {3.685199676116304*^9, 
   3.6851996925960703`*^9}, {3.6852039890991173`*^9, 3.685204067050282*^9}, {
   3.685204165376914*^9, 3.685204169122121*^9}, 3.6852044225193253`*^9, 
   3.685204511406601*^9, {3.685204566350975*^9, 3.685204583304344*^9}, 
   3.6852046278867207`*^9, {3.685204691687089*^9, 3.685204692584836*^9}, {
   3.6852049012642517`*^9, 3.685204909620894*^9}, {3.685205042078187*^9, 
   3.685205077617441*^9}, {3.685208830792323*^9, 3.685208833548361*^9}, {
   3.685209086123391*^9, 3.685209088475152*^9}, 3.685209190534054*^9, {
   3.685209437437945*^9, 3.685209484080401*^9}, {3.685210360716099*^9, 
   3.685210462045497*^9}, {3.685210609588832*^9, 3.6852106134022503`*^9}, {
   3.685210668303978*^9, 3.685210670822495*^9}, {3.6852116858679247`*^9, 
   3.6852116862714777`*^9}, 3.685211725469466*^9, 3.687009388968285*^9, {
   3.6871057783281517`*^9, 3.687105779620612*^9}, {3.687624892901987*^9, 
   3.687624922691238*^9}, 3.687624965658059*^9, {3.6876250220092983`*^9, 
   3.687625031040207*^9}}],

Cell[TextData[{
 "A better way to do it will be to write a custom root finding algorithm. We \
can do this using the secant method, which is essentially a finite difference \
approximation of Newton\[CloseCurlyQuote]s method, since we cannot compute \
the derivative of the fitness gradient with respect to ",
 StyleBox["v",
  FontSlant->"Italic"],
 ". To use this method, you must provide two initial values for ",
 StyleBox["v",
  FontSlant->"Italic"],
 ", and then you converge from there using the recursion relation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["v", "n"], "=", 
    FractionBox[
     RowBox[{
      RowBox[{
       SubscriptBox["v", 
        RowBox[{"n", "-", "2"}]], 
       RowBox[{"f", "(", 
        SubscriptBox["v", 
         RowBox[{"n", "-", "1"}]], ")"}]}], "-", 
      RowBox[{
       SubscriptBox["v", 
        RowBox[{"n", "-", "1"}]], 
       RowBox[{"f", "(", 
        SubscriptBox["v", 
         RowBox[{"n", "-", "2"}]], ")"}]}]}], 
     RowBox[{
      RowBox[{"f", "(", 
       SubscriptBox["v", 
        RowBox[{"n", "-", "1"}]], ")"}], "-", 
      RowBox[{"f", "(", 
       SubscriptBox["v", 
        RowBox[{"n", "-", "2"}]], ")"}]}]]}], TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{
  3.68527857974299*^9, {3.685286036836186*^9, 3.685286105528359*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcvBounds", "[", 
   RowBox[{"{", 
    RowBox[{"Kval_", ",", "B0val_", ",", "B1val_"}], "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\[Rho]", ",", "K", ",", "fs", ",", "h", ",", "es", ",", "d", ",", "B0", 
      ",", "B1", ",", "v", ",", "params", ",", "bounds"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"params", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"K", "\[Rule]", "Kval"}], ",", 
        RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
        RowBox[{"fs", "\[Rule]", "1"}], ",", 
        RowBox[{"h", "\[Rule]", "1"}], ",", 
        RowBox[{"d", "\[Rule]", "0.1"}], ",", 
        RowBox[{"B0", "\[Rule]", "B0val"}], ",", 
        RowBox[{"B1", "\[Rule]", "B1val"}], ",", 
        RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Figure", " ", "out", " ", "when", " ", "the", " ", "per"}], 
        "-", 
        RowBox[{
        "capita", " ", "growth", " ", "rate", " ", "of", " ", "the", " ", 
         "infectious", " ", "class", " ", "is", " ", "equal", " ", "to", " ", 
         "zero"}]}], ",", " ", 
       RowBox[{
       "when", " ", "the", " ", "susceptible", " ", "population", " ", "is", 
        " ", "at", " ", "its", " ", "maximum"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"bounds", "=", 
      RowBox[{
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"B0", "+", 
              FractionBox[
               RowBox[{"B1", " ", "v"}], 
               RowBox[{"1", "+", "v"}]]}], ")"}], 
            RowBox[{"(", 
             FractionBox[
              RowBox[{"es", " ", "h", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"-", "d"}], " ", "h"}], "-", 
                 RowBox[{"d", " ", "K"}], "+", 
                 RowBox[{"es", " ", "fs", " ", "K"}]}], ")"}], " ", 
               "\[Rho]"}], 
              RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"d", "-", 
                  RowBox[{"es", " ", "fs"}]}], ")"}], "2"], " ", "K"}]], 
             ")"}]}], "-", "d", "-", "v"}], "\[Equal]", "0"}], ",", "v"}], 
        "]"}], "/.", "params"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Min", "[", 
        RowBox[{"bounds", "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", "1", ",", "2"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"Max", "[", 
        RowBox[{"bounds", "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", "1", ",", "2"}], "]"}], "]"}], "]"}]}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.685272884863634*^9, 3.6852731021901693`*^9}, {
  3.685276790026416*^9, 3.685276808692832*^9}, {3.687625062842588*^9, 
  3.687625086906579*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"secantMethod", "[", 
   RowBox[{"{", 
    RowBox[{
    "v0init_", ",", "v1init_", ",", "Kval_", ",", "B0val_", ",", "B1val_", 
     ",", "convcrit_"}], "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "v0uncon", ",", "v1uncon", ",", "v0con", ",", "v1con", ",", "conv", ",", 
      "g0", ",", "g1", ",", "v2con", ",", "v2uncon", ",", "vbnds"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "set", " ", "the", " ", "unconstrained", " ", "v", " ", "values", " ", 
      "for", " ", "use", " ", "in", " ", "calculating", " ", "the", " ", 
      "fitness", " ", "gradient"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"v0uncon", "=", "v0init"}], ";", "\[IndentingNewLine]", 
     RowBox[{"v1uncon", "=", "v1init"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"calculate", " ", "the", " ", "bounds", " ", "on", " ", "v"}], 
      " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"vbnds", "=", 
      RowBox[{"calcvBounds", "[", 
       RowBox[{"{", 
        RowBox[{"Kval", ",", "B0val", ",", "B1val"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "convert", " ", "v", " ", "to", " ", "the", " ", "unconstrained", " ", 
       "scale", " ", "for", " ", "use", " ", "in", " ", "the", " ", 
       "recurrence", " ", "relation"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"v0con", "=", 
      RowBox[{"Log", "[", 
       RowBox[{
        RowBox[{"(", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{"v0uncon", "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "[", "vbnds", "]"}], "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"(", 
           FractionBox[
            RowBox[{"(", 
             RowBox[{"v0uncon", "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Max", "[", "vbnds", "]"}], "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], ")"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"v1con", "=", 
      RowBox[{"Log", "[", 
       RowBox[{
        RowBox[{"(", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{"v1uncon", "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Max", "[", "vbnds", "]"}], "-", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"(", 
           FractionBox[
            RowBox[{"(", 
             RowBox[{"v1uncon", "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Max", "[", "vbnds", "]"}], "-", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], ")"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Set", " ", "the", " ", "initial", " ", "value", " ", "of", " ", "the", 
       " ", "convergence", " ", "measure"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"conv", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"conv", ">", "convcrit"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "compute", " ", "the", " ", "value", " ", "of", " ", "the", " ", 
         "fitness", " ", "gradient", " ", "at", " ", "the", " ", 
         "unconstrained", " ", "values", " ", "of", " ", "v0", " ", "and", 
         " ", "v1"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"g0", "=", 
         RowBox[{"fitGrad", "[", 
          RowBox[{"{", 
           RowBox[{
           "Kval", ",", "v0uncon", ",", "B0val", ",", "B1val", ",", "0.001"}],
            "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"g1", "=", 
         RowBox[{"fitGrad", "[", 
          RowBox[{"{", 
           RowBox[{
           "Kval", ",", "v1uncon", ",", "B0val", ",", "B1val", ",", "0.001"}],
            "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "use", " ", "the", " ", "recurrence", " ", "relation", " ", "to", 
          " ", "update", " ", "the", " ", "constrained", " ", "value", " ", 
          "of", " ", "v"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"v2con", "=", 
         FractionBox[
          RowBox[{
           RowBox[{"v0con", " ", "g1"}], "-", 
           RowBox[{"v1con", " ", "g0"}]}], 
          RowBox[{"g1", "-", "g0"}]]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "compute", " ", "the", " ", "unconstrained", " ", "version"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"v2uncon", "=", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"Exp", "[", "v2con", "]"}], 
            RowBox[{"1", "+", 
             RowBox[{"Exp", "[", "v2con", "]"}]}]], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Max", "[", "vbnds", "]"}], "-", 
             RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]}], "+", 
          RowBox[{"Min", "[", "vbnds", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"v2uncon", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"v2uncon", "\[Equal]", 
            RowBox[{"Min", "[", "vbnds", "]"}]}], ",", 
           RowBox[{
            RowBox[{"Min", "[", "vbnds", "]"}], "+", "0.0001"}], ",", 
           "v2uncon"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"v2uncon", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"v2uncon", "\[Equal]", 
            RowBox[{"Max", "[", "vbnds", "]"}]}], ",", 
           RowBox[{
            RowBox[{"Max", "[", "vbnds", "]"}], "-", "0.0001"}], ",", 
           "v2uncon"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "set", " ", "the", " ", "convergence", " ", "criterion", " ", "to", 
          " ", "the", " ", "lower", " ", "of", " ", "g1", " ", "and", " ", 
          "g2"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"conv", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Abs", "[", "g0", "]"}], ",", 
            RowBox[{"Abs", "[", "g1", "]"}]}], "}"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "update", " ", "the", " ", "unconstrained", " ", "and", " ", 
          "constrained", " ", "values", " ", "of", " ", "v0", " ", "and", " ",
           "v1"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"v0uncon", "=", "v1uncon"}], ";", "\[IndentingNewLine]", 
        RowBox[{"v0con", "=", "v1con"}], ";", "\[IndentingNewLine]", 
        RowBox[{"v1uncon", "=", "v2uncon"}], ";", "\[IndentingNewLine]", 
        RowBox[{"v1con", "=", 
         RowBox[{"Log", "[", 
          RowBox[{
           RowBox[{"(", 
            FractionBox[
             RowBox[{"(", 
              RowBox[{"v1uncon", "-", 
               RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Max", "[", "vbnds", "]"}], "-", 
               RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"(", 
              FractionBox[
               RowBox[{"(", 
                RowBox[{"v1uncon", "-", 
                 RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                 RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], 
            ")"}]}], "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "v2uncon"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.685278703672469*^9, 3.6852787385356073`*^9}, {
  3.685278973819104*^9, 3.685279060252244*^9}, {3.685279098570673*^9, 
  3.685279151737397*^9}, {3.685279395751669*^9, 3.685279573850235*^9}, {
  3.6852796066436367`*^9, 3.6852796250831757`*^9}, {3.685279740103479*^9, 
  3.6852797405415087`*^9}, {3.685285595343451*^9, 3.685285735439293*^9}, {
  3.687009661037538*^9, 3.6870096725564337`*^9}, {3.687625105615992*^9, 
  3.687625128374667*^9}}],

Cell[TextData[{
 "The value I would expect if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "0"], "=", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{
     RowBox[{"\[Sqrt]", "d"}], "=", 
     RowBox[{
      RowBox[{"\[Sqrt]", "0.1"}], "=", "0.316228"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.687020725681408*^9, 3.687020743837015*^9}, {
  3.687625144519178*^9, 3.687625156386015*^9}}],

Cell[BoxData[
 RowBox[{"Sqrt", "[", "0.1", "]"}]], "Input"],

Cell[TextData[{
 "This is exactly what I see for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "1"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which produces a stable equilibrium at the initial parameter values."
}], "Text",
 CellChangeTimes->{{3.685286006224634*^9, 3.685286010015791*^9}, {
  3.687020753545701*^9, 3.687020770814303*^9}, {3.687105822570047*^9, 
  3.6871058282285433`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secantMethod", "[", 
  RowBox[{"{", 
   RowBox[{"0.1", ",", "0.11", ",", "1", ",", "0", ",", "5", ",", 
    SuperscriptBox["10", 
     RowBox[{"-", "12"}]]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.685285769580785*^9, 3.6852857893026457`*^9}, {
   3.685285953226468*^9, 3.685285953349868*^9}, {3.687010154495269*^9, 
   3.6870101585449533`*^9}, 3.687020735390926*^9, {3.68702078138957*^9, 
   3.687020801842235*^9}, {3.687625161696316*^9, 3.6876251621011963`*^9}, {
   3.687625281498754*^9, 3.687625283365028*^9}}],

Cell[BoxData["0.316227766016838`"], "Output",
 CellChangeTimes->{3.685285798677781*^9, 3.685285962317274*^9, 
  3.687009646116558*^9, 3.6870096902183647`*^9, 3.687009862006941*^9, 
  3.687010167473956*^9, 3.687020804539489*^9, 3.687105801140519*^9, 
  3.687625178579574*^9, 3.687625286066943*^9}]
}, Open  ]],

Cell[TextData[{
 "The value I would expect if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[Beta]", "0"], "=", "0.1"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", "0.261134"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{
  3.687625317239921*^9, {3.687625442859816*^9, 3.687625461031288*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", "\[Beta]0"}], " ", "\[Beta]1"}], "+", 
    RowBox[{"d", " ", "\[Beta]0", " ", "\[Beta]1"}], "+", 
    RowBox[{"d", " ", 
     SuperscriptBox["\[Beta]1", "2"]}]}], ">", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.687625381241428*^9, 3.6876253965858383`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Beta]1", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", "d"}], ")"}], " ", "\[Beta]0"}], "+", 
     RowBox[{"d", " ", "\[Beta]1"}]}], ")"}]}], ">", "0"}]], "Output",
 CellChangeTimes->{{3.687625388740328*^9, 3.687625396903997*^9}, 
   3.687625454597084*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"v", "\[Rule]", 
   FractionBox[
    RowBox[{
     RowBox[{"-", "\[Beta]0"}], "+", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "\[Beta]0"}], " ", "\[Beta]1"}], "+", 
       RowBox[{"d", " ", "\[Beta]0", " ", "\[Beta]1"}], "+", 
       RowBox[{"d", " ", 
        SuperscriptBox["\[Beta]1", "2"]}]}]]}], 
    RowBox[{"\[Beta]0", "+", "\[Beta]1"}]]}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\[Beta]0", "\[Rule]", "0.1"}], ",", 
    RowBox[{"\[Beta]1", "\[Rule]", "5"}], ",", 
    RowBox[{"d", "\[Rule]", "0.1"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.687625337096257*^9, 3.687625373253125*^9}, {
  3.6876254313266153`*^9, 3.6876254319328413`*^9}}],

Cell[BoxData[
 RowBox[{"v", "\[Rule]", "0.261133746338752`"}]], "Output",
 CellChangeTimes->{{3.687625350317793*^9, 3.687625373604945*^9}, {
  3.687625432410317*^9, 3.687625456355776*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secantMethod", "[", 
  RowBox[{"{", 
   RowBox[{"0.1", ",", "0.11", ",", "1", ",", "0.1", ",", "5", ",", 
    SuperscriptBox["10", 
     RowBox[{"-", "12"}]]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.687625471770116*^9, 3.687625472770175*^9}}],

Cell[BoxData["0.26113374633875186`"], "Output",
 CellChangeTimes->{3.6876254756011143`*^9}]
}, Open  ]],

Cell[TextData[{
 "But it is also what I get when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "2"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which produces a stable limit cycle at the initial parameter values."
}], "Text",
 CellChangeTimes->{{3.6870208112805567`*^9, 3.687020830012126*^9}, {
  3.6871058163938503`*^9, 3.687105819948587*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secantMethod", "[", 
  RowBox[{"{", 
   RowBox[{"0.1", ",", "0.11", ",", "2", ",", "0.1", ",", "5", ",", 
    SuperscriptBox["10", 
     RowBox[{"-", "12"}]]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.687625482490405*^9, 3.687625483300467*^9}}],

Cell[BoxData["0.2611337463387519`"], "Output",
 CellChangeTimes->{3.685285798677781*^9, 3.685285962317274*^9, 
  3.687009646116558*^9, 3.6870096902183647`*^9, 3.687009862006941*^9, 
  3.687010167480445*^9, 3.687020815088222*^9, 3.687105812775097*^9, 
  3.687625488103737*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secantMethod", "[", 
  RowBox[{"{", 
   RowBox[{"0.1", ",", "0.11", ",", "3", ",", "0.1", ",", "5", ",", 
    SuperscriptBox["10", 
     RowBox[{"-", "12"}]]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.687625499152811*^9, 3.6876254992641277`*^9}}],

Cell[BoxData["0.2611337463387521`"], "Output",
 CellChangeTimes->{3.6876255082756*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.687626232850333*^9, 3.687626233833701*^9}}],

Cell["\<\
Thus, if no aspect of virulence, transmission, or host background mortality \
depends on resources, resources will have no effect on the evolution of \
virulence.

Below you can see that the reason the singular strategies are the same for \
the equilibrium and cycling cases is because the average S over the cycle is \
equal to the S value at the equilibrium.\
\>", "Text",
 CellChangeTimes->{{3.687020842195524*^9, 3.687020876024426*^9}, {
  3.687546166727583*^9, 3.687546172137744*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"dR", "=", 
     RowBox[{
      RowBox[{"\[Rho]", " ", "R", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox["R", "K"]}], ")"}]}], "-", 
      RowBox[{
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dS", "=", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
      RowBox[{"d", " ", "S"}], "-", 
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "v"}], 
         RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "v"}], 
         RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"params", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"K", "\[Rule]", "4"}], ",", 
       RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
       RowBox[{"fs", "\[Rule]", "1"}], ",", 
       RowBox[{"h", "\[Rule]", "1"}], ",", 
       RowBox[{"d", "\[Rule]", "0.01"}], ",", 
       RowBox[{"v", "\[Rule]", "0.1"}], ",", 
       RowBox[{"B0", "\[Rule]", "10"}], ",", 
       RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dt", "=", "0.001"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DOPRIamat", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", "/", "5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "/", "40"}], ",", 
         RowBox[{"9", "/", "40"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"44", "/", "45"}], ",", 
         RowBox[{
          RowBox[{"-", "56"}], "/", "15"}], ",", 
         RowBox[{"32", "/", "9"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"19372", "/", "6561"}], ",", 
         RowBox[{
          RowBox[{"-", "25360"}], "/", "2187"}], ",", 
         RowBox[{"64448", "/", "6561"}], ",", 
         RowBox[{
          RowBox[{"-", "212"}], "/", "729"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9017", "/", "3168"}], ",", 
         RowBox[{
          RowBox[{"-", "355"}], "/", "33"}], ",", 
         RowBox[{"46732", "/", "5247"}], ",", 
         RowBox[{"49", "/", "176"}], ",", 
         RowBox[{
          RowBox[{"-", "5103"}], "/", "18656"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"35", "/", "384"}], ",", "0", ",", 
         RowBox[{"500", "/", "1113"}], ",", 
         RowBox[{"125", "/", "192"}], ",", 
         RowBox[{
          RowBox[{"-", "2187"}], "/", "6784"}], ",", 
         RowBox[{"11", "/", "84"}]}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DOPRIbvec", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"35", "/", "384"}], ",", "0", ",", 
       RowBox[{"500", "/", "1113"}], ",", 
       RowBox[{"125", "/", "192"}], ",", 
       RowBox[{
        RowBox[{"-", "2187"}], "/", "6784"}], ",", 
       RowBox[{"11", "/", "84"}], ",", "0"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DOPRIcvec", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "/", "5"}], ",", 
       RowBox[{"3", "/", "10"}], ",", 
       RowBox[{"4", "/", "5"}], ",", 
       RowBox[{"8", "/", "9"}], ",", "1", ",", "1"}], "}"}]}], ";", 
    RowBox[{"DOPRIevec", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"71", "/", "57600"}], ",", "0", ",", 
       RowBox[{
        RowBox[{"-", "71"}], "/", "16695"}], ",", 
       RowBox[{"71", "/", "1920"}], ",", 
       RowBox[{
        RowBox[{"-", "17253"}], "/", "339200"}], ",", 
       RowBox[{"22", "/", "525"}], ",", 
       RowBox[{
        RowBox[{"-", "1"}], "/", "40"}]}], "}"}]}], ";", 
    RowBox[{
     RowBox[{"DOPRICoefficients", "[", 
      RowBox[{"5", ",", "p_"}], "]"}], ":=", 
     RowBox[{"N", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "DOPRIamat", ",", "DOPRIbvec", ",", "DOPRIcvec", ",", "DOPRIevec"}], 
        "}"}], ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"soln", "=", 
     RowBox[{"NDSolve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
           RowBox[{"(", 
            RowBox[{"dS", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", 
                RowBox[{"S", "[", "t", "]"}]}], ",", 
               RowBox[{"Q", "\[Rule]", 
                RowBox[{"Q", "[", "t", "]"}]}], ",", 
               RowBox[{"R", "\[Rule]", 
                RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
           RowBox[{"(", 
            RowBox[{"dQ", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", 
                RowBox[{"S", "[", "t", "]"}]}], ",", 
               RowBox[{"Q", "\[Rule]", 
                RowBox[{"Q", "[", "t", "]"}]}], ",", 
               RowBox[{"R", "\[Rule]", 
                RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
           RowBox[{"(", 
            RowBox[{"dR", "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"S", "\[Rule]", 
                RowBox[{"S", "[", "t", "]"}]}], ",", 
               RowBox[{"Q", "\[Rule]", 
                RowBox[{"Q", "[", "t", "]"}]}], ",", 
               RowBox[{"R", "\[Rule]", 
                RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
          RowBox[{
           RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
          RowBox[{
           RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
          RowBox[{
           RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
           RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
       RowBox[{"{", 
        RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
       RowBox[{"Method", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<ExplicitRungeKutta\>\"", ",", 
          RowBox[{"\"\<DifferenceOrder\>\"", "\[Rule]", "5"}], ",", 
          RowBox[{"\"\<Coefficients\>\"", "\[Rule]", "DOPRICoefficients"}], 
          ",", 
          RowBox[{"\"\<StiffnessTest\>\"", "\[Rule]", "False"}]}], "}"}]}], 
       ",", 
       RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
       RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "800", ",", "1000"}], "}"}]}], "]"}], "]"}], ";"}],
     "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Find", " ", "the", " ", "average", " ", "S", " ", "over", " ", "the", 
     " ", "cycle"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"St", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "800", ",", "900", ",", "dt"}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "find", " ", "the", " ", "first", " ", "peak", " ", "of", " ", "the", " ",
      "cycle"}], " ", "*)"}], "\t", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FirstPeak", "=", " ", 
     RowBox[{"800", "+", 
      RowBox[{
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"St", ",", 
          RowBox[{"Max", "[", "St", "]"}]}], "]"}], "\[LeftDoubleBracket]", 
        RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], " ", "dt"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Find", " ", "next", " ", "peak"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"St", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
        "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "FirstPeak", ",", "1000", ",", "dt"}], "}"}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Cycle", " ", "period"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"T", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           FractionBox[
            RowBox[{
             RowBox[{
             "St", "\[LeftDoubleBracket]", "t", "\[RightDoubleBracket]"}], 
             "-", 
             RowBox[{"St", "\[LeftDoubleBracket]", 
              RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}]}], 
            RowBox[{
             RowBox[{"St", "\[LeftDoubleBracket]", 
              RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}], "-", 
             RowBox[{"St", "\[LeftDoubleBracket]", 
              RowBox[{"t", "+", "2"}], "\[RightDoubleBracket]"}]}]], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "1", ",", 
             RowBox[{
              RowBox[{"Length", "[", "St", "]"}], "-", "2"}]}], "}"}]}], 
          "]"}], ",", 
         RowBox[{"_", "?", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"#", "<", "0"}], "&"}], ")"}]}]}], "]"}], 
       "\[LeftDoubleBracket]", 
       RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", "dt"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Next", " ", "peak"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SecondPeak", "=", 
     RowBox[{"FirstPeak", "+", "T"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Riemann", " ", "sum", " ", "to", " ", "find", " ", "the", " ", 
     "integral", " ", "of", " ", "S", 
     RowBox[{"(", "t", ")"}], " ", "over", " ", "the", " ", "cycle"}], " ", 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Ssum", "=", 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{"dt", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
         "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", 
         RowBox[{"FirstPeak", "+", 
          RowBox[{"dt", "/", "2"}]}], ",", 
         RowBox[{"SecondPeak", "+", 
          RowBox[{"dt", "/", "2"}]}], ",", "dt"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "print", " ", "the", " ", "average", " ", "S", " ", "over", " ", "the", 
     " ", "cycle"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"AvgS", "=", 
    RowBox[{"Ssum", "/", "T"}]}]}]}]], "Input",
 CellChangeTimes->{
  3.687020786917714*^9, {3.687545982577653*^9, 3.68754602030873*^9}, 
   3.687546063274652*^9, {3.687546104382592*^9, 3.687546110097784*^9}, {
   3.687546175604937*^9, 3.6875461806141787`*^9}}],

Cell[BoxData["0.1209976967879985`"], "Output",
 CellChangeTimes->{3.6875461127450857`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"At", " ", 
    RowBox[{"equilibrium", ":"}]}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"params", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"K", "\[Rule]", "2"}], ",", 
       RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
       RowBox[{"fs", "\[Rule]", "1"}], ",", 
       RowBox[{"h", "\[Rule]", "1"}], ",", 
       RowBox[{"d", "\[Rule]", "0.01"}], ",", 
       RowBox[{"v", "\[Rule]", "0.1"}], ",", 
       RowBox[{"B0", "\[Rule]", "10"}], ",", 
       RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Eq", "=", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"dR", "\[Equal]", "0"}], ",", 
          RowBox[{"dS", "\[Equal]", "0"}], ",", 
          RowBox[{"dQ", "\[Equal]", "0"}]}], "}"}], "/.", "params"}], ",", 
       RowBox[{"{", 
        RowBox[{"R", ",", "S", ",", "Q"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"EndEq", "=", 
    RowBox[{"Eq", "\[LeftDoubleBracket]", 
     RowBox[{
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"AllTrue", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"AllTrue", "[", 
                  RowBox[{
                   RowBox[{"Re", "[", 
                    RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"#", ">", "0"}], "&"}]}], "]"}], ",", 
                 RowBox[{"AllTrue", "[", 
                  RowBox[{
                   RowBox[{"Im", "[", 
                    RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"#", "<", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "9"}]]}], "&"}]}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "1", ",", 
                 RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "j", "]"}], "]"}], ",", 
            RowBox[{
             RowBox[{"#", "\[Equal]", "True"}], "&"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", 
            RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], ",", 
        "True"}], "]"}], "\[LeftDoubleBracket]", 
      RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
     "\[RightDoubleBracket]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6875460380509233`*^9, 3.6875460472971487`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"R", "\[Rule]", "0.24666093274009326`"}], ",", 
   RowBox[{"S", "\[Rule]", "0.121`"}], ",", 
   RowBox[{"Q", "\[Rule]", "0.9719096584999403`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.687546047880004*^9, 3.687546095583967*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "Subsection"],

Cell[TextData[{
 "If ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Beta]", "(", "v", ")"}], "=", 
    RowBox[{
     SubscriptBox["\[Beta]", "0"], "+", 
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "1"], "v"}], 
      RowBox[{"1", "+", "v"}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", then the singular strategy is given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", " ", "+", " ", "v"}], ")"}], " ", 
       SubscriptBox["\[Beta]", "1"]}], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "v"}], ")"}], "2"]], "-", 
     SubscriptBox["\[Beta]", "0"], "-", 
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "1"], "v"}], 
      RowBox[{"1", "+", "v"}]]}], "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       SubscriptBox["\[Beta]", "0"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "v"}], ")"}], "2"]], 
      RowBox[{"(", 
       RowBox[{"d", "-", 
        SuperscriptBox["v", "2"]}], ")"}]}], "=", "0"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.6876168866406393`*^9, 3.6876169331348886`*^9}, {
  3.6876179071408577`*^9, 3.6876179071411543`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", "\[Beta]1"}], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", "v"}], ")"}], "2"]], "-", "\[Beta]0", "-", 
     FractionBox[
      RowBox[{"\[Beta]1", " ", "v"}], 
      RowBox[{"(", 
       RowBox[{"1", "+", "v"}], ")"}]]}], "\[Equal]", "0"}], ",", "v"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.687617931030548*^9, 3.68761798262087*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "\[Beta]0"}], "-", 
       SqrtBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "\[Beta]0"}], " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", "\[Beta]0", " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", 
          SuperscriptBox["\[Beta]1", "2"]}]}]]}], 
      RowBox[{"\[Beta]0", "+", "\[Beta]1"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     FractionBox[
      RowBox[{
       RowBox[{"-", "\[Beta]0"}], "+", 
       SqrtBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "\[Beta]0"}], " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", "\[Beta]0", " ", "\[Beta]1"}], "+", 
         RowBox[{"d", " ", 
          SuperscriptBox["\[Beta]1", "2"]}]}]]}], 
      RowBox[{"\[Beta]0", "+", "\[Beta]1"}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.687617959220557*^9, 3.687617983219242*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Parasites increase host mortality rate in a resource-dependent way\
\>", "Subsection",
 CellChangeTimes->{{3.687009260219686*^9, 3.6870092666312723`*^9}, {
  3.687101582777829*^9, 3.687101591864902*^9}, {3.6871016259533*^9, 
  3.687101626334909*^9}}],

Cell[TextData[{
 "This model is identical to the one above, except in that mortality is \
resource-dependent. We include this resource-dependence according to the \
functional form specified in McCauley et al. 2008, which assumed that the \
mortality rate was equal to ",
 Cell[BoxData[
  FormBox[
   FractionBox["\[Mu]", 
    RowBox[{"\[Sigma]", " ", 
     RowBox[{"f", "(", "R", ")"}]}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", where \[Sigma] is the resource assimilation efficiency and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", "(", "R", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the functional response of the host. Thus, when resource ingestion is \
low, the mortality rate increases. For analytical simplicity, we will assume \
that \[Sigma]=1 (which is not the same as assuming that the efficiency of \
turning ingested resources into new hosts, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Epsilon]", "S"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", is also equal to one. Note that this greatly alters the interpretation of \
the parameter ",
 StyleBox["d",
  FontSlant->"Italic"],
 ". In the previous model, ",
 StyleBox["d",
  FontSlant->"Italic"],
 " was the mortality rate, and had units of 1/time. Now, ",
 StyleBox["d",
  FontSlant->"Italic"],
 " is a mortality scalar that has units of ",
 Cell[BoxData[
  FormBox[
   FractionBox["resource", 
    RowBox[{" ", 
     SuperscriptBox["time", "2"]}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ".\n\nTo determine whether the mutant can invade, we need to evaluate the \
stability of the mutant-free equilibrium, which can do by looking at the \
eigenvalues of the Jacobian matrix. Notice that the Jacobian is block upper \
triangular, so the eigenvalues are given by the eigenvalues of the \
block-diagonal matrix "
}], "Text",
 CellChangeTimes->{{3.687004053189085*^9, 3.68700420060925*^9}, {
  3.6870043215804996`*^9, 3.687004436656695*^9}, {3.687004568316966*^9, 
  3.687004593437023*^9}, {3.6870046290450573`*^9, 3.687004649012034*^9}, {
  3.687101643930251*^9, 3.687101859491105*^9}, {3.68710192277297*^9, 
  3.687102084738332*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "model"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dR", "=", 
     RowBox[{
      RowBox[{"\[Rho]", " ", "R", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox["R", "K"]}], ")"}]}], "-", 
      RowBox[{
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q", " ", "+", " ", "Qm"}], ")"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dS", "=", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q", " ", "+", " ", "Qm"}], ")"}]}], "-", 
      FractionBox[
       RowBox[{"d", " ", "S"}], 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]], "-", 
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "v"}], 
         RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], " ", "-", 
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "vm"}], 
         RowBox[{"1", "+", "vm"}]], ")"}], " ", "S", " ", "Qm"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "v"}], 
         RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
      RowBox[{
       FractionBox[
        RowBox[{"(", 
         RowBox[{"d", "+", "v"}], ")"}], 
        FractionBox[
         RowBox[{"fs", " ", "R"}], 
         RowBox[{"h", "+", "R"}]]], " ", "Q"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQm", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        FractionBox[
         RowBox[{"B0", " ", "vm"}], 
         RowBox[{"1", "+", "vm"}]], ")"}], " ", "S", " ", "Qm"}], "-", 
      RowBox[{
       FractionBox[
        RowBox[{"(", 
         RowBox[{"d", "+", "vm"}], ")"}], 
        FractionBox[
         RowBox[{"fs", " ", "R"}], 
         RowBox[{"h", "+", "R"}]]], " ", "Qm"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Stability", " ", "analysis"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Calculate", " ", "the", " ", "Jacobian"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"J", "=", 
    RowBox[{"Simplify", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Qm"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "Qm"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Qm"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "Qm"}], "]"}]}], "}"}]}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Evaluate", " ", "the", " ", "Jacobian", " ", "at", " ", "the", " ", 
     "equilibrium", " ", "of", " ", "interest", " ", 
     RowBox[{"(", 
      RowBox[{"Qm", "=", "0"}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"J", "/.", 
     RowBox[{"{", 
      RowBox[{"Qm", "\[Rule]", "0"}], "}"}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.683665236459867*^9, 3.683665359323009*^9}, {
   3.683665404813575*^9, 3.68366547699438*^9}, {3.683666132061904*^9, 
   3.6836661691249237`*^9}, {3.683666215246019*^9, 3.683666248315669*^9}, 
   3.6836664294444437`*^9, {3.6836665751017103`*^9, 3.683666620667544*^9}, {
   3.683667219677795*^9, 3.6836672485482407`*^9}, {3.683667323469551*^9, 
   3.683667386683793*^9}, {3.6836675406939783`*^9, 3.683667557779666*^9}, {
   3.683667680285685*^9, 3.683667740513286*^9}, {3.6836677819498453`*^9, 
   3.6836678072856207`*^9}, {3.6836687554044857`*^9, 3.683668812476284*^9}, {
   3.683668845622505*^9, 3.6836688897799597`*^9}, {3.683669595022902*^9, 
   3.683669607643983*^9}, {3.6836698919656057`*^9, 3.683670006005756*^9}, {
   3.683670041941581*^9, 3.68367004901373*^9}, {3.683673275631042*^9, 
   3.683673291212096*^9}, {3.683927147839081*^9, 3.683927214853394*^9}, {
   3.683971388120756*^9, 3.683971474524976*^9}, {3.684406082211471*^9, 
   3.6844061367620363`*^9}, 3.684445377524424*^9, 3.687004050639835*^9, {
   3.687004248107334*^9, 3.687004307597363*^9}, {3.687004439076009*^9, 
   3.6870045097482567`*^9}, {3.687004553669538*^9, 3.687004556335442*^9}, 
   3.687101874409479*^9, {3.687102090904904*^9, 3.68710210488861*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "fs"}], " ", "h", " ", "K", " ", 
        RowBox[{"(", 
         RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"K", "-", 
          RowBox[{"2", " ", "R"}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "\[Rho]"}]}], 
      RowBox[{"K", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], "2"]}]], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"h", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"d", " ", 
          SuperscriptBox[
           RowBox[{"(", 
            RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "S"}], "+", 
         RowBox[{"es", " ", 
          SuperscriptBox["fs", "2"], " ", 
          SuperscriptBox["R", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}]}], ")"}]}], 
      RowBox[{"fs", " ", 
       SuperscriptBox["R", "2"], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], "2"]}]], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      FractionBox[
       RowBox[{"d", " ", 
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}]}], 
       RowBox[{"fs", " ", "R"}]], "-", 
      FractionBox[
       RowBox[{"B0", " ", "Q", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], "-", 
      FractionBox[
       RowBox[{"B0", " ", "Qm", " ", "vm"}], 
       RowBox[{"1", "+", "vm"}]]}], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      FractionBox[
       RowBox[{"B0", " ", "S", " ", "v"}], 
       RowBox[{"1", "+", "v"}]]}], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      FractionBox[
       RowBox[{"B0", " ", "S", " ", "vm"}], 
       RowBox[{"1", "+", "vm"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"h", " ", "Q", " ", 
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}]}], 
      RowBox[{"fs", " ", 
       SuperscriptBox["R", "2"]}]], ",", 
     FractionBox[
      RowBox[{"B0", " ", "Q", " ", "v"}], 
      RowBox[{"1", "+", "v"}]], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"B0", " ", "S", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], "-", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"d", "+", "v"}], ")"}]}], 
       RowBox[{"fs", " ", "R"}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"h", " ", "Qm", " ", 
       RowBox[{"(", 
        RowBox[{"d", "+", "vm"}], ")"}]}], 
      RowBox[{"fs", " ", 
       SuperscriptBox["R", "2"]}]], ",", 
     FractionBox[
      RowBox[{"B0", " ", "Qm", " ", "vm"}], 
      RowBox[{"1", "+", "vm"}]], ",", "0", ",", 
     RowBox[{
      FractionBox[
       RowBox[{"B0", " ", "S", " ", "vm"}], 
       RowBox[{"1", "+", "vm"}]], "-", 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"d", "+", "vm"}], ")"}]}], 
       RowBox[{"fs", " ", "R"}]]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.684447303215189*^9, 3.6846698191224318`*^9, 
  3.684676985273048*^9, 3.684687531732296*^9, 3.684754634904945*^9, 
  3.6847549129270983`*^9, 3.6850901011536903`*^9, 3.685091425525071*^9, 
  3.6851934884916983`*^9, 3.685194720133748*^9, 3.687004473361158*^9, 
  3.687004510304344*^9, 3.6870045566726923`*^9, 3.6871021141911097`*^9, 
  3.6875437185707006`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{
        RowBox[{
         RowBox[{"-", "fs"}], " ", "h", " ", "K", " ", 
         RowBox[{"(", 
          RowBox[{"Q", "+", "S"}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"K", "-", 
           RowBox[{"2", " ", "R"}]}], ")"}], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "\[Rho]"}]}], 
       RowBox[{"K", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"]}]], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}]},
     {
      FractionBox[
       RowBox[{"h", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"d", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "S"}], "+", 
          RowBox[{"es", " ", 
           SuperscriptBox["fs", "2"], " ", 
           SuperscriptBox["R", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"Q", "+", "S"}], ")"}]}]}], ")"}]}], 
       RowBox[{"fs", " ", 
        SuperscriptBox["R", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"]}]], 
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       FractionBox[
        RowBox[{"d", " ", 
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}]}], 
        RowBox[{"fs", " ", "R"}]], "-", 
       FractionBox[
        RowBox[{"B0", " ", "Q", " ", "v"}], 
        RowBox[{"1", "+", "v"}]]}], 
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       FractionBox[
        RowBox[{"B0", " ", "S", " ", "v"}], 
        RowBox[{"1", "+", "v"}]]}], 
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       FractionBox[
        RowBox[{"B0", " ", "S", " ", "vm"}], 
        RowBox[{"1", "+", "vm"}]]}]},
     {
      FractionBox[
       RowBox[{"h", " ", "Q", " ", 
        RowBox[{"(", 
         RowBox[{"d", "+", "v"}], ")"}]}], 
       RowBox[{"fs", " ", 
        SuperscriptBox["R", "2"]}]], 
      FractionBox[
       RowBox[{"B0", " ", "Q", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], 
      RowBox[{
       FractionBox[
        RowBox[{"B0", " ", "S", " ", "v"}], 
        RowBox[{"1", "+", "v"}]], "-", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"d", "+", "v"}], ")"}]}], 
        RowBox[{"fs", " ", "R"}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}]},
     {"0", "0", "0", 
      RowBox[{
       FractionBox[
        RowBox[{"B0", " ", "S", " ", "vm"}], 
        RowBox[{"1", "+", "vm"}]], "-", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], " ", 
         RowBox[{"(", 
          RowBox[{"d", "+", "vm"}], ")"}]}], 
        RowBox[{"fs", " ", "R"}]]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.684447303215189*^9, 3.6846698191224318`*^9, 
  3.684676985273048*^9, 3.684687531732296*^9, 3.684754634904945*^9, 
  3.6847549129270983`*^9, 3.6850901011536903`*^9, 3.685091425525071*^9, 
  3.6851934884916983`*^9, 3.685194720133748*^9, 3.687004473361158*^9, 
  3.687004510304344*^9, 3.6870045566726923`*^9, 3.6871021141911097`*^9, 
  3.687543718641766*^9}]
}, {1, 2, 3}]],

Cell[TextData[{
 "If the system goes to a stable equilibrium, the invasion fitness of the \
mutant is given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox["\[Beta]", "0"], 
       SubscriptBox["v", "m"], 
       OverscriptBox["S", "^"]}], 
      RowBox[{"1", "+", 
       SubscriptBox["v", "m"]}]], "-", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["v", "m"], "+", "d"}], ")"}], 
       RowBox[{"(", 
        RowBox[{"h", "+", 
         OverscriptBox["R", "^"]}], ")"}]}], 
      RowBox[{
       SubscriptBox["f", "s"], 
       OverscriptBox["R", "^"]}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", where ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["S", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the equilibrium abundance of susceptibles and ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["R", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the equilibrium abundance of resources, as these are determined by the \
interaction among host, resources, and the resident strain."
}], "Text",
 CellChangeTimes->{{3.68700495951369*^9, 3.6870050296119127`*^9}, {
  3.687007624973708*^9, 3.687007630934164*^9}, {3.687102132103039*^9, 
  3.6871022010963373`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{
    FractionBox[
     RowBox[{"B0", " ", "S", " ", "vm"}], 
     RowBox[{"1", "+", "vm"}]], "-", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"h", "+", "R"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"d", "+", "vm"}], ")"}]}], 
     RowBox[{"fs", " ", "R"}]]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6870076323436337`*^9, 3.687007640058958*^9}, 
   3.6871022081185703`*^9}],

Cell[CellGroupData[{

Cell["\<\
Finding the singular strategy when the resident dynamics go to a stable \
equilibrium\
\>", "Subsubsection",
 CellChangeTimes->{{3.687005034044724*^9, 3.6870050485458612`*^9}}],

Cell["\<\
If the resident dynamics approach the stable equilibrium, we can calculate \
the singular strategy analytically. This will be a useful comparison point \
for situations where the dynamics are not stable.\
\>", "Text",
 CellChangeTimes->{{3.687006529062045*^9, 3.68700657177782*^9}, {
   3.68700684139579*^9, 3.6870068833472567`*^9}, {3.687007263676857*^9, 
   3.687007273790606*^9}, 3.687008035080208*^9, {3.687102216229439*^9, 
   3.687102217217678*^9}, {3.6871023902095747`*^9, 3.687102390366184*^9}}],

Cell[CellGroupData[{

Cell[BoxData["dS"], "Input",
 CellChangeTimes->{{3.687102232633943*^9, 3.6871022352512817`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"d", " ", 
     RowBox[{"(", 
      RowBox[{"h", "+", "R"}], ")"}], " ", "S"}], 
    RowBox[{"fs", " ", "R"}]]}], "+", 
  FractionBox[
   RowBox[{"es", " ", "fs", " ", "R", " ", 
    RowBox[{"(", 
     RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}], 
   RowBox[{"h", "+", "R"}]], "-", 
  FractionBox[
   RowBox[{"B0", " ", "Q", " ", "S", " ", "v"}], 
   RowBox[{"1", "+", "v"}]], "-", 
  FractionBox[
   RowBox[{"B0", " ", "Qm", " ", "S", " ", "vm"}], 
   RowBox[{"1", "+", "vm"}]]}]], "Output",
 CellChangeTimes->{3.687102235593114*^9}]
}, {1, 2}]],

Cell[CellGroupData[{

Cell[BoxData["dR"], "Input",
 CellChangeTimes->{{3.687102236632853*^9, 3.687102239235038*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"fs", " ", "R", " ", 
     RowBox[{"(", 
      RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}], 
    RowBox[{"h", "+", "R"}]]}], "+", 
  RowBox[{"R", " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     FractionBox["R", "K"]}], ")"}], " ", "\[Rho]"}]}]], "Output",
 CellChangeTimes->{3.687102239541918*^9}]
}, {1, 2}]],

Cell[CellGroupData[{

Cell[BoxData["dQ"], "Input",
 CellChangeTimes->{{3.687102242551713*^9, 3.687102249786437*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"B0", " ", "Q", " ", "S", " ", "v"}], 
   RowBox[{"1", "+", "v"}]], "-", 
  FractionBox[
   RowBox[{"Q", " ", 
    RowBox[{"(", 
     RowBox[{"h", "+", "R"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}]}], 
   RowBox[{"fs", " ", "R"}]]}]], "Output",
 CellChangeTimes->{{3.6871022452494297`*^9, 3.687102250225979*^9}}]
}, {1, 2}]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "S", " ", "equilibrium", " ", 
    RowBox[{"(", 
     RowBox[{"in", " ", "terms", " ", "of", " ", 
      OverscriptBox["R", "^"]}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Seq", "=", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{"dQ", "\[Equal]", "0"}], ",", "S"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"The", " ", "Q", " ", "equilibrium", " ", 
     RowBox[{"(", 
      RowBox[{"in", " ", "terms", " ", "of", " ", 
       OverscriptBox["R", "^"]}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Qeq", "=", 
    RowBox[{"Simplify", "[", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"dS", "/.", 
           RowBox[{"Qm", "\[Rule]", "0"}]}], "/.", 
          RowBox[{"Seq", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "\[Equal]", "0"}], ",", 
       "Q"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"The", " ", "R", " ", "equilibrium"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"dR", "/.", 
          RowBox[{"Qm", "\[Rule]", "0"}]}], "/.", 
         RowBox[{"Qeq", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
        RowBox[{"Seq", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "\[Equal]", "0"}], ",", 
     "R"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.687006576526287*^9, 3.687006696957065*^9}, {
  3.687006794822165*^9, 3.687006834735914*^9}, {3.687007735953511*^9, 
  3.68700774574067*^9}, {3.687102307860471*^9, 3.687102378070306*^9}, {
  3.68710274186125*^9, 3.687102821690981*^9}, {3.68710333942794*^9, 
  3.687103378149366*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"S", "\[Rule]", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"h", "+", "R"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "v"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}]}], 
     RowBox[{"B0", " ", "fs", " ", "R", " ", "v"}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.68710222111449*^9, {
   3.6871023300936117`*^9, 3.6871023787069483`*^9}, {3.6871027448983717`*^9, 
   3.687102800198887*^9}, {3.687103368325922*^9, 3.687103378537732*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"Q", "\[Rule]", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"h", "+", "R"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "es"}], " ", 
         SuperscriptBox["fs", "2"], " ", 
         SuperscriptBox["R", "2"]}], "+", 
        RowBox[{"d", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"h", "+", "R"}], ")"}], "2"]}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", "v"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}]}], 
     RowBox[{"B0", " ", "fs", " ", "R", " ", "v", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"es", " ", 
         SuperscriptBox["fs", "2"], " ", 
         SuperscriptBox["R", "2"]}], "-", 
        RowBox[{"d", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"h", "+", "R"}], ")"}], "2"]}], "-", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "v"}]}], ")"}]}]]}], 
   "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.68710222111449*^9, {
   3.6871023300936117`*^9, 3.6871023787069483`*^9}, {3.6871027448983717`*^9, 
   3.687102800198887*^9}, {3.687103368325922*^9, 3.687103378547305*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"R", "\[Rule]", 
             RowBox[{
              RowBox[{"-", 
               FractionBox[
                RowBox[{
                 RowBox[{"2", " ", "d", " ", "h"}], "-", 
                 RowBox[{"d", " ", "K"}], "+", 
                 RowBox[{"es", " ", 
                  SuperscriptBox["fs", "2"], " ", "K"}], "+", 
                 RowBox[{"2", " ", "h", " ", "v"}], "-", 
                 RowBox[{"K", " ", "v"}]}], 
                RowBox[{"4", " ", 
                 RowBox[{"(", 
                  RowBox[{"d", "-", 
                   RowBox[{"es", " ", 
                    SuperscriptBox["fs", "2"]}], "+", "v"}], ")"}]}]]}], "-", 
              RowBox[{
               FractionBox["1", "2"], " ", 
               SqrtBox[
                TemplateBox[{"1"},
                 "OutputSizeLimit`Skeleton",
                 DisplayFunction->(FrameBox[
                   
                   RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                   Background -> GrayLevel[0.75], 
                   BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 1, 
                   FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )]]}],
               "-", 
              RowBox[{
               FractionBox["1", "2"], " ", 
               RowBox[{"\[Sqrt]", 
                RowBox[{"(", 
                 RowBox[{
                  FractionBox[
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "d", " ", "h"}], "-", 
                    RowBox[{"d", " ", "K"}], "+", 
                    RowBox[{"es", " ", 
                    SuperscriptBox["fs", "2"], " ", "K"}], "+", 
                    RowBox[{"2", " ", "h", " ", "v"}], "-", 
                    RowBox[{"K", " ", "v"}]}], ")"}], "2"], 
                   RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"es", " ", 
                    SuperscriptBox["fs", "2"]}], "+", "v"}], ")"}], "2"]}]], 
                  "-", 
                  FractionBox[
                   RowBox[{
                    RowBox[{"d", " ", "K"}], "+", 
                    TemplateBox[{"9"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )]}], 
                   RowBox[{"B0", " ", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"es", " ", 
                    SuperscriptBox["fs", "2"]}], "+", "v"}], ")"}], " ", 
                    "\[Rho]"}]], "-", 
                  TemplateBox[{"1"},
                   "OutputSizeLimit`Skeleton",
                   DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                  "-", 
                  TemplateBox[{"1"},
                   "OutputSizeLimit`Skeleton",
                   DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                  "-", 
                  FractionBox[
                   SuperscriptBox[
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )]], 
                   TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )]], 
                  "-", 
                  FractionBox[
                   RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    ")"}], "3"], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"es", " ", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{"\" \[CenterEllipsis]\"", #, 
                    "\"\[CenterEllipsis] \""}], Background -> GrayLevel[0.75],
                     BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )]}],
                     "+", "v"}], ")"}], "3"]]}], "+", 
                    FractionBox[
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    RowBox[{"B0", " ", 
                    SuperscriptBox[
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    "2"], " ", "\[Rho]"}]], "-", 
                    FractionBox[
                    RowBox[{"8", " ", 
                    RowBox[{"(", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    ")"}]}], 
                    RowBox[{"B0", " ", 
                    RowBox[{"(", 
                    RowBox[{"d", "-", 
                    RowBox[{"es", " ", 
                    SuperscriptBox["fs", "2"]}], "+", "v"}], ")"}], " ", 
                    "\[Rho]"}]]}], 
                   RowBox[{"4", " ", 
                    SqrtBox[
                    RowBox[{
                    TemplateBox[{"5"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    "+", 
                    FractionBox[
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{
                    "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                    Background -> GrayLevel[0.75], 
                    BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    RowBox[{"3", " ", 
                    SuperscriptBox["2", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{"\" \[CenterEllipsis]\"", #, 
                    "\"\[CenterEllipsis] \""}], Background -> GrayLevel[0.75],
                     BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )]], 
                    " ", 
                    RowBox[{"(", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton",
                    DisplayFunction->(FrameBox[
                    
                    RowBox[{"\" \[CenterEllipsis]\"", #, 
                    "\"\[CenterEllipsis] \""}], Background -> GrayLevel[0.75],
                     BaseStyle -> {
                    "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                    ShowStringCharacters -> False}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 1, 
                    FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )], 
                    ")"}]}]]}]]}]]}], ")"}]}]}]}]}], "}"}], ",", 
           TemplateBox[{"2"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> 1, FrameStyle -> 
              GrayLevel[0.75], RoundingRadius -> 7]& )], ",", 
           RowBox[{"{", 
            RowBox[{"R", "\[Rule]", 
             TemplateBox[{"1"},
              "OutputSizeLimit`Skeleton",
              DisplayFunction->(FrameBox[
                
                RowBox[{
                 "\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}], 
                Background -> GrayLevel[0.75], 
                BaseStyle -> {
                 "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                  ShowStringCharacters -> False}, BaselinePosition -> 
                Baseline, ContentPadding -> False, FrameMargins -> 1, 
                FrameStyle -> GrayLevel[0.75], RoundingRadius -> 7]& )]}], 
            "}"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{85., {3., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{74., {1., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{74., {1., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 140, 23890109380085420572, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{83., {1., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{83., {1., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 140, 23890109380085420572, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{62., {1., 11.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            Identity, 140, 23890109380085420572, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{111., {1., 12.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{111., {1., 12.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[140]]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.68710222111449*^9, {
   3.6871023300936117`*^9, 3.6871023787069483`*^9}, {3.6871027448983717`*^9, 
   3.687102800198887*^9}, {3.687103368325922*^9, 3.6871033786731577`*^9}}]
}, {1, 2, 3, 4}]],

Cell[TextData[{
 "You can see that ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["R", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " has no simple analytical expression. However, we can write the invasion \
fitness, ",
 StyleBox["r",
  FontSlant->"Italic"],
 ", in terms of this equilibrium. Plugging in the expression for ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["S", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (which depends on ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["R", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "), ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"v", "-", 
         SubscriptBox["v", "m"]}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"v", " ", 
          SubscriptBox["v", "m"]}], "-", "d"}], ")"}]}], 
      RowBox[{"v", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SubscriptBox["v", "m"]}], ")"}]}]], 
     FractionBox["1", 
      RowBox[{"f", "(", 
       OverscriptBox["R", "^"], ")"}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.687102737001696*^9, 3.687102738475041*^9}, {
  3.687103383515271*^9, 3.687103413136458*^9}, {3.687103543659143*^9, 
  3.6871035682119217`*^9}, {3.687104067627881*^9, 3.687104140487425*^9}, {
  3.687104174201335*^9, 3.6871041958329887`*^9}, {3.687104301990046*^9, 
  3.687104308123296*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "/.", 
   RowBox[{"Seq", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.687102401825045*^9, 3.6871024174224997`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"h", "+", "R"}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"v", "-", "vm"}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "d"}], "+", 
     RowBox[{"v", " ", "vm"}]}], ")"}]}], 
  RowBox[{"fs", " ", "R", " ", "v", " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", "vm"}], ")"}]}]]], "Output",
 CellChangeTimes->{{3.687102402123076*^9, 3.687102417692616*^9}, 
   3.6871043205471163`*^9}]
}, {1, 2}]],

Cell[TextData[{
 "To find the singular strategy, we need to find the root of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "r"}], 
     RowBox[{"\[PartialD]", 
      SubscriptBox["v", "m"]}]], 
    SubscriptBox["|", 
     RowBox[{
      SubscriptBox["v", "m"], "=", "v"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 StyleBox[". ",
  FontSlant->"Italic"],
 "Note, however, that the value of ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["R", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " depends on ",
 StyleBox["v",
  FontSlant->"Italic"],
 ". We can simplify the expression to the following: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"\[PartialD]", "r"}], 
      RowBox[{"\[PartialD]", 
       SubscriptBox["v", "m"]}]], 
     SubscriptBox["|", 
      RowBox[{
       SubscriptBox["v", "m"], "=", "v"}]]}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"f", "(", 
       OverscriptBox["R", "^"], ")"}]], 
     FractionBox[
      RowBox[{"d", "-", 
       SuperscriptBox["v", "2"]}], 
      RowBox[{"v", "+", 
       SuperscriptBox["v", "2"]}]]}]}], TraditionalForm]]],
 ". From this, it is clear that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"\[PartialD]", "r"}], 
      RowBox[{"\[PartialD]", 
       SubscriptBox["v", "m"]}]], 
     SubscriptBox["|", 
      RowBox[{
       SubscriptBox["v", "m"], "=", "v"}]]}], "=", "0"}], TraditionalForm]]],
 " only when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    SqrtBox["d"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which, interestingly, is the same as the answer when mortality is \
independent of resources."
}], "Text",
 CellChangeTimes->{{3.687006893283319*^9, 3.6870070336700783`*^9}, {
  3.687007067668665*^9, 3.6870071681079473`*^9}, {3.687007653358109*^9, 
  3.687007727065876*^9}, {3.68710433440053*^9, 3.687104363063674*^9}, {
  3.687104513316571*^9, 3.6871045296871643`*^9}, {3.687104631679605*^9, 
  3.687104658299712*^9}, {3.687104701927361*^9, 3.687104777367104*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"r", "/.", 
        RowBox[{"Seq", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
       RowBox[{"R", "\[Rule]", 
        RowBox[{"R", "[", "v", "]"}]}]}], ",", "vm"}], "]"}], "/.", 
    RowBox[{"vm", "\[Rule]", "v"}]}], ")"}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.687009437981126*^9, 3.687009439601285*^9}, {
   3.687104373528327*^9, 3.687104507334025*^9}, {3.687104544357779*^9, 
   3.687104620058709*^9}, {3.687104681001733*^9, 3.687104694252643*^9}, 
   3.6871049670989027`*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"d", "-", 
     SuperscriptBox["v", "2"]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"h", "+", 
     RowBox[{"R", "[", "v", "]"}]}], ")"}]}], 
  RowBox[{"fs", " ", "v", " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", "v"}], ")"}], " ", 
   RowBox[{"R", "[", "v", "]"}]}]]], "Output",
 CellChangeTimes->{{3.68700943616891*^9, 3.6870094398826857`*^9}, {
   3.6871043786142406`*^9, 3.687104415653337*^9}, {3.687104493880618*^9, 
   3.6871045076564007`*^9}, {3.6871045566555862`*^9, 3.687104568288046*^9}, 
   3.6871046204769497`*^9, 3.6871046957861032`*^9, 3.687104967562724*^9}]
}, {1, 2}]],

Cell[TextData[{
 "To determine whether this is an ESS, we need to look at whether the \
derivative ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      SuperscriptBox["\[PartialD]", "2"], "r"}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox[
       SubscriptBox["v", "m"], "2"]}]], 
    SubscriptBox["|", 
     RowBox[{
      SubscriptBox["v", "m"], "=", "v"}]], 
    RowBox[{"\[LessEqual]", " ", "0.", " "}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "Since ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{
       SuperscriptBox["\[PartialD]", "2"], "r"}], 
      RowBox[{"\[PartialD]", 
       SuperscriptBox[
        SubscriptBox["v", "m"], "2"]}]], 
     SubscriptBox["|", 
      RowBox[{
       SubscriptBox["v", "m"], "=", "v"}]]}], "=", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"h", "+", 
         RowBox[{
          OverscriptBox["R", "^"], "(", "v", ")"}]}], ")"}]}], 
      RowBox[{"fs", " ", "v", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "v"}], ")"}], "2"], " ", 
       RowBox[{
        OverscriptBox["R", "^"], "(", "v", ")"}]}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", it is clear that this inequality is always satisfied and  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    SqrtBox["d"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " will be an evolutionarily stable strategy."
}], "Text",
 CellChangeTimes->{{3.687007156643914*^9, 3.68700718497147*^9}, {
  3.687007422302196*^9, 3.687007489363682*^9}, {3.687007763741115*^9, 
  3.68700778915688*^9}, {3.687007823785625*^9, 3.687007842625607*^9}, {
  3.6870079225235577`*^9, 3.6870079364957113`*^9}, {3.6871048249814053`*^9, 
  3.687104938241953*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"r", "/.", 
       RowBox[{"Seq", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
      RowBox[{"R", "\[Rule]", 
       RowBox[{"R", "[", "v", "]"}]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"vm", ",", "2"}], "}"}]}], "]"}], "/.", 
   RowBox[{"vm", "\[Rule]", "v"}]}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.687104804671014*^9, 3.687104806437112*^9}, {
  3.687104855566543*^9, 3.6871048621471*^9}}],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"h", "+", 
      RowBox[{"R", "[", "v", "]"}]}], ")"}]}], 
   RowBox[{"fs", " ", "v", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "v"}], ")"}], "2"], " ", 
    RowBox[{"R", "[", "v", "]"}]}]]}]], "Output",
 CellChangeTimes->{
  3.6871048067875557`*^9, {3.6871048572332487`*^9, 3.687104862415571*^9}}]
}, {1, 2}]],

Cell[TextData[{
 "To determine whether this is an CSS, we need to look at whether the \
derivative ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox["d", "dv"], 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"\[PartialD]", "r"}], 
        RowBox[{"\[PartialD]", 
         SubscriptBox["v", "m"]}]], 
       SubscriptBox["|", 
        RowBox[{
         SubscriptBox["v", "m"], "=", "v"}]]}], ")"}]}], "<", "0"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Since ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"\[PartialD]", "r"}], 
      RowBox[{"\[PartialD]", 
       SubscriptBox["v", "m"]}]], 
     SubscriptBox["|", 
      RowBox[{
       SubscriptBox["v", "m"], "=", "v"}]]}], "=", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"f", "(", 
       OverscriptBox["R", "^"], ")"}]], 
     FractionBox[
      RowBox[{"d", "-", 
       SuperscriptBox["v", "2"]}], 
      RowBox[{"v", "+", 
       SuperscriptBox["v", "2"]}]]}]}], TraditionalForm]]],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox["d", "dv"], 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"\[PartialD]", "r"}], 
        RowBox[{"\[PartialD]", 
         SubscriptBox["v", "m"]}]], 
       SubscriptBox["|", 
        RowBox[{
         SubscriptBox["v", "m"], "=", "v"}]]}], ")"}]}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{
          RowBox[{"f", "'"}], 
          RowBox[{"(", 
           OverscriptBox["R", "^"], ")"}], 
          RowBox[{"R", "'"}], 
          RowBox[{"(", "v", ")"}]}], 
         SuperscriptBox[
          RowBox[{"f", "(", 
           OverscriptBox["R", "^"], ")"}], "2"]]}], ")"}], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"d", "-", 
         SuperscriptBox["v", "2"]}], 
        RowBox[{"v", "+", 
         SuperscriptBox["v", "2"]}]], ")"}]}], "-", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"f", "(", 
        OverscriptBox["R", "^"], ")"}]], 
      RowBox[{"(", 
       FractionBox[
        RowBox[{"d", "+", 
         RowBox[{"2", "d", " ", "v"}], "+", 
         SuperscriptBox["v", "2"]}], 
        RowBox[{
         SuperscriptBox["v", "2"], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"1", "+", "v"}], ")"}], "2"]}]], ")"}]}]}]}], 
   TraditionalForm]]],
 ". Since we are interested in the value of this derivative when ",
 Cell[BoxData[
  FormBox["v", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is at the ESS, we can set ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    SqrtBox["d"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", which leads the vanishing of the first product, and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox["d", "dv"], 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"\[PartialD]", "r"}], 
        RowBox[{"\[PartialD]", 
         SubscriptBox["v", "m"]}]], 
       SubscriptBox["|", 
        RowBox[{
         SubscriptBox["v", "m"], "=", "v"}]]}], ")"}]}], "=", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", 
       RowBox[{"f", "(", 
        OverscriptBox["R", "^"], ")"}]]}], 
     RowBox[{"(", 
      FractionBox[
       RowBox[{"d", "+", 
        RowBox[{"2", "d", " ", "v"}], "+", 
        SuperscriptBox["v", "2"]}], 
       RowBox[{
        SuperscriptBox["v", "2"], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"1", "+", "v"}], ")"}], "2"]}]], ")"}]}]}], 
   TraditionalForm]]],
 ". Thus the singular strategy is also a CSS."
}], "Text",
 CellChangeTimes->{{3.687007156643914*^9, 3.68700718497147*^9}, {
   3.687007422302196*^9, 3.687007509886156*^9}, {3.687007616321352*^9, 
   3.6870076198979673`*^9}, 3.6870078143342323`*^9, {3.687007912972184*^9, 
   3.687007941052844*^9}, {3.687105004133684*^9, 3.687105027378057*^9}, {
   3.687105062993029*^9, 3.687105130698337*^9}, {3.6871051621642733`*^9, 
   3.6871052977917843`*^9}}],

Cell["\<\
Thus, if the dynamics go to an equilibrium, there is one singular strategy \
that is both evolutionarily and convergence stable. You can also see that \
there is no dependence of the singular strategy or the fitness gradient on \
host resources, indicating that changes in resources will have no effect when \
the system is stable. It seems plausible that resources will have no effect \
when the dynamics are unstable, though that remains to be seen. If that is \
the case, then you might expect the ESS to be fairly similar in both stable \
and unstable populations, so whether the parasite will stabilize the host \
dynamics or not depends on how close the resident-only system is to the \
stability boundary. If the system is just barely unstable in the absence of \
any parasitism, then the addition of parasites will tend to stabilize.\
\>", "Text",
 CellChangeTimes->{{3.687007984748268*^9, 3.687008041672399*^9}, {
  3.687009023744102*^9, 3.687009209672557*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Calculating the invasion exponent", "Subsubsection",
 CellChangeTimes->{{3.684460146428907*^9, 3.684460149889165*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"r", "=", 
   RowBox[{
    FractionBox[
     RowBox[{"B0", " ", "S", " ", "vm"}], 
     RowBox[{"1", "+", "vm"}]], "-", 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"h", "+", "R"}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"d", "+", "vm"}], ")"}]}], 
     RowBox[{"fs", " ", "R"}]]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6870076323436337`*^9, 3.687007640058958*^9}, 
   3.6871022081185703`*^9}],

Cell[TextData[{
 "In general, whether a mutant can invade or not depends on the traits \
(parameters) of the resident. This dependence is \[OpenCurlyDoubleQuote]felt\
\[CloseCurlyDoubleQuote] through the effect of the resident on the dynamics \
of the system. \n\nIf the host population cycles, ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"r", "=", 
    RowBox[{
     FractionBox[
      RowBox[{"B0", " ", "S", " ", "vm"}], 
      RowBox[{"1", "+", "vm"}]], "-", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"h", "+", "R"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"d", "+", "vm"}], ")"}]}], 
      RowBox[{"fs", " ", "R"}]]}]}], ";"}]], "Input",
  CellChangeTimes->{{3.6870076323436337`*^9, 3.687007640058958*^9}, 
    3.6871022081185703`*^9}],
 "then we need to calculate the invasion exponent over the cycle, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        SubscriptBox["\[Beta]", "0"], 
        SubscriptBox["v", "m"]}], 
       RowBox[{"1", "+", 
        SubscriptBox["v", "m"]}]], 
      RowBox[{"(", 
       RowBox[{
        FractionBox["1", "T"], 
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Integral]", "0"], "T"], 
         RowBox[{
          RowBox[{"S", "(", "t", ")"}], " ", "dt"}]}]}], ")"}]}], "-", 
     RowBox[{
      FractionBox[
       RowBox[{"d", "+", 
        SubscriptBox["v", "m"]}], 
       SubscriptBox["f", "S"]], 
      RowBox[{"(", 
       RowBox[{
        FractionBox["1", "T"], 
        RowBox[{
         SuperscriptBox[
          SubscriptBox["\[Integral]", "0"], "T"], 
         RowBox[{
          FractionBox[
           RowBox[{"h", "+", 
            RowBox[{"R", "(", "t", ")"}]}], 
           RowBox[{"R", "(", "t", ")"}]], " ", "dt"}]}]}], ")"}]}]}]}], 
   TraditionalForm]]],
 ". \n\nFirst, let\[CloseCurlyQuote]s confirm that we can get different \
dynamics by varying the resource carrying capacity.\n\nWith ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "2"}], TraditionalForm]]],
 ", the system approaches a stable equilibrium:"
}], "Text",
 CellChangeTimes->{{3.684241537392727*^9, 3.684241719847601*^9}, {
   3.6842557782466*^9, 3.6842557814043303`*^9}, {3.684405916496601*^9, 
   3.684405935764387*^9}, 3.684406998790498*^9, {3.684407802671483*^9, 
   3.684407802837376*^9}, {3.6844514172838783`*^9, 3.6844514535190907`*^9}, {
   3.6844515079951563`*^9, 3.684451597199505*^9}, {3.684460154250347*^9, 
   3.684460569868102*^9}, {3.6844606030742283`*^9, 3.684460610254986*^9}, {
   3.687107183123057*^9, 3.687107187152833*^9}, {3.687541512142313*^9, 
   3.687541513657979*^9}, {3.687541667709633*^9, 3.687541788303216*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"K", "\[Rule]", "2"}], ",", 
     RowBox[{"v", "\[Rule]", "1"}], ",", 
     RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
     RowBox[{"fs", "\[Rule]", "1"}], ",", 
     RowBox[{"h", "\[Rule]", "1"}], ",", 
     RowBox[{"d", "\[Rule]", "0.01"}], ",", 
     RowBox[{"v", "\[Rule]", "0.1"}], ",", 
     RowBox[{"B0", "\[Rule]", "10"}], ",", 
     RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dR", "=", 
   RowBox[{
    RowBox[{"\[Rho]", " ", "R", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox["R", "K"]}], ")"}]}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dS", "=", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"es", " ", "fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
    FractionBox[
     RowBox[{"d", " ", "S"}], 
     FractionBox[
      RowBox[{"fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]]], "-", 
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dQ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}], 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]], " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"soln", "=", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dS", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dQ", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dR", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
        RowBox[{
         RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
         RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
     RowBox[{"{", 
      RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
     RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Q", "[", "t", "]"}], "/.", "soln"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "1000"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.684451959038443*^9, 3.6844521172206917`*^9}, {
   3.6844521502833843`*^9, 3.6844521562963667`*^9}, {3.684452195839579*^9, 
   3.684452235748176*^9}, {3.684452360033771*^9, 3.684452446860776*^9}, {
   3.684456162452084*^9, 3.684456362131954*^9}, {3.6844605742291803`*^9, 
   3.6844605743581047`*^9}, {3.6844608882399607`*^9, 3.684460925797792*^9}, {
   3.68485798942669*^9, 3.684857992254428*^9}, {3.687105353930867*^9, 
   3.687105365282098*^9}, {3.68710714327706*^9, 3.687107175664426*^9}, 
   3.687111322296255*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
K2SJ/b19FOdn22vWcjc7V+DP39eyHs/XtX7XQVZPVzjksMkpAa+HkiP8tCXY
FaStu72Z8HlKHyLtSjrmCvZXAv3q8P61NNy/wJ/oCi+D5CtP4/hUSKil9Ge6
gkr8H6N8nM9lhiM8Jwtc4W2hevdXHE/9CZNamXJX6GV66pWLXdRqq/Xhlisc
VtDjT8KeK3EbymhyhdoPaTUd2BDjH3i4zRXWi3MMGOH+cu3C6L72uUKukvtT
Vg7ivo7JK3rjCgXjmxY24vkcYD8tbjjhCjrh8jm7cX5SfmQ0/5lzBU+SZZUG
nv+bvnzTqhVXuF6p980fr0/yZumE/QY3mKg5kZO4i4piUiujtrC4wf6RkwLx
OB593nXMd7ndgOtdpKoljpeA1t0yPxE3uMt4Um4BO1TwsSK3rBs0FMs72eP4
tq0+6epSdoN83acRp7A5371yjNJyg5HqdZkh2L5N77/vMXEDgYjHvwWx7+Z/
Snxt5wa1/bIbLuH+mMO/cSV7ukHdcFzoIh7f2Wz55oEQN/Aubf4ngV0js079
0zE3sOT3r9TH86Vj3jJwLtENhANUWDzxesynd/hpZ7kBeXv67QS83vKO3f8W
CtzAq13Ym4LjsXRFJKe83A18ZPOT/+F46cbvFbWscYO1Mx23iP/fXHQ+0ER/
1w1u+71WYMCePYSMqG1u8KK8cJ7Y/2rcuqPu/W5QsnW3Qjv2248lOSNv3KDx
69/caeyoikV15wk3kJSToVfC73MGGf58O+cGu41XWCqxqQpXLtutuEGot9fV
/Xg+pr9XzF/Tu8NGUDr+GnuuxZTeaps7dNb6nknE8z+TfI36gssdBjZlZSng
9Ykbr3qYCrvDpTb9E2+xO9it2Pv2usPH7VMrYTgeHm+r2gwOukOOhPSjRSI+
l9dHdGu4w4X5besccPxKfO1Ejxi5w9UnPZml2IdkawfabNxBb/XMzlbsoUWG
JA13d/gwyiPxEDuy2elASyDuX09IvBCb7VT9p8NH3aFdq0baFrtWj+n8vXjc
X5R51288nvF29yPK6e5wMWRvcwr2zOCdX4357tB6J/byJuyUYpZKxUvuEJQ6
lRWP5y/m6W1LqXKHO+Wn6n7j9T6WvL9JrtEd5Devn4vGdv3B1lTd4g4S7nMZ
m7BXb/v7ST1xB1Z142+VOF6Fsa3c1wfcIW2JRdcV+6A2V4/YiDuo/506tg97
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
1v/8f8Egx8M=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.684452067429336*^9, 3.684452129202464*^9}, 
   3.6844522459837723`*^9, 3.684452312484198*^9, {3.6844523830055656`*^9, 
   3.684452447261578*^9}, {3.684456179363039*^9, 3.684456363100637*^9}, 
   3.684460576536672*^9, {3.684460889014583*^9, 3.684460926229488*^9}, 
   3.684670263785358*^9, 3.6846774698296833`*^9, 3.684687989921795*^9, 
   3.6847548152953663`*^9, 3.684755356378681*^9, {3.684857968610207*^9, 
   3.68485799258364*^9}, 3.684858183049143*^9, 3.685090556945882*^9, 
   3.685091441771214*^9, 3.6851939440482407`*^9, 3.685194728523492*^9, 
   3.685203321656074*^9, 3.687004869217554*^9, 3.687105378991529*^9, {
   3.687107145374302*^9, 3.687107176285911*^9}, {3.687107214060463*^9, 
   3.687107236200626*^9}, 3.687111322662324*^9, 3.6871808023673267`*^9, 
   3.6875417995130796`*^9}]
}, Open  ]],

Cell[TextData[{
 "With ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", "=", "3"}], TraditionalForm]]],
 ", the system cycles:"
}], "Text",
 CellChangeTimes->{{3.6844605849478207`*^9, 3.684460593657486*^9}, {
  3.687107222679618*^9, 3.687107225267404*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"K", "\[Rule]", "3"}], ",", 
     RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
     RowBox[{"fs", "\[Rule]", "1"}], ",", 
     RowBox[{"h", "\[Rule]", "1"}], ",", 
     RowBox[{"d", "\[Rule]", "0.01"}], ",", 
     RowBox[{"v", "\[Rule]", "0.1"}], ",", 
     RowBox[{"B0", "\[Rule]", "10"}], ",", 
     RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dR", "=", 
   RowBox[{
    RowBox[{"\[Rho]", " ", "R", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox["R", "K"]}], ")"}]}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dS", "=", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"es", " ", "fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
    RowBox[{
     FractionBox["d", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]], " ", "S"}], "-", 
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dQ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}], 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]], " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"soln", "=", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dS", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dQ", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dR", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
        RowBox[{
         RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
         RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
     RowBox[{"{", 
      RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
     RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Q", "[", "t", "]"}], "/.", "soln"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"t", ",", " ", "0", ",", " ", "1000"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.684460596682674*^9, 3.684460596803994*^9}, {
   3.6844608294977407`*^9, 3.684460882009554*^9}, {3.6848580000435457`*^9, 
   3.684858002756715*^9}, {3.687107193552883*^9, 3.687107228651874*^9}, 
   3.6871113134986763`*^9, {3.68718082890548*^9, 3.687180838782826*^9}, {
   3.687541818209811*^9, 3.687541835161088*^9}, {3.6875422712090063`*^9, 
   3.687542355650861*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
Y7VceObnc9hxix+OhNuvSe3nwor7nrZPtvnhE4vCV2Z3ueBY4krq2emH7mnN
me1/Z6G02ylKXtEP820uZ1/Pn4Ftqy9luKj44a6e2dUSWtMQqGxT9FTdDz1c
GP2m5EloOX22cUDHD89lCzhTksZBy9d8RNHAD3dW+J0ryhuF+GQzAXcjP7zS
ueXqyt/DMPHZWOqliR+W5sfLB0YNwMmuQxqjJ/zQ6lqJPC2nF16sNDBTsfDD
3Jh7NqcPdMPqPbpO16398M9ALU+4die4nNKg5l70Qyp30jv4Tjt88VFNmHT0
w1mKWGa5ThvI3lN6uf+qH4ZaQ8TKPa1AL5L/6nPND4Nuip63t+EAu0OWk+9N
1Kd3Xd7xW2zQWSE1M0sm4t3layTylgVJihJC2jQ/5LubsTipQejniQ1y/sF+
aLgnRXzjKhaYewvjx1t+WLuwfMFzFwteJ622/Bflhw6epxRT4lggVMjvAXF+
qHOtSTz4BBvc2peEUu/6YfLCZsPkPRyo5P93//MDPzyqlPT6TxsH5BRm3y5J
J/I39ww5Ut4KwWYTPw889cOQ/a9yT7PaoOPGcDfzpR9mqf6Iy9nTAfqJfYtl
b/xwy3U9r7FPnZDysXMj/3s/TDxoWVIR2Q3zrZw9h4v8sFNQx+VIai9YLW8x
ulnmhwFC+2uq5vohb1eDTUWFHwZTeTOW3xmCa9d/RJr89kMReUenLrkxKMi+
fVn1jx/G24ZQuXfGYUmfOYiz/fA/1WGe0PkJMN4uvpG3ww/3KK6Ze3B2CmJs
WUPdPX7oVNcwY/FwGlruPiqvGvTDhomz0ltLZ2B7g2PKmzE/XGaroyWVNwtu
Iru9700T+XILJ5JdiP3r2PAxxrwfzl8blKX95sJiaM52F14y3nUpl9Ma4MLh
Up8Fs+VkrNVYv2ndEy5ELWr/Vl9FxnTjIy/bCH/cpMXzXFKIjCNCSfU1S2Zh
m3cpc9l6Mn4IjH0f+WoaXF6FWg+IkZH0QoCtLj0FOQMmar8kybhvw0VvZ+cJ
mN8pvLpAhozCaRHZVY/H4KD97/YHcmTsFPuSIdUzAhEpie9DFMloksc39e/2
ENQ3nY92UyEjP1O9nJvaD1vXb7tirk7Gy+f3ehSL9oKTWZeBjg4ZRd6dP7u0
vQte3soSl9En45oPmR7jKzthttxtbMUhMrbz3cw7zyT83RLVipGjZDzu3hXF
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
XaD3bJs4GReomj+f2z4KbqLThlkSZIw7tdCwX38ErswrK9eUJiNaZics3jkI
2XMY+xKWkDH0S7XLtvA++PVv/8/FcmTctWG13S65Hlj4V9UnWoGMr3YW7khf
1AWbZ3vGJpaRkb81dfSFcwccEeZEnlIm41uVX4wTw3ygz4SLc1aQMZJ0mGZP
8CFvyuqWozoZ4dX8ovtdXOBPyGhWa5LRd8peJHszF6TGfzw3XkXGS6LZ76+7
t8H20bRt2WvI+Pq/Lh0DIh97D5+uXKlNRrtX0r92GHAgftDIIVGXjNuf1Uau
Ifz4Xf/cVskNZDQ0ev4hksgTPb21J2M3ktFcp9/7Zyzhzz23JqY2k7H7lWLi
/ZVtgF2e0X5biXqkaBI9Ylzw79CW4BqRkf2f4rlLKVy4zZ9I2G9MxrQxiYuT
x3lQwS3WqjElY+OqOoma/XwY5lBfmCIZN1qv55Wcb4flrY7GOeYEfowBm5z/
OsDqp0r1aksyHiv6RtHY3wXnWroc7+4i49iPwv3ZSj1wvymbI21Dxp5DpSmX
lvdBk94AvN1D9Eey72snZQBkrqxJObqPqD8yWFbOYBhi9e8fe72fjMzDk9XV
zDEoJLdUHHElziuhJzeqMAETv+RWLzxI4CkwPj96dxL0NttTXrqT8Z5Tbo2h
5DR40xg9Bz3IWOCyXkHi0Awkt1Xtnn+UjDoGTtpKwQJo3jL36fPjZNwges96
ykYIS5imEq4+ZFw0OUXi1QrBhh8WIOJLxjknGpJHB4Rw2Si37ok/Gf/sJa+d
Jvj+jj28wekMsX/O3ci5nQKY6tCOnz1L4OWeGz2/eAY2GHuPPTpPxuSGkOQg
42k4GZ/itC+UjO/fW9alh0zCw+5fuTMXiP7UdgWYx43DT9NlCg/DyfhPi3uc
+WgU5G44hdpGkXHpuZqQm0+GYW8fu3kihoz1te+l4j0GgIwftt2/QsbMvoPp
lOheKLklencXhYwqa9YUKy/phpkBnB2hkVH6fhRbWaITNu4MP3yHSUbdsBXf
t/i0g2/im+KdcQR/Z5SX+ynwIXV4TG0wnuiXCuPtaike/LJcH3PrBhnDt5qp
2VtwQT7pFB8SyPhYs+iyj1cb2I2l7exNJGPiyxwL9TscoFhz064lkVFM62LY
8DoOlN5XFjNJJuO+fSqzNgRfBRMuPp0pZMxIW7o4xZgDm2yv/cdOI54/VLtC
opADfimf1hk9JuPN8F8Dssw2SJteyOA9IePtg0qr3hzgQuteiwH6M6Jfijqk
TmUeKKRF7TV4QdS/skm3UIYP+4QFWa0vybj4peGfYZN2oNpPSVNyyWi2/P//
EdsBZekbz+q/IaP8p4K1xXZdIJz1b2h5S0aKH333PpMe2OyUsfnyOzKeyDPt
CDrz/7/Ht9/QLSGj4+KRH3ZdA/Don+rUtzIyXl92zr3szjBwnA+6RlWQsTrJ
+/VHHAX7uV+UGmqI/stLv3fbNwE0N4lLl2rJWHNNPfNcwyS8z9r1a2U94U/P
t/k9gGn4Pf+yad0XMtpYfXFbTORNg0PF90Mbyehef5HleFsAAS8F/9SbyNiy
qa1c8ZgQ0hds8frQQsbA4gLvqiYhtB0OfB/0i4z/hUb/+tkjhGW5T7VWtJFR
Iaa9oJ0pBAfx7itVPOL7o3I8iTIB0D01u850kDFW+ctgAWMGyvMO71LqJvC/
9Xh+3//zrURixvteMtY92x+isWkSthxrXOQ/QMb5bLvEcOtxOP1W2k9+mIx6
3Tr4w3MUMqRta4tHyZgw7LiiVXsYeCfIeicnyLjufsqY13A/XN2VfrpjitCL
4Yxq1J5eMFtX9cJTQOAbMZ7TJ94Ng+JdI79+E/j0fJNbtroTkgZENx34S8Y1
a84tTbvZDjZ1q4K+iVAQbuqa1u7jg+CFZa7DPAq6LVoc/deGBxnxJyY/iVLw
v6KaiJeRXHAJIm21WUhB3eVTSKpuA1HnR6FV4hScYGsbKPVyIHdrZb65JAVf
jDwOyznAgaPLOgXF0hTcEPnAiraUA0uE842NZSlYHSH3dBvxufTnyvA3chSU
eL+UTHXlwOkii6LNihQ0WXy9TJ/HgRXJx/++UKJg14FS8fycNqiNvgK6KhS8
hc6SWie5cOloWnSGKgXNa6PCC9V4oG1RUbZSg4K/5zzPZs/jQ/OqjrkpWhT8
mhL2J0ixHSgL5lusWE3BkwZaigEeHbC1V4uUuJaCqosCfS3aOqHjw84qeR0K
2hbdmVpwpxuuPzu24JoeBWek7iV7xveCOfuytZQ+BV2i8ivqKvph5Ewqjb6J
gv46Kzbx9Icg2aH8g9gWCprei9y802cEZuXm7f23jYIHBk94T20dh6dTmuxL
JhR8ZH3aJjd9Ag42m9dPm1Gw+LFOZLDkFCwsOCpzfgcFh6Q6yv4emYY3d2Md
RnZS8KpP2TFn9gx4Rzy85m9FQZq5caoqWwByHu+/9lhTcLrB/d08ByGUI1/u
hC0FOVOROqYfhHBOc64Lby+Bn2zA8nNE3lWfr5lw2J6CP3LD4qWIvFvfuaO5
xZGCUweX6YsvF0JktZeSizMFJ0dV7RrUBKD7JOZggysFWxYq33v5eRp+0lPu
2h0k+PC7fy/PbAro/mW/PrhT0OevO/Vp7AQY2fFW7PKgoPorsfBPeWPQvWGO
R7kXBdPo6LRxYgRuLdF4AMcJ/Lefl5pKGgKLceQVelNwuIy2+VNaP4w3emoa
nSLOT1ZTlZDohYd50cdy/SioJyBzTjR2gcPtB2n6pyk4P3l5cPlMB4hcLO18
FkjBwZ07FlwJbIesQ9zV64IoOHryn9HPjXw4bCpy8lEwgY+9ypDNZh5IqKk/
0QijoNFj913+/lwoEMG+excJ/r9/Jkl91gan+B46yyOI92VYKGZ858Cyiij/
W1EUPHZwiiK/jwNVj5Kfy8ZS8FVt05SNDAeCKSVD7CsE/7+8vqCuyIGVp9o2
LKZQMPsW0z7+KAcabP4FUmgUzNrmPE4b50CMrlrOPCaBv43V/qLaNtCXgvEo
NgVXyD2WMrvABc7wEYPZqxRUC2H3mG/hAetLZHDYdQq+4Zf6dazgA1svx7Tn
JtF/WXX/ORvb4SqtU9TtNgUXDnvOiQrpgGudy+qq71DwRq9/TfdoJ9zYseeW
4T0KrvPedUY6nci/96KOPE6moHGermbYjV5IEOSsVnxInK+pjPPgXT/cdu4a
IqdRcGTLzs37lIfgzkulN1PpxPeC4MCZ/SOQJLk3yvsJBZ/KDf9Z/mIU7p2K
3vX9KVHvmWXjf+XG4X7lK2mrLAq+nHzKqY+YgAca3U2vsynoaha3AdqI+zhi
+YNVryj44VXfZr7eNKS27D158zVRr9iFHfGHZyBtS4y+aD4FVaIM+oq9BJAe
nztzvoCC/9bFzdbrCSFjsLu04x2h7+VS/+II/j7ZrUzbX0LBS/47GnoGhZD5
yM6hoozwh6L8pH+fhPBsTqySQQXBr8HfZ97ZCyHr8GteahUFxfl6o7QQAbx4
2/NkaQ0Fy24a0T9bzUC2vMq5yx8peFEt3C708xTknN23ffwToe/spXP+WzsJ
uZ9i5x77TEGlO8sV7p0ch9fr8j40NFCwplBZNS5jFPJIvdfMvxHPb7vo8UE4
DPk8lUM5TYR+T9Aya/oHoMDUXkvzBwWTtUILKgz6oDDxcn/8LwrmGZde9PzZ
De8m817NaaNgwo/cD6daO6HYoe/SWR4F/xx3/LnYoANKn6+w4LVTcPsNxTDP
73woW+Qg4dBF6A3SrXQLefD+xJXG0h4K5rqoPOW3cKGi7E2Sfj+hl92SY6t0
uFC1ov/4g0GiHzvkM3od2qD6gqqezAgFr9QorXK+x4H/vjlMRo1RsODQbPDX
jRz4sJFUNDxBvG9WeeivOAdqWfkkj2kKhr4qE2Gv5sCn3v699QIKao/Q1DSu
cKDOUk0BZilok7IoQnFVG3xOceRk/aXgzvnFPAMiDzf8IaWrzqFixSsVW/Nk
LjQeeHuaPY+K6uVlSSxPHnx/PbD1rygVD4dfMj2/lw9NS9T/BSyk4iJ5n+KM
U+3QHOBU3SpORbe2TOeh/A74UUOO2ytJRZMzxYNvzLrg16oC1yJpKl5brzWQ
/qcbODGDanqyVPwxahHUP9UL3Fb1niQ5Ksbevb716roB4G3bny2hSMUdrgdP
VcUPQcdoAQ4oU1FsQpKyZHQUuvYOLXRXpeL0hnySkds4dD/R+PJRnYqtmS9O
XiqdgB5R50RjLSq+1ProuE9tCvq8qF5PVxHrfROOq52ahoGiwnXKa6mYK0NP
zIyfgUGl4VG6NrEeWD0HmAIYCtYsEOpSUath0+87e4Qw8sU51ncDFVm+6ySO
VAnhH0moJr2JisXR6Z+shv7//5TJRa8MqDje+rjH8pkQVgztPORmSMWdt0yW
c34Tfv2wZ2Z2GxXfhRR9/8edAWMX1q0UEyrez4mTqiDOYyO+ycAKqBhFQi/Z
rEnwOXfpTJwFFR0j6l/UdoxCyGp1SYNdVKS+23QoQ5aY535UZDbvpmJ/+Z8C
u68DcJ19yjpiDxVFOWawqJfwZ3OpLo19VKxfGVrc4d8NL6dyLlc5UPHpiLHT
xMFOKM101fDbT8UF7XfyM560Q/2R2WJpVyomqgusDhH95cimuOceoOK+BGoS
dTsPBqsshW7uVHw+Wajy15sLsxf7Ev4coeKZdHHp5zfaYPGGuC0PvahIOjEw
f/U7Dixv3/zV6jgV5xkbPhEj8u66hObAfm8qnrM65rSdyMNGthFSV09RMTX+
jEYKkZet/mk8M/Cn4p+L8loVNzng/Kpqd8tpKjrc106+QejhuI9fd8RZKoqw
ZRsT9blwTlmGpHmeir1+863dO7kQU5+rWR1CxQyNM67jH3hw9fKBUr8LVPRL
53txO/mQbPj3sEw40Z8v5Zqj2zsgq//h79xIoj7N5ODyuk4oSt6VeCCGipYt
YkqKj7qh1ong+2UqTn0q+Npf0gs/F8Q3PiRTccOI6fow1QHoK9xybheNis5V
G8uXvxuChSujnl9lU9F+9bzHUxZjoNisZbslnoqc5d86f34ch9XM/3parlPx
6uZh2+32k2CAAeTIWwSfKQmTChVTsHNiyUqtREIP0V+1TZbNgGNGXln1XSo+
i3g9v8xEAJ7uhzz871PxcvJ9B4aGEM7IiPyRSaHi4yWi3PE8Ih9UpN15nUrF
Rq/9Y58IPrLCdhsdTKeiedPPf1LFQkjSHfr2N4OKB1SzE9XUhPCUey0o9SkV
fzoeNwmSE0DBDcMl1llUVJWS/ngpcxpqrH9lDWRTkZ8YcSFvehKaZ6P3xL+i
YkPl3CfjShPQnb2qb0seFZM2G3uYbhyDqeMfKD/yqfgxs/Lq6oMjIKp0ZlVU
IfH8CYutx5wGQe7T0nKtYipeOJqvNuDaB5ox+Z7/lVJxrOv+ouMfumHjlsN/
/cupqKdIo+hkdAL2zklaUkXFE5bBRxx72sHuXvq2vP+oeKWBHeUWReQHB9um
gx+pWKr8bdFdLx74i46c//eJ0M9Yyvr0K0T+fHtDNu0zFZ1ilG2ulrQBPWBb
tvVXKr5um43xa+ZAogZn7+A3Klq8bLAZ2c2BjG+x/fHNVPxg0LSALskBXXmJ
U4t+UlFqa0L6AhUOvNx/syu6lYqbX+e6qZzmwNYbqsdn2gh/5II2d34bFHx9
zDvDp+L3kH2b1NvbwGzpRo/uDiquP5XFvEvmQrljwa8j3VR8Gz146YwFD6yv
7Tz4vZfQ45zpibD1fKj9Utu0d4Dof7ilHNm6HeyXuDhXDlFx/oJrp6JvdcA3
+7YGk1FCb9mPkhapdMHBqyftc8epeGv56ueTxP3EqR/9pDNFxbgox9LUpl44
Kn3JNnWGisEX9l8HqQHotptfs/w3FT0ZW7TnhA/ByCeFikUiNHxZWPa8fHAU
zks+2BEzl4ZWlt6PnQ6Mg2DPupKZ+TQ06h2q/1M5AZHMHJPABTSc3n3HpX7t
FMytNS7oXkTDJVckYkuCp4G8uNLQQ4KG66qnfJc+mIHFtnavv0vRUFsz2u3t
HQFcpTdtsltCw0veTfsz3YQg98Ezu3IpDY9pry8PIvLA7UV9eqYKNGx/dadu
KcHfFbuDnuYuo+GhxSk7rXOE8JA6u1ZXmYZrXZVVrRWEsPo/UnrqChpmDJ9P
vKMigMwF0iuV1Wmo9GAyI6B+Gjbsup1yTZOG6rxX0Q9wCnLJGmriq2jY8GqZ
YJxC5OGqzKSYNTQck7irwi4Zg3eiBssF62hofnBE4ue/EdhhWZQQqEvDnYni
v3zyh6DqipV8z3oaCk6q219+3w82FfXXPDbSkGuswnHT7oW6eQdkmjYT5xWh
dI2NdoHTTj7LbisNe4LfxyXKdUJzrN/iKiMaFlce2vWX1g7u7yeopsY0VNY/
9SHemg/cOZFir02J9c4FZ/5Y8eAEEZt1kYYnRHV1hsO50Bd9dU6aOQ3pk2De
UdUGp0uVopQtaZha8lV1QR8Hxv49nL22i4bCCdEfiw5xIBR0L4rbEOvvlcii
HAdmI19Px+yh4UXR/iX2shyILjYLFtjR8LCeD0vgxIH5f6vHAh1oKOqb/7ij
hQM0U4fAHicavk3dNScsvQ2kIn4MerjQ0C67obP5CBeuvTvm1+RGw+esc6MR
sjxQmB3osTtE9Dt8mBM2yoO7xiHeVYdp6Fhk9Ij0jw/ql/61m3rSUIb0RCEO
OyCtgOr1+iiBl+3eHU75nbBWuKRN9wQNs5pFV3ad6obn2+66p/nQ8F2d83JZ
117YdGHlD2VfGmYbOjLvRfVDXv5z1+v+NDzNL71C5Q6C8czWb+JnaLjU6Uve
i20jUGpY6hh7loYx4yP/2m+NQk1ew96zIQRfN8UHSpwm5ju7Tw9WXKDhLsY8
o3ujkzDQWT1ec4mGfQ6ctf8dnobIiPdWIZE0/KqfORD4cAZk5IsSNWMIPO3e
bRdmCeDhszcDdZdpaDa0idp8TggGFjlwiUzDrRHT+d4cIVT9fHZtDY2Gc01s
0KpDCG5Bjzu/Mmi4/eZ7swuXhNAn/tAomk3wM0u1UvqhAMIfJjF042kYOuFR
/dpjhsgTCZzm60S9Cq+0OqqmIPlL/EbSLRo+tk/9dnZ8AvRPMa9sTKRhV4NF
62axcXgvQmlqvUvDETu7iSnVUdh/O0abfp+Gn8ykb7hnDUHXhvCIrSk0RH31
vrOR/RBWHfKZn0qsVzlxekVRD4h7nNWKSyfOKzxmdM+vC5Km/EKMn9BwUXFj
7cvYDljP9q7pfkrsL63YrTjNh9JVXio3smg4cU9F//47HjgWHTqDL2nYQl6i
P1jNhY79Lu8HXtFQLPZPiIc0F4IH7OUT82g4NT5acVWhDcSu2J60fEtDSuu9
NRw/DtxWtiocLaThb5dVXg0KHNB+hVL3i2m4/sQFrxaCr+9sjL1symjIENQ0
7j7CATv+ltypcqKeldIyykIOcC/oL0itomF/8rqh9N42OLdE5+C+GkJvGtWO
holcmP9k1fPfH2mYoAZVfQE8uIXqIhl1NNyiNHzbI5QPa5uXO+3/QsMQsmFh
eEE7FJyRTxdppOF/tXKuuiadYLtARvDsOw2PvKvY8UakG37dF99zoIWGkvY1
vj3ivXB6q2iy6C/ic9fU7L+D/SBS92/0JYfgW2dbVPzgIFw7IbQ4wiP05dot
NDs8Aiv/TCSId9BQ9/ORtVo/iPnkxnBfXhcN/+QFSE0eGwdr3T7TY72EH27e
3vdyaAJ+lHdclR6gYSSjM8zefwr8D7W1Fw4RehrzH3H9NA1/x1q2nhylIWxi
8M/N+b/fNtLkJmiYOZzePz0tAA3N+l+lUzSUalfeQX8ghJy3NRsCBDTUG+da
yw0IwcKhIlZploZr3meZH60Twvee4m+Vf2nITw7dEYpCOBn9du25OXS0nrwo
sNkpAKFi7iXV+XTsP/xyryR/Gpgvsuo+iNHRTMRM9/amKVDd9UQjdBEd6Ulh
ciJOE5DNST2vJUFHF6vF1LPHx8A85H51vRQd8y/5PlInjUCjZOLy8CV0HP60
T/JgwiB4P7oesFaO2O+d5bY6eh9Mm7BLGxXouOCTl0bsUDdQG6lLY5ToOPPU
3/BQaScs97/sradCxxeey4wPTbfDs3mRb1tU6Xgn4F/ZUwofzO6GSZA16IjS
9n5mJ3ig9ZzctWolHc86HrhUReXCwpIbpZWr6ThtemiEXt0GA58f3jmxjo7K
0RC5pI0DX/jZ50V16XjhgILpHjsO5E0U2z1aT0fBI+3qTCkO3BH7tNZyIx25
y6SRReSFqGU/53ZupuPbBsmh6RAOHNfu/XVlK3Eela57jmptYG0ynbdyGx13
aqQU3Jbggp6daHyFMR3nnvmzVfo1F2Q9l/odN6Pjf5K1Z54yeTB1VsNy/g46
elLDz+Yl8OHn5Q1qaTvpWBh0VPnnj3YovWkq2GlFR1ZD6pG3RL5Pe2z7td2a
jqansrVtlbuB9vbA88u2BL6X1q5QVCP4+tGHomVHxy3zBTwj735wbA32Kren
o2rJG7obwVeVOdfk57nQ0W/StOnbx1EQWfpg+KEbHZ0rv5ivsRuHzpVZNeaH
6Lhu1kRWqmECPmx9l8o/TMeNoTQ3d5spyLL+EBHrScfXyvY3rmRMw/WDza6a
x+hoWavprt46A2H+XRvfn6DjkP5D+YBmAbhHTiw+epKOl5Z63GymC2HH1bld
c/zoeObe08ZvncR9/1CmNCWAjuV1H+9uaxWCeK7qnR2BRH2m5pNmp4QwXKl7
nneOjgaRK6zm0QTQ2LTdLiaYjisTrIerLWbgba/1Wo0wOlKC8w+3ZE3B/d8u
c8su0rHlU5DzAv4ExEqe+OUZQUfGC/m7UX/GwEctKE8kmo773nkGWqqNwp6N
MVcfxNJx89lFXqXFQ6C/M84XSXR08jOR+e9OP8g737PgUugYNzfJXY/XA0Lv
p6rRdDqqvOnIuHG9C9rC3s6osYj+JoQ8iHjaARX06oaSODpuv5p900+1HTKS
vj3zuEbHvMx3u79wecDKaif/u0FHo4kQ24/dxLxTOuqZnEDHgLC0esE6Lrg0
/NsOd+iY/iSqKgnawLhDUr4tiY6flppUrqBwQH1KeTgymY5Tkc9P+mtyQHSh
do3qQzrqxKpG3pTgQJ+SUWpxGh05ySv7/HZyoE7HKuLIY6IfPF69eTUHXpnu
d/37hI6HzULu5Nxpg9v7jm68/4yO144UPt3oxYVwr8DFZi8Ivc1yOCc1eeAV
FNnZ+pKON0qclorI88GKxCyJyKXjmkJ2RZRpO2gn3Elc8YaOmV+ldt570AHS
TzKCit7SUeSallKeeRdMFOTtPfyOjgpBBaNKa3qgubZizZ9iOkbsrEheua8P
ijgNc+6V0XH24O1po7cD8HCE+9OkgvAfRx/ZUo9h8JP7ExdeQ/AhpCLrU+IY
VL0c3j38keBPnv9K3/kToL6PP+9oHR3VHGVUt/tNwsWBxqLGzwS//Ticv++n
oJFWHbrrKx1lFWZfJ/6bhvVrCjYWfCP2n1hX60PMR7SKZ/26zXTs84zjJU4I
oMMr+VHyDzquv/rfxvvXhWD2L95DtpWOK3rWkN////erkq4okdqIfp2W6TPg
CWFsW+jXaR7hB4P1OcFRQtjTdIrl20Hg8bBuUqlEAI/Pu+9q7aJjg84VYfCj
GZgru2+OfS+hV5cuzWiYBvcXOwrf99Ox4pRoyKaUSZDpW70hY4SOxt0mJzNU
x8CXotS7fJxY//mElLHvCFSulEhlTdKR1DSrL/t8ENTf/3UXmaFj9NzVHi4/
++Cix6hCkJCO4xXOf1k+PdA42/65c5bwI2FX3zqHLlh/5zvd7R8dj8f5h6pe
6wCqYY3FxzkMTMXjN19rtEN7Y+Ff0/kMPOL4T402xQOzc1n52WIMFARtWv56
AQ9uS6ec01rEwF6FvXLBe7kw9uy67q3FDGS+WSBTGdsGe2zIXQulGJj9/kb3
zDsOpHeHPbgkw8Ax2YThdeYcmEPyOzgky0DKG4+CU8Q85q55RM5LnoFmynW5
v5UJ/y2xr/uqyEDJyJ8zagEckDm8k2q1nIEHeaHHu+a0ga9wi/lbFQZGuZX/
FGttg4qEtbM6agzcdOJN/+EYLqhtUc67r8HAgDfeMzYmPLjYIBm4ZCUDBwRQ
kqzJh8YzItpXVjOwYvxl9RKjdlgvOd4+tZaBKj1+C4KjCTwyO++d0mHgzkrJ
wsP/OoG/q9n1lx4Dy/VGilPedINp54cl+/QJPFy/bn2b2Qu3Y4s+lm1i4Piu
Mr2Fzf0wppZNMtjCwH9jrISVJkOwp+ghPDYk8NFZN1f55AikH7wpUNrOQM/b
44f+qxiFQzcvBvwzY6CP1XmV9QkTkLcpYM25HQx8N2ep1R4BwYfPHryOncT+
W3JmqLumwTfA8a6rFQMbFXItSMEzUCFu6fzBmoGfZTR8Y0IEoJphKG1qy0D9
wFDNfFMhXLDUrnmxl4G/j7Ta/SgWQiNf5bKmPQO3SWx0/ErMY+ujpU1vOjLw
SleD5EyFEKgr5k4vcGZg4um+2w9MhMAvmMi+6MpAFym5mjEXAZi4dfsOHmCg
ZliInpPKDCRMtqz0dGeg0laV3OKkKRi7VstpOMLAuz9LQs4Q+WaPfsltSy8G
3vJfc+uD9jikf3rpmH+MgV9O3V7l70vcP35pEjreDJz9zZ/ZfXkYTnouTGo4
ycB86u+MVzAA9c7+Ohf9iH58j5yZ8e6FrbafCzROE/vjgheGf7rgPhrY1AQy
cE1vzlLRPx0gtvV2S2AQA4/qqDQucm+H0zqzJ5eFMJAr8LhySIoP39U9Z0rC
GNgXe34OaSEPTBUqKD6XGNiRnzrCQi6kLV6rKB3JQEW36DnF7m0gMYeZnhdN
4GGrnXEngQPnp4a3HLnMwGOqemMzaznwq9+pUpTMwCkxiYoTizlgwXuz/zmV
gXu9Y6oOm3Dg6Xfljv0MBgZSsq7MIfQgWxsVNMsi9FDyOfo7sw0ulrXPTbvK
QJmU15uqD3CBn7frmu11Birvc0s/rswDm2dPNcZvMvDF4zkxXtJ8yEmRfnnn
NgPDlAez/La3g1JCEJrfZWDmbb7N0ZQOiGY21ffeY2DshuyhGusu6Ikx9oh/
wMD7YjYyEgY9YB+aPGSUykDp5Hbzy8f7IN9/XiT3EQOjLczDvJsHQP2ojyQ1
g4Efrw6qFdKGgeL6MWnDUwYae1ywLts6Ci7m1wsjsxn4VDntUYf5BBQbTtus
fsXAGel7tgGVk7Ba79CPT68ZmGQT7pm1aRrYmiWngvMZaLBo8vPMxRmYVNQS
qBQyUM3TaFqaTeQDSQq1ooiBXtd02K8OCaFibr+ifykDF10vt/RsFILujN3j
peUMfHV/9wdmnxBuDOZsLaxkYEnj2rhbN4Qwy1eoOvofA9c13UvZXS+AY80X
ncU/MrAr4G/lmQcz8OETp+PlJwYuC6lZv3vZNGwqNz9/4DMDP334a/rMfhLu
5KfPm/OVgTHLB6UtTo3D3Czx6xnfCP38tD/IixkF39TTmvbNDEy44nBxse8w
fLnd8HL6BwNv0x+FO68bACP21h3JrQw8/6BVstqpFx5cvvPZisvAEc8RndWD
XbDwwl+PIT4DpchnmhqHOyDw9NHhm50MTF6iNN/boR2aj1VFmvYw8BnFhjcg
ygc4oC3V2cdAXmNR5OwcHqTbse8xBwn9MMqDnxhzQcpiTNdghIH+U5k7vzm3
Qcg2l3c/xxgofqVx1PI6BzjrC2wvTxJ8cLq6SHQNB6xWqv7UniHweX7TIo/g
53OlWN8GIQMjH/my+sw4ICfdJbjwh4E6YxofG0s5ED7fhqYhwkS+asyOxTfa
oEPwfFnNXCbeCpvc+/gIF/YML8kIFGWivoj82CMNHuR2BBsuW8jEeTh+e6Ui
H5R/tFSViDNR1uXy8sad7RBbb+riI8lE9sb6NdefdUBfRUqnlAwTXbT36fKc
u6Dasm8/TZaJM+9ZblvVeyCtalPFPHli/YEPrR2r+yB216XNkYpMDN3vEZpz
cgA8/it/OKPExCCZxARr3hCY7JaQDVJhYnJnPdWmYgSWf9gfM6jKxPRi2+jt
68ag8WOnB1+LibmBXsd/zJ+EnD3r691XM7HkuQ/X1XsK4j6FmDWtZeLBFZsj
I15Mg79dyXMHHSbafzUes/06Azb1C1bU6jHxQG1pTHiFANbY2zOt9Jn4fU9F
UG+wEOZ/uf27dBMTdS89/LjmJ+GXDjxf4y1MDFwV+TuiVwglDet+vDZkoviO
hMNOiUJIcjq3W387Ex+GJh/+/+8TX2wsyM80YeKCbU2fX7TMgKvzvLWrgIlz
Y2KXnr04DQbfbROSdzDx3u8bWyZaJ0HW9YbYcgsmpl57hYYrJmC46VfwDSsm
9hdn5ec4jkGt26pOqd1M7N5Iv7vx1ghktgTsp9kyUWLtt7WXxweBcjCvfJ4d
8T7pRxHiS/rh+M+/myLtmahnlNlKYfeAufuuhzOOTDS5O7xtyq8L1FrjlgQ5
M9EpXdbFKbUDZg83Rw+6MjG+a33zU512+MFRH/E5yER/Ue10/M2DNx6nPPju
TNzQ5Jb+lfDXG9yXde4eTKQ6Hj/huIcLZ72Epk1eTDTk6BEbtxHzvvlzh+ME
fmG7nwjecED3GEOl1puJedL1aT4EPxd1fGVYnWLinTWuu0KIfNt1XOV3qR8T
eVlNe33VOFDRedzX+DQTY1tzqu4S81iK9/OW14FMJMdPfrNa2gaR3ZPW+kFM
PC3Sk+k10waHTprlZwYz8Xnam53bb3LBqJe8ZlUYE1+d14jPdeWBgm/9reSL
TKyso3dp7eLDeJ+i2PIIJt7e8WPylE87fPbzDL4RxUSd8gyV8HcdkDWQ0SEV
y0TzFyahwt1dwAgYdaJdYWIB76ZdqmwPnBzaVj6PQvCpy68wTbEPLM/Eboqk
MdHUJVa92XUANEc+pMwwmHi/BOb+qxuC1tFD0YNXCb6pmBxWVxuDgnNpwz7X
mViXEhu2kjUOt8cHjvBvMrEj0di/RjgBwee31LnfZuLo0XsaVe5T4DgZYdp0
h4kKhwyzK9OnQT+k6pnDPSbeVe1RrP04A5LTUiq1yUT9a345XC8WQF+oK8Pq
IROPKM3Mjp0Vwn8zycLSNALfxYsVw1qE8OhCzynjx0z89Wxtjhvhv7FC/ZbX
T5j4kV55qy1JCJ6XLljrPyM+5ypcNh0SgOls2ZvMLKIfiW7RXvwZOD29ImvZ
S0Lvyk+eZzOn4f7YhTTyKyaq+7m1yv+ehLrBb3cmXjNxMRQVDllMwN+ejfFH
85lYfSY1cPvlMVjfwaJ8LmCiqGvU49raETjS1hthVsTEYM83jyu8h4D9w/L8
sxIm7jxu+yPvSj8Uf0vxXf6e8JPkNgf1vz0w9PmPJ7WCeH/BmM3exi5QrT3g
OlXFxOHCPSTfuZ1gV/167/EaJobHNx70i26HqPdLLBo+MrEr6qDtOks+ZBcF
bMc6Aq+4HLHCXTzg5tfoZ31m4rk9D0PWR3NBJnfVGpWvTGx8n3ort74N8EXM
Cvo3gr9uItg+xoHAzNalM01MdC5wXT/sxYEHj7aJe/8g+v/t5VFbRQ58fnBT
pPEXE1mh0UvvS3NAJGl0akcbwT+93SqM3RzQT9g7+ILHxHVly/pIlRzwvPak
fUUHoYdlDjqZpDa4yhL9wehi4rErgv8+WnGhjOr1WdDDxL8dy7avGiXy+eWi
Kp9+op8bWp0mKnigGaVU9G2QibOTf2sKK/ngeDH41c4RJjKK+6wNpwm/Dv7y
5OUYE+U6w5QlDndCTqDeA7VJJnH/PWo4JOwCvh/tFmuaidnyT5YbfukBWZ9O
5m8BExUthQmTvD4wP7rj8qlZJp5Ymqseoz0I5w7fu9D0l4k+3O+cZ4+G4aGb
4IzlHBa6Rmb9OrRqFObue+muIcbCW9/PW+0bGodNNpJOcQtZuM6go23GcRKO
Wp7a/Uechaa1WaeSnkzBNawEP0kWrrls3B/QNQ3lxhpbW6RZuL8npHH5nxmY
2Bqhu0uWhdJK2rKqPAGs3NSi+VqOhbarudJaZCHs19uipKXIQqPT8el3uEK4
sjZeOl6Jha3bcl8+7hJCrtag6D9lFi7ZvHhpaLwQOlR3z/qrsrD9RNWXAY4A
5JY/GvuhzsJQks58G+J+sJCf02utxcJi+oSjLuHX52UOt+WtYuGFc0FnNnVN
Enny7beVa1n4+Yaqbuf6CWgUk6+9ps1Ckb2i4WYBYyA69+x7ET0Wdt77fYn7
ZgS2/qnNP72BhUyL5nehOATeM2tf/NrIwsWdL1tLjvbDrfErj2wMWNhy6PKS
Mm4PVA1x7+ZvZSGjeoHAu7ALpnpNrq3exsJ9147XPRrsgNWdt6k3jFmYeVBi
jduZdnDhTkTONWPhRZkIoZMhH8g/7YMDkajnyqUP+cS8lPf9mR/HnIV7L2+N
SA3lQteXhUf3WLJwodXHC9Pv20Dh03G3gl0s7KDtslncx4Fd/5XarbUh9rMK
8c1w58AVZfbyj3tYeOxplnGALAfenz7UFbCPhTW/lOpyFTjwr2xtjowjC2GB
W6veSQ6YyE9FvNrPQpeFMkv/LCDy8Mny3S6uLPwq9frcZUEbvCm8Ki84QPAl
OKh0aQoXJqSO8O66s9A/mvmUdp4Hm47qPDfzYOEf1z29fpf4EPh6JoznRbyv
ReB7pqAdni+ssrhynIW6lQ13bbZ2Qt+h6zJrfAg81qSkK493wdoXnr9qTrFQ
iuW89u54D3jPXZ/h78/C3fM9NTWN+iHV+XeQ9BkWDopFs+4WDYLq7M3FzudZ
GC3pomOYOwru+441TYewcNGt9cdKDMch8aF+6p0LLLQxuGF7q2gCvk/+OW0a
TuDTpn7ngtEUyO3+uJ0bycJV2gtIbxOnwTHpttjlGBZuWjK1rPzLDMQNn2hY
dYWFz8/FjyZ/FkCt+eb7/5FZ+GD/Ko8rBH/Fb4n4+tEIPbQIe9M6hGDd+2mL
FJOFCZnnlt/kCIFkcnfOSzYLk1nOvY7+Qngfd/KTUzxxntqoq3VMAYi0b0mc
us5Cn471ySbWM2C2dd6JxFssNFF5kb7o5RRcon3WN0lkoff163qO/AmY2uD3
X8x9FupkR20IUx4Fg8tGN1amsLCx9ZlQKncIzn4X9axOZeHv6btGS9n9kLXu
q45vOgvjiawb87UHBsIfTEs8YWHueTXGZ1IXaH8OKH/xlIXL9uqGWt/vAB8t
4zjHLIJ/d15bbZNth7SQhYcms1kYbie+cvgbD/g131bffsVCc9X5hQEcLqiv
SB3bnkfoNaRmobUmFw4HBha35hP97HMYa9rcBnfKTenRhUT9VUW1llEcaFZY
7KJVzMLytJJOniqHuN+bNapKWXh1Tn50oyQHnIoeDZ4sZ2FZXXjtUhsOXJUJ
eru4ivCTgMHTKxo5UHcMSVn/sZCU//BFQRYxD76RdHD4yMJ3ax0+Hj/Dhd3i
P1UmPrFQZYfYUNQWHpAPZ/Tc+kzwz8Px3Uc9PlRkB+du+0qc73EJ9BDz6Nz5
O6N/fWPhmRd1T29XdwC4yuyJamahh/PN3YbnuiA8s1VR8yeBR4ez5ZRHDxT8
yWyvaGWhhhPdYSS+D2bsw174cFk4pTBrpiI2CFvSLC+Jt7Mw0ZKsbJM3DNk2
XFn7HhZu3Xv1b2ztGAzde84Z62PhtcPz6qYcJ0Bn9GLmzUFCn6Vv9lo1TMJJ
C+sQI2Ly/VTzulrRZBrSE+TNf46x8EXD3KxFMTNwIKR60H6ShX9jPjbNRAtA
wvlCYtU0oYcjVWvmWhH5drOOpYmQhUn+21Vyy4VwTrZ15OUsC4f4r/L6hoSw
apSdtOYfC0cF2YzFJUJorkfre3PYKBIjlp21QQjMrLFx2flsbHXzvX/OXADA
SkumirGx0FF6yymRGRjzc7H9u5CNdPOgCZeLU5Bus3A6aDEbC8KflmtXT8CB
dQUPeyXZ6GZmqvVOZBwkFvrbeciwcdFao6uFMAolXSuEjbJs5OWdUAvQH4Zz
lfWPbOTZaHlcyzJ4wwCsSotxKFVk4/PVZx3i6b3QHLv5z5blbBwMv2SlYtkN
DK/OjKcqbByhtY5tO9QJZpiwX0ONjY4qCXdkKtthVHW3SIIGG9npulHbL/Ah
7Y/wqcRKNj51jD978DQPXH89c41dzcay5EuDs3e5IF54ZN7MWjau8TC3/TPZ
BsWJMi8CdNj4+ObmbKfFbXA27P3Bdj02NkAc88AZDqx0PS92QJ+NJoYtK/4p
E3zesjqnbhOB38c9XgyCvwy55sMWW9i46vMZj6PmHDAbpy0qMGRjrp514NcC
Dox+MX69YTsbK/N1K4bC2iAte9DzkQkb2xnbXTcgF1zjkiWUgY02KmKqav3E
+U475F/dQXz/MbnnbCkPivbMOy5mwcaVirvKa8oJf9V5LR1uxUaXfcOFooJ2
0BL3KRy1ZuN/mkn9g8c64XvPMh8fWzbO7x/aV7KgG2jVH2Rb97JxzqtXMje7
esAkPbzY0Z6Nutx7uq9F+mHkynrf/xzZeMSu/fJnp0FIPcaVN3Nmo6v2NguH
H8PgYn6t7JUrG1Pemev4W46CuIZFwLqDbDyTXxkh9mwMiv5NLkt2Z2MEXOw9
sWwCAjmPK+Q8CH7YXC5ziZ4EraIDgXQvNv4VN5v0ap6C73cXq4gcZyOrPnBq
o9wM0C4WVQd7s7HUv+jsyGoBmBw4E9R/ko3JuzjWD+YJYdhQQ83Lj41mMWPd
zHtCeKjw9cP3AIIvbi2aUz1CcJ68ErInkI0fyk6nqP8SwsLGrZrvzxH1bDh7
oSVQCIU5PZ8Mg9m45O6uQqt0AZyOv3PheSgbQ+5bF16NnQGNwD2rtC6yse2l
rl/m0mlotPv7+XY4G9+lXjaJPD0JFL3scKkoNs7tu/llx7Nx2C5xdO2VGDZ6
vt3XzOwahcG+pY2Cy0Q9jg4qEZtH4EFNZdQZMhvlH+Y/crYaBKeMUJ1OKhs5
s3uf9Ef0gRhlXdNBBhutjTVa8uQIfznxM/Yzi41Frx6prFvUBQEWrPVWV9nI
rN8B1/d3QJ15hrzodTZ2XmhhffmPD/o7ymfLb7JRLtNx/+xVHlwDTnvsbYJf
zx6miP7/fjYVfNhxl40abOv2Z61t4GIilyNyn41Xc452LevkwJvtGxJLHrBx
hd3cscY9HFi2zSY6MpXAp97gqdP/fz/b8ISPaTrxfGVOGUOTA7+2RNvNZrBx
Ic/pSCKD4LfB3S2FT9k4vSDid4BNGzzYlKdyMYvQS5rpr8qNXJiz8cu8bS/Z
6O5d0tw2xIWjGwb6pl8R+rWfVeng8qBCb0FDXh5R30RFfrdEO6zW1Xwb/Jbw
Fwf50r1hHUDVNn1g8I7g19GMEe21XdC31o0yXsxG7byxxFPqPbBnTdDpnDI2
RjG/rsw62gdZq9jOZyvYqO5jELpkcACkVz4x0a8m1jftecXNH4ZAzQqt4Ro2
5m8I//7VfRQa1NvEs2oJffr5r/AeGoNbK+RbdBrY+MZyp1PtkimYUdYv7Wtk
4znRVTdZV6bh4HLbx0+a2PjKuXjzU2J+e7fMm33yBxu7fvqKqX4TwArFmOA1
rWy8cbZijVScECLlk9y72th40tBo1w+Cn9ylb3Y+4rPxH+XE3PpGIZjLNmgf
72Tj8uSGoHwbIaTJDC7R6mFj2qLglH82AhCTXijg9bExsNfTzZ43DScltbgP
Bgm/8Q27sHnVFHxYbFbtMcJG2ZY+BwdD4j4RP5ClOs7Gtxccg+OMx4C58PzN
1kk29h+IW7rBcQSGxOLCk2bYSEnb2BOxahDsRTOPHfrNxm98g+g+uT7ImVdp
s/wvG1MbTI2XXOoGubncjS0icbjk4+6hWadOCBb5vez2vDi885enLnqzHb7/
lRdxFYvDy+vOfli2kQ9Gf/S75RfF4SK7209PKPPgzm/busbFcZj9+9rFV9Zc
mBV4v74uFYfCownS3z3a4MhMTJLjkjhceGzUx+EGB0qmki4vkSOejxV/umUV
B9Qn3/h+VojDIuGnfUkSHIgdb3CIU4rDvMfsnMldHOgYHTSyU4nD8iXvGC+b
OGA1slBdUi0Og9vvjU8Ut0HGkNaCWo04dJY/Zvs0hguLBs2G6CvjsJm/L3O3
Cw98+w98270mDhMjjUuWHOVDbe/5dwu141BTrKXdNrMd1vfEpVbrxmGEU320
nUEnXO3KpJM3xOH4HEyrnN8NYx2VZy03xWGlOW86X7UXnNq5bvO3xOHiXxlj
brH9kMv7DeWGcXjziJ5Ers4QKHAV1sRuj8PNNI0b1dQRCONslNphGoeho18C
nWXH4MevPZP/IA6nL+gvbn48Dv8DdkB+bg==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.1},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6875423560589323`*^9}]
}, Open  ]],

Cell[TextData[{
 "The boundary between stability and cycles when ",
 StyleBox["K ",
  FontSlant->"Italic"],
 "= 3 can be found by playing around with values of ",
 StyleBox["d ",
  FontSlant->"Italic"],
 "and ",
 StyleBox["v.",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.687009299977479*^9, 3.6870093345027943`*^9}, {
  3.68711133746277*^9, 3.687111337536934*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using the secant method to find the singular strategies", \
"Subsubsection",
 CellChangeTimes->{{3.6852785856254873`*^9, 3.685278593825942*^9}, {
  3.685286729443479*^9, 3.685286733952943*^9}}],

Cell[TextData[{
 "Here, we need to be more careful about calculating the ",
 StyleBox["v",
  FontSlant->"Italic"],
 " bounds. Depending on the value of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"K", " ", "and", " ", 
    SubscriptBox["\[Beta]", "0"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", the ",
 StyleBox["v",
  FontSlant->"Italic"],
 " bounds may or may not be positive and real. We need to build in a catch \
for this possibility in the functions that make use of these bounds."
}], "Text",
 CellChangeTimes->{{3.6871084179710712`*^9, 3.68710845968507*^9}, {
  3.6871085042474833`*^9, 3.687108559461238*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"calcvBounds", "[", 
   RowBox[{"{", 
    RowBox[{"Kval_", ",", "B0val_", ",", "dval_"}], "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\[Rho]", ",", "K", ",", "fs", ",", "h", ",", "es", ",", "d", ",", "B0", 
      ",", "v", ",", "params", ",", "bounds"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"params", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"K", "\[Rule]", "Kval"}], ",", 
        RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
        RowBox[{"fs", "\[Rule]", "1"}], ",", 
        RowBox[{"h", "\[Rule]", "1"}], ",", 
        RowBox[{"d", "\[Rule]", "dval"}], ",", 
        RowBox[{"B0", "\[Rule]", "B0val"}], ",", 
        RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Figure", " ", "out", " ", "when", " ", "the", " ", "per"}], 
        "-", 
        RowBox[{
        "capita", " ", "growth", " ", "rate", " ", "of", " ", "the", " ", 
         "infectious", " ", "class", " ", "is", " ", "equal", " ", "to", " ", 
         "zero"}]}], ",", " ", 
       RowBox[{
       "when", " ", "the", " ", "susceptible", " ", "population", " ", "is", 
        " ", "at", " ", "its", " ", "maximum"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"bounds", "=", 
      RowBox[{
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             FractionBox[
              RowBox[{"B0", " ", "S", " ", "v"}], 
              RowBox[{"1", "+", "v"}]], "-", 
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                RowBox[{"h", "+", "R"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{"d", "+", "v"}], ")"}]}], 
              RowBox[{"fs", " ", "R"}]]}], "/.", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"R", "\[Rule]", 
               RowBox[{"-", 
                FractionBox[
                 RowBox[{
                  SqrtBox["d"], " ", "h"}], 
                 RowBox[{
                  SqrtBox["d"], "-", 
                  RowBox[{
                   SqrtBox["es"], " ", "fs"}]}]]}]}], ",", 
              RowBox[{"S", "\[Rule]", 
               FractionBox[
                RowBox[{
                 SqrtBox["es"], " ", "h", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    SqrtBox["es"], " ", "fs", " ", "K"}], "-", 
                   RowBox[{
                    SqrtBox["d"], " ", 
                    RowBox[{"(", 
                    RowBox[{"h", "+", "K"}], ")"}]}]}], ")"}], " ", 
                 "\[Rho]"}], 
                RowBox[{
                 SuperscriptBox[
                  RowBox[{"(", 
                   RowBox[{
                    SqrtBox["d"], "-", 
                    RowBox[{
                    SqrtBox["es"], " ", "fs"}]}], ")"}], "2"], " ", 
                 "K"}]]}]}], "}"}]}], ")"}], "\[Equal]", "0"}], ",", "v"}], 
        "]"}], "/.", "params"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Min", "[", 
        RowBox[{"bounds", "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", "1", ",", "2"}], "]"}], "]"}], "]"}], ",", 
       RowBox[{"Max", "[", 
        RowBox[{"bounds", "[", 
         RowBox[{"[", 
          RowBox[{";;", ",", "1", ",", "2"}], "]"}], "]"}], "]"}]}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.685272884863634*^9, 3.6852731021901693`*^9}, {
   3.685276790026416*^9, 3.685276808692832*^9}, 3.687106539546262*^9, {
   3.687106636835668*^9, 3.68710665554766*^9}, {3.6871113816838512`*^9, 
   3.687111389704118*^9}}],

Cell[TextData[{
 "This function calculate the fitness gradient for a given set of values for ",
 StyleBox["K",
  FontSlant->"Italic"],
 ", ",
 StyleBox["v",
  FontSlant->"Italic"],
 ", ",
 StyleBox["d",
  FontSlant->"Italic"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Beta]", "0"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Note that since the invasion fitness is "
}], "Text",
 CellChangeTimes->{{3.687611000902904*^9, 3.687611046981791*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fitGrad", "[", 
    RowBox[{"{", 
     RowBox[{
     "thisK_", ",", "thisv_", ",", "thisd_", ",", "thisB0_", ",", "dt_"}], 
     "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "params", ",", "K", ",", "v", ",", "\[Rho]", ",", "fs", ",", "h", ",", 
       "d", ",", "B0", ",", "es", ",", "dR", ",", "R", ",", "S", ",", "Q", 
       ",", "dS", ",", "dQ", ",", "Eq", ",", "Equil", ",", "EndEq", ",", 
       "AvgS", ",", "soln", ",", "St", ",", "FirstPeak", ",", "T", ",", 
       "SecondPeak", ",", "Ssum", ",", "grad", ",", "fsum", ",", "Avgf", ",", 
       "DOPRIamat", ",", "DOPRIbvec", ",", "DOPRIcvec", ",", "DOPRIevec", ",",
        "DOPRICoefficients"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "The", " ", "parameters", " ", "for", " ", "the", " ", "model"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"params", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"K", "\[Rule]", "thisK"}], ",", 
         RowBox[{"v", "\[Rule]", "thisv"}], ",", 
         RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
         RowBox[{"fs", "\[Rule]", "1"}], ",", 
         RowBox[{"h", "\[Rule]", "1"}], ",", 
         RowBox[{"d", "\[Rule]", "thisd"}], ",", 
         RowBox[{"B0", "\[Rule]", "thisB0"}], ",", 
         RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "Calculate", " ", "the", " ", "equilibria", " ", "of", " ", "the", 
         " ", "resident"}], "-", 
        RowBox[{"only", " ", "model"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"dR", "=", 
       RowBox[{
        RowBox[{"\[Rho]", " ", "R", " ", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           FractionBox["R", "K"]}], ")"}]}], "-", 
        RowBox[{
         FractionBox[
          RowBox[{"fs", " ", "R"}], 
          RowBox[{"h", "+", "R"}]], " ", 
         RowBox[{"(", 
          RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dS", "=", 
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{"es", " ", "fs", " ", "R"}], 
          RowBox[{"h", "+", "R"}]], " ", 
         RowBox[{"(", 
          RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
        RowBox[{
         FractionBox["d", 
          FractionBox[
           RowBox[{"fs", " ", "R"}], 
           RowBox[{"h", "+", "R"}]]], " ", "S"}], "-", 
        RowBox[{
         RowBox[{"(", 
          FractionBox[
           RowBox[{"B0", " ", "v"}], 
           RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dQ", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          FractionBox[
           RowBox[{"B0", " ", "v"}], 
           RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
        RowBox[{
         FractionBox[
          RowBox[{"(", 
           RowBox[{"d", "+", "v"}], ")"}], 
          FractionBox[
           RowBox[{"fs", " ", "R"}], 
           RowBox[{"h", "+", "R"}]]], " ", "Q"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "Calculate", " ", "the", " ", "equilibria", " ", "of", " ", "the", 
         " ", "system"}], ",", " ", 
        RowBox[{
        "with", " ", "everything", " ", "plugged", " ", "in", " ", "except", 
         " ", "the", " ", "value", " ", "of", " ", "v"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"Eq", "=", 
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"dR", "\[Equal]", "0"}], ",", 
            RowBox[{"dS", "\[Equal]", "0"}], ",", 
            RowBox[{"dQ", "\[Equal]", "0"}]}], "}"}], "/.", "params"}], ",", 
         RowBox[{"{", 
          RowBox[{"R", ",", "S", ",", "Q"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Which", " ", "equilibrium", " ", "represents", " ", "the", " ", 
        "endemic", " ", "equilibrium", " ", "where", " ", "the", " ", "real", 
        " ", "parts", " ", "are", " ", "positive", " ", "and", " ", "the", 
        " ", "imaginary", " ", "parts", " ", "are", " ", "negligibly", " ", 
        RowBox[{"small", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"EndEq", "=", 
       RowBox[{"Eq", "\[LeftDoubleBracket]", 
        RowBox[{
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"AllTrue", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"AllTrue", "[", 
                    RowBox[{
                    RowBox[{"Re", "[", 
                    RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"#", ">", "0"}], "&"}]}], "]"}], ",", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{
                    RowBox[{"Im", "[", 
                    RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"#", "<", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "9"}]]}], "&"}]}], "]"}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], "[", 
                RowBox[{"[", "j", "]"}], "]"}], ",", 
               RowBox[{
                RowBox[{"#", "\[Equal]", "True"}], "&"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"j", ",", "1", ",", 
               RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], ",", 
           "True"}], "]"}], "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
        "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Does", " ", "the", " ", "Jacobian", " ", "evaluated", " ", "at", " ", 
        "this", " ", "equilibrium", " ", "have", " ", "all", " ", "negative", 
        " ", "eigenvalues", " ", 
        RowBox[{"e", ".", "g", ".", " ", "is"}], " ", "the", " ", 
        "equilibrium", " ", 
        RowBox[{"stable", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"grad", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Eigenvalues", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dR", ",", "Q"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dS", ",", "Q"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "R"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "S"}], "]"}], ",", 
                   RowBox[{"D", "[", 
                    RowBox[{"dQ", ",", "Q"}], "]"}]}], "}"}]}], "}"}], "/.", 
               "params"}], "/.", "EndEq"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"#", "<", "0"}], "&"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"if", " ", "all", " ", "e"}], "-", 
            RowBox[{"values", " ", "are", " ", "negative"}]}], ",", " ", 
           RowBox[{
           "return", " ", "the", " ", "fitness", " ", "gradient", " ", 
            "plugging", " ", "in", " ", "the", " ", "values", " ", "of", " ", 
            OverscriptBox["R", "^"], " ", "and", " ", 
            OverscriptBox["S", "^"]}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           FractionBox[
            RowBox[{"B0", " ", 
             RowBox[{"EndEq", "\[LeftDoubleBracket]", 
              RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"1", "+", "v"}], ")"}], "2"]], "-", 
           FractionBox[
            RowBox[{"h", "+", 
             RowBox[{"EndEq", "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], 
            RowBox[{"fs", " ", 
             RowBox[{"EndEq", "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}]]}], "/.", 
          "params"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"otherwise", ",", " ", 
           RowBox[{"numerically", " ", "solve"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"DOPRIamat", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", "/", "5"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"3", "/", "40"}], ",", 
               RowBox[{"9", "/", "40"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"44", "/", "45"}], ",", 
               RowBox[{
                RowBox[{"-", "56"}], "/", "15"}], ",", 
               RowBox[{"32", "/", "9"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"19372", "/", "6561"}], ",", 
               RowBox[{
                RowBox[{"-", "25360"}], "/", "2187"}], ",", 
               RowBox[{"64448", "/", "6561"}], ",", 
               RowBox[{
                RowBox[{"-", "212"}], "/", "729"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"9017", "/", "3168"}], ",", 
               RowBox[{
                RowBox[{"-", "355"}], "/", "33"}], ",", 
               RowBox[{"46732", "/", "5247"}], ",", 
               RowBox[{"49", "/", "176"}], ",", 
               RowBox[{
                RowBox[{"-", "5103"}], "/", "18656"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"35", "/", "384"}], ",", "0", ",", 
               RowBox[{"500", "/", "1113"}], ",", 
               RowBox[{"125", "/", "192"}], ",", 
               RowBox[{
                RowBox[{"-", "2187"}], "/", "6784"}], ",", 
               RowBox[{"11", "/", "84"}]}], "}"}]}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"DOPRIbvec", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"35", "/", "384"}], ",", "0", ",", 
             RowBox[{"500", "/", "1113"}], ",", 
             RowBox[{"125", "/", "192"}], ",", 
             RowBox[{
              RowBox[{"-", "2187"}], "/", "6784"}], ",", 
             RowBox[{"11", "/", "84"}], ",", "0"}], "}"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"DOPRIcvec", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "/", "5"}], ",", 
             RowBox[{"3", "/", "10"}], ",", 
             RowBox[{"4", "/", "5"}], ",", 
             RowBox[{"8", "/", "9"}], ",", "1", ",", "1"}], "}"}]}], ";", 
          RowBox[{"DOPRIevec", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"71", "/", "57600"}], ",", "0", ",", 
             RowBox[{
              RowBox[{"-", "71"}], "/", "16695"}], ",", 
             RowBox[{"71", "/", "1920"}], ",", 
             RowBox[{
              RowBox[{"-", "17253"}], "/", "339200"}], ",", 
             RowBox[{"22", "/", "525"}], ",", 
             RowBox[{
              RowBox[{"-", "1"}], "/", "40"}]}], "}"}]}], ";", 
          RowBox[{
           RowBox[{"DOPRICoefficients", "[", 
            RowBox[{"5", ",", "p_"}], "]"}], ":=", 
           RowBox[{"N", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "DOPRIamat", ",", "DOPRIbvec", ",", "DOPRIcvec", ",", 
               "DOPRIevec"}], "}"}], ",", "p"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"soln", "=", 
           RowBox[{"NDSolve", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dS", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dQ", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"dR", "/.", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", 
                    RowBox[{"S", "[", "t", "]"}]}], ",", 
                    RowBox[{"Q", "\[Rule]", 
                    RowBox[{"Q", "[", "t", "]"}]}], ",", 
                    RowBox[{"R", "\[Rule]", 
                    RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
                RowBox[{
                 RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
                RowBox[{
                 RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
                RowBox[{
                 RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
                 RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
             RowBox[{"{", 
              RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
             RowBox[{"Method", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<ExplicitRungeKutta\>\"", ",", 
                RowBox[{"\"\<DifferenceOrder\>\"", "\[Rule]", "5"}], ",", 
                RowBox[{
                "\"\<Coefficients\>\"", "\[Rule]", "DOPRICoefficients"}], ",", 
                RowBox[{"\"\<StiffnessTest\>\"", "\[Rule]", "False"}]}], 
               "}"}]}], ",", 
             RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
             RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"Plot", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ",", 
               RowBox[{"{", 
                RowBox[{"t", ",", "800", ",", "1000"}], "}"}]}], "]"}], "]"}],
             ";"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Find", " ", "the", " ", "average", " ", "S", " ", "over", " ", 
            "the", " ", "cycle"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"St", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "800", ",", "900", ",", "dt"}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "find", " ", "the", " ", "first", " ", "peak", " ", "of", " ", 
            "the", " ", "cycle"}], " ", "*)"}], "\t", "\[IndentingNewLine]", 
          RowBox[{"FirstPeak", "=", " ", 
           RowBox[{"800", "+", 
            RowBox[{
             RowBox[{
              RowBox[{"Position", "[", 
               RowBox[{"St", ",", 
                RowBox[{"Max", "[", "St", "]"}]}], "]"}], 
              "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
             "dt"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Find", " ", "next", " ", "peak"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"St", "=", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
              "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", "FirstPeak", ",", "1000", ",", "dt"}], 
              "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Cycle", " ", "period"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"T", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 FractionBox[
                  RowBox[{
                   RowBox[{
                   "St", "\[LeftDoubleBracket]", "t", 
                    "\[RightDoubleBracket]"}], "-", 
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}]}], 
                  RowBox[{
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "1"}], "\[RightDoubleBracket]"}], "-", 
                   RowBox[{"St", "\[LeftDoubleBracket]", 
                    RowBox[{"t", "+", "2"}], "\[RightDoubleBracket]"}]}]], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "1", ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "St", "]"}], "-", "2"}]}], "}"}]}],
                 "]"}], ",", 
               RowBox[{"_", "?", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "<", "0"}], "&"}], ")"}]}]}], "]"}], 
             "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], " ", 
            "dt"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Next", " ", "peak"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"SecondPeak", "=", 
           RowBox[{"FirstPeak", "+", "T"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Riemann", " ", "sum", " ", "to", " ", "find", " ", "the", " ", 
            "integral", " ", "of", " ", "S", 
            RowBox[{"(", "t", ")"}], " ", "over", " ", "the", " ", "cycle"}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Ssum", "=", 
           RowBox[{"Sum", "[", 
            RowBox[{
             RowBox[{"dt", " ", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"S", "[", "t", "]"}], "/.", "soln"}], ")"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"t", ",", 
               RowBox[{"FirstPeak", "+", 
                RowBox[{"dt", "/", "2"}]}], ",", 
               RowBox[{"SecondPeak", "+", 
                RowBox[{"dt", "/", "2"}]}], ",", "dt"}], "}"}]}], "]"}]}], 
          ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"calculate", " ", "the", " ", "average", " ", "S"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"AvgS", "=", 
           RowBox[{"Ssum", "/", "T"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Find", " ", "the", " ", "average", " ", "inverse", " ", 
             "resource", " ", "ingestion", " ", 
             FractionBox[
              RowBox[{"h", "+", 
               RowBox[{"R", 
                RowBox[{"(", "t", ")"}]}]}], 
              RowBox[{"R", 
               RowBox[{"(", "t", ")"}]}]], " ", "over", " ", "the", " ", 
             "cycle"}], " ", "-", " ", 
            RowBox[{
            "note", " ", "we", " ", "can", " ", "use", " ", "the", " ", 
             "same", " ", "interval", " ", "as", " ", "found", " ", 
             "before"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Riemann", " ", "sum", " ", "to", " ", "find", " ", "the", " ", 
            "integral", " ", "of", " ", 
            FractionBox[
             RowBox[{"h", "+", 
              RowBox[{"R", 
               RowBox[{"(", "t", ")"}]}]}], 
             RowBox[{"R", 
              RowBox[{"(", "t", ")"}]}]], " ", "over", " ", "the", " ", 
            "cycle"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"fsum", "=", 
           RowBox[{
            RowBox[{"Sum", "[", 
             RowBox[{
              RowBox[{"dt", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  FractionBox[
                   RowBox[{"h", "+", 
                    RowBox[{"R", "[", "t", "]"}]}], 
                   RowBox[{"R", "[", "t", "]"}]], "/.", "soln"}], ")"}], 
                "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"t", ",", 
                RowBox[{"FirstPeak", "+", 
                 RowBox[{"dt", "/", "2"}]}], ",", 
                RowBox[{"SecondPeak", "+", 
                 RowBox[{"dt", "/", "2"}]}], ",", "dt"}], "}"}]}], "]"}], "/.",
             "params"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"calculate", " ", "the", " ", "average", " ", "R"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Avgf", "=", 
           RowBox[{"fsum", "/", "T"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"the", " ", "fitness", " ", "gradient"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"B0", " ", "AvgS"}], 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"1", "+", "v"}], ")"}], "2"]], "-", 
            FractionBox["Avgf", "fs"]}], "/.", "params"}]}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      "grad"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.684451491058712*^9, 3.684451498709157*^9}, {
   3.684451604539295*^9, 3.684451791255568*^9}, {3.684451901152554*^9, 
   3.684451921069169*^9}, {3.684459864892218*^9, 3.6844599372470407`*^9}, 
   3.6844600012512074`*^9, {3.684460037389927*^9, 3.684460086194024*^9}, {
   3.684460643123582*^9, 3.684460670460699*^9}, {3.6844610713999453`*^9, 
   3.684461113562046*^9}, {3.684461613026376*^9, 3.6844616605762787`*^9}, {
   3.6844617298486853`*^9, 3.6844618363765287`*^9}, {3.684462024742939*^9, 
   3.684462051881359*^9}, {3.684462106169607*^9, 3.6844622102017593`*^9}, {
   3.68446234278074*^9, 3.684462342831826*^9}, {3.684462389031413*^9, 
   3.6844624104986267`*^9}, {3.6845102976320753`*^9, 3.68451031188741*^9}, {
   3.684513228332176*^9, 3.6845132296346684`*^9}, {3.684514415790408*^9, 
   3.684514416261383*^9}, {3.684517682553866*^9, 3.68451771400926*^9}, {
   3.684858644808329*^9, 3.684858648531245*^9}, {3.684861180111555*^9, 
   3.684861188863456*^9}, {3.684861844445223*^9, 3.684861849269473*^9}, {
   3.685199417091984*^9, 3.685199426114366*^9}, {3.685199676116304*^9, 
   3.6851996925960703`*^9}, {3.6852039890991173`*^9, 3.685204067050282*^9}, {
   3.685204165376914*^9, 3.685204169122121*^9}, 3.6852044225193253`*^9, 
   3.685204511406601*^9, {3.685204566350975*^9, 3.685204583304344*^9}, 
   3.6852046278867207`*^9, {3.685204691687089*^9, 3.685204692584836*^9}, {
   3.6852049012642517`*^9, 3.685204909620894*^9}, {3.685205042078187*^9, 
   3.685205077617441*^9}, {3.685208830792323*^9, 3.685208833548361*^9}, {
   3.685209086123391*^9, 3.685209088475152*^9}, 3.685209190534054*^9, {
   3.685209437437945*^9, 3.685209484080401*^9}, {3.685210360716099*^9, 
   3.685210462045497*^9}, {3.685210609588832*^9, 3.6852106134022503`*^9}, {
   3.685210668303978*^9, 3.685210670822495*^9}, {3.6852116858679247`*^9, 
   3.6852116862714777`*^9}, 3.685211725469466*^9, 3.687009388968285*^9, {
   3.687105655174901*^9, 3.687105664251112*^9}, {3.68710584448956*^9, 
   3.687105845106043*^9}, {3.687105876223317*^9, 3.6871058839183693`*^9}, {
   3.6871059316435223`*^9, 3.687106194328968*^9}, {3.6871063144114027`*^9, 
   3.687106315344936*^9}, {3.68710949228323*^9, 3.687109523870594*^9}, {
   3.687110936612595*^9, 3.6871109580588512`*^9}, {3.687111038461382*^9, 
   3.687111040934074*^9}, {3.687111089276197*^9, 3.687111096014835*^9}, {
   3.687170589396826*^9, 3.687170591294993*^9}, {3.687170749291164*^9, 
   3.687170761519162*^9}, {3.687170897475222*^9, 3.687170898441638*^9}, 
   3.687171085644108*^9, {3.687171296028811*^9, 3.687171330339252*^9}, {
   3.6871728679018497`*^9, 3.687172871510899*^9}, 3.6871729887393103`*^9, {
   3.687176054862384*^9, 3.6871760707783012`*^9}, {3.68717616272689*^9, 
   3.687176167068591*^9}, {3.687176249498464*^9, 3.687176253085087*^9}, {
   3.68717635261687*^9, 3.6871763765529613`*^9}, {3.687176500734004*^9, 
   3.687176515188258*^9}, {3.6871766678996964`*^9, 3.687176709105659*^9}, {
   3.687177112735228*^9, 3.6871771751709337`*^9}, {3.68717723595774*^9, 
   3.687177256148631*^9}, {3.687177402549317*^9, 3.687177422893242*^9}, {
   3.687177723702526*^9, 3.687177728874206*^9}, {3.687177794688141*^9, 
   3.6871777973879137`*^9}, {3.6871778839818497`*^9, 3.687177927549848*^9}, {
   3.687177998932336*^9, 3.687178002418624*^9}, {3.687178059977293*^9, 
   3.6871780904624166`*^9}, {3.6875419367842627`*^9, 3.687542018084649*^9}, {
   3.6875420648211403`*^9, 3.687542092580435*^9}, {3.6875454830695143`*^9, 
   3.687545484208714*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"secantMethod", "[", 
   RowBox[{"{", 
    RowBox[{
    "Kval_", ",", "B0val_", ",", "dval_", ",", "v0init_", ",", "convcrit_"}], 
    "}"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "v0uncon", ",", "v1uncon", ",", "v0con", ",", "v1con", ",", "conv", ",", 
      "g0", ",", "g1", ",", "v2con", ",", "v2uncon", ",", "vbnds", ",", "ret",
       ",", "K", ",", "\[Rho]", ",", "fs", ",", "h", ",", "d", ",", "B0", ",",
       "es", ",", "pars", ",", "dS", ",", "dQ", ",", "dR", ",", "S", ",", "Q",
       ",", "R", ",", "iter"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"calculate", " ", "the", " ", "bounds", " ", "on", " ", "v"}], 
     " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vbnds", "=", 
      RowBox[{"calcvBounds", "[", 
       RowBox[{"{", 
        RowBox[{"Kval", ",", "B0val", ",", "dval"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "check", " ", "to", " ", "make", " ", "sure", " ", "the", " ", "bounds",
        " ", "are", " ", "real", " ", "and", " ", "positive"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"ret", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"AllTrue", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"TrueQ", "[", 
             RowBox[{
              RowBox[{"vbnds", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ">", "0"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "2"}], "}"}]}], "]"}], ",", 
          RowBox[{
           RowBox[{"#", "\[Equal]", "True"}], "&"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "set", " ", "the", " ", "unconstrained", " ", "v", " ", "values", 
          " ", "for", " ", "use", " ", "in", " ", "calculating", " ", "the", 
          " ", "fitness", " ", "gradient"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"v0uncon", "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"v0init", "\[Equal]", "0"}], ",", 
            FractionBox[
             RowBox[{
              RowBox[{"Max", "[", "vbnds", "]"}], "+", 
              RowBox[{"Min", "[", "vbnds", "]"}]}], "2"], ",", "v0init"}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"v1uncon", "=", 
          RowBox[{"v0uncon", "+", "0.001"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "check", " ", "to", " ", "make", " ", "sure", " ", "the", " ", "v", 
           " ", "bounds", " ", "are", " ", "real", " ", "and", " ", 
           "positive"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "convert", " ", "v", " ", "to", " ", "the", " ", "unconstrained", 
           " ", "scale", " ", "for", " ", "use", " ", "in", " ", "the", " ", 
           "recurrence", " ", "relation"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"v0con", "=", 
          RowBox[{"Log", "[", 
           RowBox[{
            RowBox[{"(", 
             FractionBox[
              RowBox[{"(", 
               RowBox[{"v0uncon", "-", 
                RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"(", 
               FractionBox[
                RowBox[{"(", 
                 RowBox[{"v0uncon", "-", 
                  RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                  RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], 
             ")"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"v1con", "=", 
          RowBox[{"Log", "[", 
           RowBox[{
            RowBox[{"(", 
             FractionBox[
              RowBox[{"(", 
               RowBox[{"v1uncon", "-", 
                RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"1", "-", 
              RowBox[{"(", 
               FractionBox[
                RowBox[{"(", 
                 RowBox[{"v1uncon", "-", 
                  RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                  RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], 
             ")"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "compute", " ", "the", " ", "value", " ", "of", " ", "the", " ", 
           "fitness", " ", "gradient", " ", "at", " ", "the", " ", 
           "unconstrained", " ", "values", " ", "of", " ", "v0"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{"g0", "=", 
          RowBox[{"fitGrad", "[", 
           RowBox[{"{", 
            RowBox[{
            "Kval", ",", "v0uncon", ",", "dval", ",", "B0val", ",", "0.001"}],
             "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Set", " ", "the", " ", "initial", " ", "value", " ", "of", " ", 
           "the", " ", "convergence", " ", "measure"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"conv", "=", "1"}], ";", 
         RowBox[{"iter", "=", "1"}], ";", "\[IndentingNewLine]", 
         RowBox[{"While", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"conv", ">", "convcrit"}], "&&", 
            RowBox[{"iter", "<", "100"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "compute", " ", "the", " ", "value", " ", "of", " ", "the", " ", 
             "fitness", " ", "gradient", " ", "at", " ", "the", " ", 
             "unconstrained", " ", "values", " ", "of", " ", "v1"}], " ", 
            "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"g1", "=", 
             RowBox[{"fitGrad", "[", 
              RowBox[{"{", 
               RowBox[{
               "Kval", ",", "v1uncon", ",", "dval", ",", "B0val", ",", 
                "0.001"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "use", " ", "the", " ", "recurrence", " ", "relation", " ", "to",
               " ", "update", " ", "the", " ", "constrained", " ", "value", 
              " ", "of", " ", "v"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"v2con", "=", 
             FractionBox[
              RowBox[{
               RowBox[{"v0con", " ", "g1"}], "-", 
               RowBox[{"v1con", " ", "g0"}]}], 
              RowBox[{"g1", "-", "g0"}]]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "compute", " ", "the", " ", "unconstrained", " ", "version"}], 
             " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"v2uncon", "=", 
             RowBox[{
              RowBox[{
               FractionBox[
                RowBox[{"Exp", "[", "v2con", "]"}], 
                RowBox[{"1", "+", 
                 RowBox[{"Exp", "[", "v2con", "]"}]}]], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                 RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]}], "+", 
              RowBox[{"Min", "[", "vbnds", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"Print", "[", "v2uncon", "]"}], "*)"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"v2uncon", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"v2uncon", "\[Equal]", 
                RowBox[{"Min", "[", "vbnds", "]"}]}], ",", 
               RowBox[{
                RowBox[{"Min", "[", "vbnds", "]"}], "+", "0.0001"}], ",", 
               "v2uncon"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"v2uncon", "=", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"v2uncon", "\[Equal]", 
                RowBox[{"Max", "[", "vbnds", "]"}]}], ",", 
               RowBox[{
                RowBox[{"Max", "[", "vbnds", "]"}], "-", "0.0001"}], ",", 
               "v2uncon"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "set", " ", "the", " ", "convergence", " ", "criterion", " ", 
              "to", " ", "the", " ", "lower", " ", "of", " ", "g1", " ", 
              "and", " ", "g2"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"conv", "=", 
             RowBox[{"Min", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Abs", "[", "g0", "]"}], ",", 
                RowBox[{"Abs", "[", "g1", "]"}]}], "}"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Printing", " ", "allows", " ", "you", " ", "to", " ", "monitor",
               " ", "convergence"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Print", "[", 
             RowBox[{"{", 
              RowBox[{"conv", ",", "v2uncon"}], "}"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "update", " ", "the", " ", "unconstrained", " ", "and", " ", 
              "constrained", " ", "values", " ", "of", " ", "v0", " ", "and", 
              " ", "v1"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"v0uncon", "=", "v1uncon"}], ";", "\[IndentingNewLine]", 
            RowBox[{"v0con", "=", "v1con"}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "update", " ", "the", " ", "fitness", " ", "gradient", " ", "at",
               " ", "g0"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"g0", "=", "g1"}], ";", "\[IndentingNewLine]", 
            RowBox[{"v1uncon", "=", "v2uncon"}], ";", "\[IndentingNewLine]", 
            RowBox[{"v1con", "=", 
             RowBox[{"Log", "[", 
              RowBox[{
               RowBox[{"(", 
                FractionBox[
                 RowBox[{"(", 
                  RowBox[{"v1uncon", "-", 
                   RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                   RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}], "/", 
               RowBox[{"(", 
                RowBox[{"1", "-", 
                 RowBox[{"(", 
                  FractionBox[
                   RowBox[{"(", 
                    RowBox[{"v1uncon", "-", 
                    RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}], 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Max", "[", "vbnds", "]"}], "-", 
                    RowBox[{"Min", "[", "vbnds", "]"}]}], ")"}]], ")"}]}], 
                ")"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"iter", "=", 
             RowBox[{"iter", "+", "1"}]}], ";"}]}], "\[IndentingNewLine]", 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"iter", "<", "100"}], ",", "v2uncon", ",", 
           RowBox[{"-", "1"}]}], "]"}]}], ",", "\[IndentingNewLine]", "0"}], 
       "]"}]}], ";", "\[IndentingNewLine]", "ret"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.685278703672469*^9, 3.6852787385356073`*^9}, {
   3.685278973819104*^9, 3.685279060252244*^9}, {3.685279098570673*^9, 
   3.685279151737397*^9}, {3.685279395751669*^9, 3.685279573850235*^9}, {
   3.6852796066436367`*^9, 3.6852796250831757`*^9}, {3.685279740103479*^9, 
   3.6852797405415087`*^9}, {3.685285595343451*^9, 3.685285735439293*^9}, {
   3.687009661037538*^9, 3.6870096725564337`*^9}, {3.687111359116674*^9, 
   3.6871113701407146`*^9}, {3.687111409234365*^9, 3.687111448586941*^9}, {
   3.6871117459258013`*^9, 3.6871117488273287`*^9}, {3.6871120998177347`*^9, 
   3.687112164010268*^9}, {3.687112241546193*^9, 3.687112284352503*^9}, {
   3.687112336496345*^9, 3.6871123550228643`*^9}, {3.6871709250590553`*^9, 
   3.687171154108193*^9}, {3.6871712217888937`*^9, 3.687171222339402*^9}, 
   3.6871712906877327`*^9, {3.6871713634936132`*^9, 3.687171363841579*^9}, {
   3.687171481764246*^9, 3.6871715524918737`*^9}, {3.6871730615228453`*^9, 
   3.687173066461087*^9}, {3.687173191224844*^9, 3.687173194407453*^9}, {
   3.687173786169829*^9, 3.687173933490863*^9}, {3.687173965359342*^9, 
   3.6871740265691566`*^9}, {3.6871767269824038`*^9, 3.6871767335394993`*^9}, 
   3.687177440315085*^9, 3.687177806555273*^9, {3.687178606713499*^9, 
   3.687178618670334*^9}, {3.6875429311116667`*^9, 3.687542978192054*^9}}],

Cell[CellGroupData[{

Cell[BoxData["r"], "Input",
 CellChangeTimes->{3.687610958692577*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "d"}], "-", "vm", "+", 
  FractionBox[
   RowBox[{"S", " ", "vm", " ", 
    RowBox[{"B0", "[", "R", "]"}]}], 
   RowBox[{"1", "+", "vm"}]]}]], "Output",
 CellChangeTimes->{3.6876109589969063`*^9}]
}, Open  ]],

Cell[TextData[{
 "Here is a set of parameters such that, if the resident-only equilibrium is \
stable, the parasite should already be at the ESS (because we are setting ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{
     RowBox[{"\[Sqrt]", "d"}], "=", 
     RowBox[{
      RowBox[{"\[Sqrt]", "0.01"}], "=", "0.1"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")."
}], "Text",
 CellChangeTimes->{{3.687111062564994*^9, 3.6871111546117077`*^9}, {
  3.687542111236348*^9, 3.687542118424967*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fitGrad", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "0.1", ",", "0.01", ",", "10", ",", "0.001"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6871109628696527`*^9, 3.687110980000489*^9}, {
  3.687111102086753*^9, 3.687111102783066*^9}, {3.687111157188333*^9, 
  3.687111157278001*^9}}],

Cell[BoxData[
 RowBox[{"0.`", "\[VeryThinSpace]", "+", 
  RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{
  3.687110986501732*^9, {3.687111026746317*^9, 3.687111055172464*^9}, 
   3.687111161908106*^9, 3.687542122924737*^9, 3.687545490794778*^9}]
}, Open  ]],

Cell["\<\
But if the resident-only equilibrium is unstable, it appears that the ESS \
strategies will be very close\
\>", "Text",
 CellChangeTimes->{{3.687111167335552*^9, 3.6871112725118933`*^9}, {
  3.68754220664594*^9, 3.687542217849308*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fitGrad", "[", 
  RowBox[{"{", 
   RowBox[{"3", ",", "0.1", ",", "0.01", ",", "10", ",", "0.001"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.687111197194323*^9, 3.687111197265215*^9}, {
  3.6875421772271023`*^9, 3.687542184786035*^9}}],

Cell[BoxData["0.00006502140960540359`"], "Output",
 CellChangeTimes->{
  3.6871112038625402`*^9, {3.687542154871934*^9, 3.687542188274022*^9}, 
   3.6875454963094873`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "These", " ", "are", " ", "just", " ", "checks", " ", "to", " ", "make", 
    " ", "sure", " ", "that", " ", "the", " ", "error", " ", "catches", " ", 
    "are", " ", "working"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"secantMethod", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "10", ",", "0.1", ",", "0", ",", 
      SuperscriptBox["10", 
       RowBox[{"-", "12"}]]}], "}"}], "]"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"parasite", " ", "goes", " ", "extinct"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"secantMethod", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "0.01", ",", "0", ",", 
      SuperscriptBox["10", 
       RowBox[{"-", "12"}]]}], "}"}], "]"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"v", " ", "bounds", " ", "are", " ", "negative"}], " ", 
    "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.687112376487301*^9, 3.687112382628798*^9}, {
  3.6875422304385233`*^9, 3.687542248022045*^9}, {3.68754232136139*^9, 
  3.687542327537036*^9}, {3.687542473753871*^9, 3.687542492755343*^9}, {
  3.687543002030447*^9, 3.6875430072266827`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.687112383108864*^9, 3.687172892987698*^9, {3.687542488373417*^9, 
   3.6875424959316463`*^9}, 3.6875430076081753`*^9}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.687112383108864*^9, 3.687172892987698*^9, {3.687542488373417*^9, 
   3.6875424959316463`*^9}, 3.687543007624351*^9}]
}, Open  ]],

Cell[TextData[{
 "Here is a situation where the ESS should be ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{
     RowBox[{"\[Sqrt]", "d"}], "=", "0.1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", and that is what you get."
}], "Text",
 CellChangeTimes->{{3.687112615815281*^9, 3.6871126453162107`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"secantMethod", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "10", ",", "0.01", ",", "0", ",", 
    SuperscriptBox["10", 
     RowBox[{"-", "12"}]]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6871123897737007`*^9, 3.687112399492375*^9}, {
  3.6871729000710382`*^9, 3.687172901386725*^9}, {3.6875430109282084`*^9, 
  3.68754301118648*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.2833114220606381`", ",", 
   RowBox[{"0.0641323372290723`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.687543012185062*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.26625088563770793`", ",", 
   RowBox[{"0.13017257906563298`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.6875430149959593`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.10160762640852772`", ",", 
   RowBox[{"0.10690809507205573`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.687543018488455*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.02863091830653719`", ",", 
   RowBox[{"0.09888523239093136`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.687543022835745*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.005029943926672775`", ",", 
   RowBox[{"0.10004516044075791`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.6875430273103857`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00020117764080929135`", ",", 
   RowBox[{"0.10000030096262466`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.6875430294813128`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.3413668371597964`*^-6", ",", 
   RowBox[{"0.09999999991900857`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.6875430325040483`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.609734733345249`*^-10", ",", 
   RowBox[{"0.10000000000000009`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.6875430327205667`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", 
   RowBox[{"0.10000000000000006`", "\[VeryThinSpace]", "+", 
    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{3.687180765102598*^9, 3.687542508455606*^9, 
  3.687543032948584*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"0.10000000000000006`", "\[VeryThinSpace]", "+", 
  RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{3.687112479167638*^9, 3.68717292582692*^9, 
  3.687180785612072*^9, 3.6875425292611437`*^9, 3.687543032960206*^9}]
}, Open  ]],

Cell["\<\
Here, it is unclear what you should get for an ESS, since the population is \
cycling. You find, however, that the ESS virulence is essentially identical \
to the stable equilibrium case.\
\>", "Text",
 CellChangeTimes->{{3.687542520529903*^9, 3.687542574923499*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Find", " ", "the", " ", "singular", " ", "virulence", " ", "when", " ", 
     "K"}], " ", "=", " ", "3"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ESSv3", "=", 
    RowBox[{"secantMethod", "[", 
     RowBox[{"{", 
      RowBox[{"3", ",", "10", ",", "0.01", ",", "0.1", ",", 
       RowBox[{"5", " ", 
        SuperscriptBox["10", 
         RowBox[{"-", "5"}]]}]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Find", " ", "the", " ", "singular", " ", "virulence", " ", "when", " ", 
      "K"}], " ", "=", " ", "4"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"ESSv4", "=", 
    RowBox[{"secantMethod", "[", 
     RowBox[{"{", 
      RowBox[{"4", ",", "10", ",", "0.01", ",", "0.1", ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "8"}]]}], "}"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Find", " ", "the", " ", "singular", " ", "virulence", " ", "when", " ", 
      "K"}], " ", "=", " ", "5"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"ESSv5", "=", 
    RowBox[{"secantMethod", "[", 
     RowBox[{"{", 
      RowBox[{"5", ",", "10", ",", "0.01", ",", "0.1", ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "8"}]]}], "}"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.687112651898684*^9, 3.687112658613842*^9}, {
  3.6871733242090693`*^9, 3.6871733253660727`*^9}, {3.687543036229848*^9, 
  3.687543070968804*^9}, {3.68754314141696*^9, 3.687543168742296*^9}, {
  3.6875463366368923`*^9, 3.687546391670166*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00006502140960540359`", ",", "0.1000138287369629`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546399371558*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00014804201278906248`", ",", "0.09998130250244959`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546405237907*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00012114649771977071`", ",", "0.09999593940854132`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546411847871*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0000772116180907112`", ",", "0.1000216676528462`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546419582095*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0000772116180907112`", ",", "0.10000392492734436`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546422474311*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00005323755798913865`", ",", "0.10000812708611803`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.68754642573652*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00005323755798913865`", ",", "0.10000513944478148`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546428443169*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000049591081767275114`", ",", "0.10000596004350794`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546433262336*^9}]
}, Open  ]],

Cell[BoxData["0.10000596004350794`"], "Output",
 CellChangeTimes->{
  3.687172440338318*^9, 3.687173077546564*^9, 3.687173183211892*^9, 
   3.687173321831451*^9, 3.6871733900934277`*^9, 3.6871739527612762`*^9, 
   3.687174096131007*^9, 3.687542636970002*^9, {3.687543061679227*^9, 
   3.6875430673359327`*^9}, {3.6875431381553793`*^9, 3.687543150170977*^9}, 
   3.6875432124850683`*^9, 3.687546433277671*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000013926999393287787`", ",", "0.09999739322145933`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.6875464391525793`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8.809035519696806`*^-6", ",", "0.09999574170060695`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546443656887*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5.566932180567363`*^-6", ",", "0.0999929059802954`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.6875464470771303`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.755835973455305`*^-10", ",", "0.0999929055851741`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546453653606*^9}]
}, Open  ]],

Cell[BoxData["0.0999929055851741`"], "Output",
 CellChangeTimes->{
  3.687172440338318*^9, 3.687173077546564*^9, 3.687173183211892*^9, 
   3.687173321831451*^9, 3.6871733900934277`*^9, 3.6871739527612762`*^9, 
   3.687174096131007*^9, 3.687542636970002*^9, {3.687543061679227*^9, 
   3.6875430673359327`*^9}, {3.6875431381553793`*^9, 3.687543150170977*^9}, 
   3.6875432124850683`*^9, 3.6875464536678743`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.701089331124678`*^-6", ",", "0.09999871043858104`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.6875464589151497`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.225957149525897`*^-6", ",", "0.09999749898277331`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546461715461*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.779628682451744`*^-6", ",", "0.09997909904705114`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.68754646600075*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.10108098591877`*^-8", ",", "0.0999789870765517`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.687546468951661*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.6560531551922395`*^-10", ",", "0.09997898634665127`"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.687174035343066*^9, 3.687542538900949*^9, {3.687543038479124*^9, 
   3.687543077204735*^9}, {3.6875431501603823`*^9, 3.687543174624783*^9}, 
   3.6875464718616953`*^9}]
}, Open  ]],

Cell[BoxData["0.09997898634665127`"], "Output",
 CellChangeTimes->{
  3.687172440338318*^9, 3.687173077546564*^9, 3.687173183211892*^9, 
   3.687173321831451*^9, 3.6871733900934277`*^9, 3.6871739527612762`*^9, 
   3.687174096131007*^9, 3.687542636970002*^9, {3.687543061679227*^9, 
   3.6875430673359327`*^9}, {3.6875431381553793`*^9, 3.687543150170977*^9}, 
   3.6875432124850683`*^9, 3.687546471875412*^9}]
}, Open  ]],

Cell[TextData[{
 "It also just occurred to me - you can ",
 StyleBox["never",
  FontSlant->"Italic"],
 " get virulence evolution to drive the population from cycles to stability, \
because as soon as the resident dynamics become stable, you can analytically \
calculate what the ESS virulence will be. In fact, its not even clear what \
\[OpenCurlyDoubleQuote]driving from cycles to stability\
\[CloseCurlyDoubleQuote] means, in this context. What do I mean?\n\nPut it \
this way: there will be times where the ESS virulence gives rise to a stable \
equilibrium. In those situations, you would potentially evolve from an \
initial value of virulence, one that gives rise to cycles, to one that does \
not. To put it another way, you know exactly when the ESS virulence will lead \
to stability and when it will not - if the dynamics when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{"\[Sqrt]", "d"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " give rise to a stable equilibrium, then the ESS virulence produces \
stability. As soon as ",
 Cell[BoxData[
  FormBox[
   RowBox[{"v", "=", 
    RowBox[{"\[Sqrt]", "d"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " does ",
 StyleBox["not",
  FontSlant->"Italic"],
 " give rise to stability, then the ESS ",
 StyleBox["v",
  FontSlant->"Italic"],
 " will be higher than ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Sqrt]", "d"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", but it will never be high enough to completely eliminate the cycles.\n"
}], "Text",
 CellChangeTimes->{{3.687180311616694*^9, 3.687180374188201*^9}, {
  3.687180424465541*^9, 3.687180445120504*^9}, {3.687180489220694*^9, 
  3.687180600089547*^9}, {3.687187875574744*^9, 3.687188076567473*^9}}],

Cell["\<\
When mortality was independent of resources, the reason the singular \
virulence was the same for the equilibrium and cycling cases was because the \
average number of susceptible hosts over the cycle was equal to the number of \
susceptible hosts at equilibrium. This is no longer the reason why. Here, you \
can see very clearly that the average number of hosts over a cycle is \
actually larger than the number of hosts at equilibrium. \
\>", "Text",
 CellChangeTimes->{{3.687546425466443*^9, 3.687546498927146*^9}, {
  3.687546575415782*^9, 3.687546612878312*^9}, {3.6875466972872133`*^9, 
  3.687546699075592*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dR", "=", 
   RowBox[{
    RowBox[{"\[Rho]", " ", "R", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox["R", "K"]}], ")"}]}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dS", "=", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"es", " ", "fs", " ", "R"}], 
      RowBox[{"h", "+", "R"}]], " ", 
     RowBox[{"(", 
      RowBox[{"S", "+", "Q"}], ")"}]}], "-", 
    RowBox[{
     FractionBox["d", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]], " ", "S"}], "-", 
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dQ", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      FractionBox[
       RowBox[{"B0", " ", "v"}], 
       RowBox[{"1", "+", "v"}]], ")"}], " ", "S", " ", "Q"}], "-", 
    RowBox[{
     FractionBox[
      RowBox[{"(", 
       RowBox[{"d", "+", "v"}], ")"}], 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]], " ", "Q"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"K", "\[Rule]", "4"}], ",", 
     RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
     RowBox[{"fs", "\[Rule]", "1"}], ",", 
     RowBox[{"h", "\[Rule]", "1"}], ",", 
     RowBox[{"d", "\[Rule]", "0.01"}], ",", 
     RowBox[{"v", "\[Rule]", "0.1"}], ",", 
     RowBox[{"B0", "\[Rule]", "10"}], ",", 
     RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dt", "=", "0.001"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DOPRIamat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", "/", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "/", "40"}], ",", 
       RowBox[{"9", "/", "40"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"44", "/", "45"}], ",", 
       RowBox[{
        RowBox[{"-", "56"}], "/", "15"}], ",", 
       RowBox[{"32", "/", "9"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"19372", "/", "6561"}], ",", 
       RowBox[{
        RowBox[{"-", "25360"}], "/", "2187"}], ",", 
       RowBox[{"64448", "/", "6561"}], ",", 
       RowBox[{
        RowBox[{"-", "212"}], "/", "729"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"9017", "/", "3168"}], ",", 
       RowBox[{
        RowBox[{"-", "355"}], "/", "33"}], ",", 
       RowBox[{"46732", "/", "5247"}], ",", 
       RowBox[{"49", "/", "176"}], ",", 
       RowBox[{
        RowBox[{"-", "5103"}], "/", "18656"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"35", "/", "384"}], ",", "0", ",", 
       RowBox[{"500", "/", "1113"}], ",", 
       RowBox[{"125", "/", "192"}], ",", 
       RowBox[{
        RowBox[{"-", "2187"}], "/", "6784"}], ",", 
       RowBox[{"11", "/", "84"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DOPRIbvec", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"35", "/", "384"}], ",", "0", ",", 
     RowBox[{"500", "/", "1113"}], ",", 
     RowBox[{"125", "/", "192"}], ",", 
     RowBox[{
      RowBox[{"-", "2187"}], "/", "6784"}], ",", 
     RowBox[{"11", "/", "84"}], ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DOPRIcvec", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "/", "5"}], ",", 
     RowBox[{"3", "/", "10"}], ",", 
     RowBox[{"4", "/", "5"}], ",", 
     RowBox[{"8", "/", "9"}], ",", "1", ",", "1"}], "}"}]}], ";", 
  RowBox[{"DOPRIevec", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"71", "/", "57600"}], ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "71"}], "/", "16695"}], ",", 
     RowBox[{"71", "/", "1920"}], ",", 
     RowBox[{
      RowBox[{"-", "17253"}], "/", "339200"}], ",", 
     RowBox[{"22", "/", "525"}], ",", 
     RowBox[{
      RowBox[{"-", "1"}], "/", "40"}]}], "}"}]}], ";", 
  RowBox[{
   RowBox[{"DOPRICoefficients", "[", 
    RowBox[{"5", ",", "p_"}], "]"}], ":=", 
   RowBox[{"N", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "DOPRIamat", ",", "DOPRIbvec", ",", "DOPRIcvec", ",", "DOPRIevec"}], 
      "}"}], ",", "p"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"soln", "=", 
   RowBox[{"NDSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"S", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dS", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Q", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dQ", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"R", "'"}], "[", "t", "]"}], "\[Equal]", 
         RowBox[{"(", 
          RowBox[{"dR", "/.", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"S", "\[Rule]", 
              RowBox[{"S", "[", "t", "]"}]}], ",", 
             RowBox[{"Q", "\[Rule]", 
              RowBox[{"Q", "[", "t", "]"}]}], ",", 
             RowBox[{"R", "\[Rule]", 
              RowBox[{"R", "[", "t", "]"}]}]}], "}"}]}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"S", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
        RowBox[{
         RowBox[{"Q", "[", "0", "]"}], "\[Equal]", "0.1"}], ",", 
        RowBox[{
         RowBox[{"R", "[", "0", "]"}], "\[Equal]", 
         RowBox[{"K", "/", "2"}]}]}], "}"}], "/.", "params"}], ",", 
     RowBox[{"{", 
      RowBox[{"S", ",", "Q", ",", "R"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "1000"}], "}"}], ",", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<ExplicitRungeKutta\>\"", ",", 
        RowBox[{"\"\<DifferenceOrder\>\"", "\[Rule]", "5"}], ",", 
        RowBox[{"\"\<Coefficients\>\"", "\[Rule]", "DOPRICoefficients"}], ",", 
        RowBox[{"\"\<StiffnessTest\>\"", "\[Rule]", "False"}]}], "}"}]}], ",", 
     RowBox[{"AccuracyGoal", "\[Rule]", "Infinity"}], ",", " ", 
     RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"params", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"K", "\[Rule]", "2"}], ",", 
     RowBox[{"\[Rho]", "\[Rule]", "1"}], ",", 
     RowBox[{"fs", "\[Rule]", "1"}], ",", 
     RowBox[{"h", "\[Rule]", "1"}], ",", 
     RowBox[{"d", "\[Rule]", "0.01"}], ",", 
     RowBox[{"v", "\[Rule]", "0.1"}], ",", 
     RowBox[{"B0", "\[Rule]", "10"}], ",", 
     RowBox[{"es", "\[Rule]", "0.5"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Eq", "=", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"dR", "\[Equal]", "0"}], ",", 
        RowBox[{"dS", "\[Equal]", "0"}], ",", 
        RowBox[{"dQ", "\[Equal]", "0"}]}], "}"}], "/.", "params"}], ",", 
     RowBox[{"{", 
      RowBox[{"R", ",", "S", ",", "Q"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EndEq", "=", 
   RowBox[{"Eq", "\[LeftDoubleBracket]", 
    RowBox[{
     RowBox[{"Position", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"AllTrue", "[", 
                 RowBox[{
                  RowBox[{"Re", "[", 
                   RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"#", ">", "0"}], "&"}]}], "]"}], ",", 
                RowBox[{"AllTrue", "[", 
                 RowBox[{
                  RowBox[{"Im", "[", 
                   RowBox[{"Eq", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", ";;", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}], ",", 
                  RowBox[{
                   RowBox[{"#", "<", 
                    SuperscriptBox["10", 
                    RowBox[{"-", "9"}]]}], "&"}]}], "]"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], "[", 
            RowBox[{"[", "j", "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"#", "\[Equal]", "True"}], "&"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "[", "Eq", "]"}]}], "}"}]}], "]"}], ",", 
       "True"}], "]"}], "\[LeftDoubleBracket]", 
     RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
    "\[RightDoubleBracket]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.687545318245281*^9, 3.687545371601966*^9}, {
  3.687545411272011*^9, 3.6875454129242277`*^9}, {3.6875454577105*^9, 
  3.687545458963133*^9}, {3.68754568710933*^9, 3.6875457275214357`*^9}, {
  3.687545766791744*^9, 3.687545816618857*^9}, {3.687546533973981*^9, 
  3.6875465345233927`*^9}, {3.687546959650815*^9, 3.687546973250058*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{"B0", " ", "v", " ", 
           RowBox[{"S", "[", "t", "]"}]}], 
          RowBox[{"1", "+", "v"}]], "/.", "soln"}], "/.", "params"}], ",", 
       RowBox[{
        FractionBox[
         RowBox[{"B0", " ", "v", " ", 
          RowBox[{"EndEq", "[", 
           RowBox[{"[", 
            RowBox[{"2", ",", "2"}], "]"}], "]"}]}], 
         RowBox[{"1", "+", "v"}]], "\[VeryThinSpace]", "/.", "params"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "800", ",", "1000"}], "}"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Equilibrium (K=2)\>\"", ",", "\"\<Cycles (K=4)\>\""}], 
       "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Time\>\"", ",", "\"\<Transmission Rate\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Bottom", ",", "Left"}], "}"}], ",", 
   RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
   RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Labeled", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         FractionBox[
          RowBox[{"(", 
           RowBox[{"d", "+", "v"}], ")"}], 
          FractionBox[
           RowBox[{"fs", " ", 
            RowBox[{"R", "[", "t", "]"}]}], 
           RowBox[{"h", "+", 
            RowBox[{"R", "[", "t", "]"}]}]]], "/.", "soln"}], "/.", 
        "params"}], ",", 
       RowBox[{
        FractionBox[
         RowBox[{"(", 
          RowBox[{"d", "+", "v"}], ")"}], 
         FractionBox[
          RowBox[{"fs", " ", 
           RowBox[{"EndEq", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}]}], 
          RowBox[{"h", "+", 
           RowBox[{"EndEq", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", "2"}], "]"}], "]"}]}]]], "/.", "params"}]}], 
      "\[VeryThinSpace]", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "800", ",", "1000"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Equilibrium (K=2)\>\"", ",", "\"\<Cycles (K=4)\>\""}], 
       "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Time\>\"", ",", "\"\<Mortality Rate\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Bottom", ",", "Left"}], "}"}], ",", 
   RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
   RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.687546720545369*^9, 3.687546751883225*^9}, {
  3.687546788109097*^9, 3.6875469224781027`*^9}, {3.687546986186941*^9, 
  3.687547084230538*^9}, {3.6876104804502907`*^9, 3.687610501213174*^9}, {
  3.687610536427593*^9, 3.6876105652023687`*^9}, {3.687610623051367*^9, 
  3.6876106668456287`*^9}, {3.687610699181149*^9, 3.687610736404664*^9}, {
  3.68761079298344*^9, 3.687610844258402*^9}, {3.687610875030013*^9, 
  3.6876108797292633`*^9}}],

Cell[BoxData[
 TemplateBox[{TemplateBox[{
     GraphicsBox[{{{}, {}, {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
umlsMKp8bD2EdnJsLdwQzwbeFJcjLo7Yz6roJ9ZGsOF9uPjZPvRpX8NRlRNs
eOjWGnXwIJ1kJoQmu1qx4dQOWkIXeuORyHMNSmzQ22D2fJ8T1pv09qrYJWzg
WrJY0o7eGld7u72DBW3D+S32h+jkS4rfklLMW8nl/mPNaGaktPxlPxbohrF5
G5zx+51SDt34Ow6cRx6u3eVCJ//Vy0ocKh2HJnBSr0NzKyjcWX4B89Vi455q
Vzrp2jnMv+vbGNwJzUkuPkInP3QEBy1LR8HD1ee1gRudtPrJdS2eGQWN7crV
+eiqdimmlPQo1P2995Hpjv3xgvhoaugIzF24rPPCg044/B5I3dwxDE7n99Tf
98J618eK0f7aB4qHBAfWnqCTFMEXx0579sG0wZtviWih/NOu/cO9QJs3EI33
phOzs6fWZfXheSRY9kjMKTr5HW2RYTfWBeuDvs+E+tJJsJWLXtmy9yCztDKR
x+//6zEiuPZ8O8jG3Nx2A/0y11Tg9vc2UEzVjnrkTycPNUw4PHpaYXNLoEh1
AM6nWeq0uX4zaB0yz98dSCfKx948TZNoAh22mHMH+oKhTdTLuQbQW8h7zD5H
J8O8fNbvS+uBKM1rLQ/G8VtQtnWKrAVjRn1nLNp/N3nfE10DptvvhkiG0InN
52PJxXHVYLnXqHLTeezfzz0EWxsqYdeQgCcTraZ5K1MH6+du74Hl2y5gffnC
l39IuwLswkLtbS7SyUR6natWXBk48NvOdKJ3dn7y2GVdCnvjpRMPh2I/u7Dr
ahPW8/0bpowm0HIu3Pbr8bzsmFk+7HuJTnz7yg6c4SoCp62xl3+j5abUudsk
CsG50k0pIgzr99FNg6akAFyttRr4wulE9p787+yQfHDr5vSNQ98/NkHneJMH
HkfbhaUi6ERFPMVppXweeH59nJeK/j7AteTtjVzwCg44pBZJJ/XyegZrBHLB
e5nZYg56iydZ8+dWDpy6Lvp4+2XMMx2C7udUcuCMJNv8DbqtKk0y5R0TfNNy
P9lGYX/csiUg7T8m+GtcielGm8yPq+SrMSGg6ICWWzSdPJATjZL9gvnKXKnz
I3rZEq8vRpivglrngv2v0EnG1gI3nygGhDi/XfcHHRRqn63hwoALHxIrIq9i
vX344DmXEeYxf+9jAhR8nt+AdNgGBoT9NVh+G606u2PldkEGRFzlf7GOSids
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
LMdoJ8jLf5ydR59ZtoN7rV0n/A8Tt/30
          "]]}, {
         Directive[
          Opacity[1.], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQfeWyMpDqdHjp7rvwtuNF+z86el828yP4qm0Wz9Ll
Efy3rD/4SxwR/FN1++bZJSL4Ro/EOzIbEHwhYZntFosQfHZbde9jBxH8YpO7
Kj8eI/hZYmqRXaxdcH7Zx9JPt1QQ/J8zCy6ed0PwJ1oXiTanIfhbjrNtmdaK
4Psrus3wW47g/y/ueXjkGIKvNqW24P4LBP/GPMaoKK5uOH/+op4VkzUR/LvF
h2wKvRF8A7v/przZCP7vq89KfHsR/MCIRL536xD8PZcf8fieQ/DnyfAHBnxA
8KfGOf0SFOiB88W7Of4Z6yP4Aq2V7r8CEHy5io9f6woQ/CUWIq+WT0Lwtz4+
aWG4BcG/3d72puIygl/x8+3TlK8IvlZKjAu/aC+cn74z9q+kCYIvfYfzz4lQ
BP/J9z3xZqUIvspDKU6P6Qh+5eF6cYntCH7khPIGj2sI/kYtKX3ZHwi+3L7D
ThvE++B8JnmJOc8tEfzCrP/+9dEI/td1bzOuViH4Hw60HT8/B8FnOKPW3bEH
wZ99MHLlwtsI/roWc974vwj+NQeZa7dk+uH8RrM/mbl6CL6Ozp2//+0RfAB7
hqL6
          "]]}}}, {
      DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {None, None}, AxesOrigin -> {800., 0.04}, DisplayFunction :> 
       Identity, Frame -> {{False, False}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], 
       Method -> {
        "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
         AbsolutePointSize[6], "ScalingFunctions" -> None}, 
       PlotRange -> {{800, 1000}, {0.0740174181868877, 0.7096396556925274}}, 
       PlotRangeClipping -> True, PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
     FormBox[
      FormBox[
       TemplateBox[{"\"Equilibrium (K=2)\"", "\"Cycles (K=4)\""}, 
        "LineLegend", DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                 ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                   "]"}]}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{#, ",", #2}], "}"}], ",", 
             RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", "}"}]}], ",", 
             RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
        Editable -> True], TraditionalForm], TraditionalForm]}, "Legended", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True],
   "\"Time\"","\"Transmission Rate\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      ItemBox[
       RotationBox[#3, BoxRotation -> 1.5707963267948966`], DefaultBaseStyle -> 
       "LabeledLabel"], 
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> Center, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {"", 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 2}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", 
       RowBox[{"{", 
         RowBox[{#2, ",", #3}], "}"}], ",", 
       RowBox[{"{", 
         RowBox[{"Bottom", ",", "Left"}], "}"}], ",", 
       RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
       RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.687546736601592*^9, 3.687546798361895*^9, 3.687546853458762*^9, {
   3.68754691427789*^9, 3.687546922893104*^9}, {3.6875469879335337`*^9, 
   3.687547003572846*^9}, {3.687547039483445*^9, 3.6875470487608423`*^9}, 
   3.687547085128593*^9, {3.687610487150724*^9, 3.687610501632511*^9}, {
   3.687610542061454*^9, 3.687610565790758*^9}, {3.687610628102021*^9, 
   3.687610667836664*^9}, 3.687610737057477*^9, 3.687610845093503*^9, 
   3.687610916349346*^9}],

Cell[BoxData[
 TemplateBox[{TemplateBox[{
     GraphicsBox[{{{}, {}, {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1: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
n8g/aTVbAjv5vQOs+anEpmKi/6Y79v/jX790ogsa96ZWFpQCZ7g2x+lVVHLn
oaiTEHcZXKt8pdOCvh3QcbPBogx6eAQoJgJU4uep/TDsTRno6blV1qFLQ4b/
KxQshzxKO7+BIJXoyj3bIupRDhFcSdFHVuN6GrvfWzSvgL+63M0s9Pttt6Q3
tVXAhVvOIlprqETw+KHX4TaV0FDSeLoYrWqd/c9grhKAU/XxwbVUckRlQ3fg
gyrIOPy05yO6nvB+s9CphvWhyzerCFGJVv2Qwl6OGpheXvNyjzCVaGpn1DW8
qQUrrb0jWegjOge0rpnUQVlwnNzOdVQSdr08SrutDpToi5fT0CmO/lwdjvXw
nO181jYRKnl2M2tSlbMBVmmU/UhCSyiIv/LIaQDvwJ1KW9ZTycVGplqaUyMY
L/3+ICZKJSOqzzztVzdD4aEzC/HoFeZpR4WWmkHOn35QZAOVDDsvFM0ttUDs
522BMei2gzEeg0JtwL4YTl+9kUrk1gi20g61g/OBGY676PO1Ak2n/Tqgw8dM
l0+MSnZ16Ga71XfC27+bqzg3UcmBhSGKyYcekFS7tSoEPXltf3bO1l4I95ow
ZBNHb03Rl5jrBbv5vOYFdM3nMkuJrH6o2y+23kuCSs7wZM58ujcAB24EWcyh
5TQct5v7fAOhuWNfpyVxP4sOMJb0hiBwX85m581UsjvPYMBKYRgm3NbZjaMV
N5ZJ+fCOgHmuT7LjFiq5ZXascuDrCLB+9o4Moi+YRt3b+2oU9uzV2XFeCtdH
OcZF3n4Mnl5Lv9KLflpY281aPQ48bwSzz2zF+qQHVKm9HgePH+4zHeirhfM3
hZQnYH3XD5atNNb7FXUZ6dwJ+FhyJX4MLXE+WZZ7wyRY5YxeviZDJVan+UI1
HSbhv0f25C+6pPD38/JHk/AsrG9t8DYqaeKv7ln+YRI0Xc8Mc8tSyeGXqYN5
BZPwzbL9YxS6wtFw8E/aJITpnIwQ3U4lOaGW5dIhkyC7u97mOfq/xUJ71tFJ
qNiov2+7HJW84IKDYYsTcJmznCsHzX7Q65nc8wlY9UO7S2UHlTjtvurmh++f
3VmcVYx22Nj9ULdoHIxLDtw8Io/7L3fES/fgODx4pCRnvpNK3rAvQZjEGKiF
ZS9+Rb9UknRoCxuFLhf5egcFrFfJbxOBoyMgqbPV84YilXT0bN5NfzkMqdNr
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
N7un5XY81l9huHuMegm02p3acv8VPg+tsx1XLhVDIDw+xJlAITfndeu0VxWD
6sYqp2D0W27VlWtxH6AxdLNjEnGeF7zki2ArArUor47NSVgPAklNvWmY/52y
lyejLQWDNfXtCwE27TRJf415v9Prum97AYxMX3ZRT8Z9LsnVfMnzAogoTYii
o7vSrDnqbQtg/LZIb8UbCuHzrr3dPc2CaOOTq4+n4D6otv1IZT4L9LeEKLSg
5/68/HcrmAUvale69b/F/nf9g/mtPSwwStZ6diWVQuoOv2yirmXBHy8P5hSa
FRGb3DHAhKM7priXvMd8X5FvU/oC5zX7DhU/9ONjrbk7vJnwpsXOnOsDznvx
9wfO2zCBPaAtTuAjnifhny/HZZnw/oxgcSx6ZrV8kdA6Jliomo5JpVEIzXp9
MP0XAz53F+/Z+QnPp9+nU5qlDNBriDiZin79x8P+YCYDGoou3tz2mUK4T28y
t0lgwMVs1cdJaJE8sx93HzNg7u3yT9LpmMdKlU6F32fAg+d1NS/Ryead36Ju
MkAwNG5CLAP7l+yjCB87Bqjd1lQQysT9zuvtlXojBpRcWmf0BL3b/onIDm0G
nLZsd+D9QiEreRUe6u5hwIhxalAw2mutaw3PDga4a3kkc2f9nx8FTwdLMYBr
1+HiILS6wvk1GcIMiNkqPMCRjfvqNY9dnrgP5HJ9kV72lUKenHs308jOAKNF
fx0vtAXt89IzC3Ronzhh+w/tEck64zSHebZH2scth0LyP3hKrsQ8uqRx+vkv
dLuLQ/ImzKvBxYxvN3Ix/4yNJnwcxP3ga0jbBFr4tOX6b710+Jhq/c/xG+4D
k/WyBPOw9gtFkRG0j9W+m0qYl+tCF9Xs8yhk+o1tbgjm6XN+FeZ96IBJt9VW
mLdnbsfcts3H/TK17nkw5nG/yw5POtD5ye3LtmFe32i1L92STiE2ByLGt2Ke
TzRZXd+MHuc+auH3/8/zaH+fOsnA806239BBF+1K2lCPPny5P+os2kzm1s6j
TNy/r2Zc/I4eFNIzqUQPrtVOeIuv57aG7+phFu6jEuqmP/7/feIlPdRidKbX
vRfnvtPh6eTHFL0CCjl35ddP3RY6bO/1LmWgc6qiqu/ifvO10WSIFFKI0g3X
Vf/vP4YlYqty0ZpqnkHzeD/avo5t3VeE+Xbz1TuA+4Hjuxy9THQMx6x8C97P
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
KhVd/NW9Ygrzfvvj7g4VQiVaJsy5csz7l/TaorPR7y90B3D34D4z22SmpUkl
T5OP5n/up4NXYi1vMdpriZI4c5gOnGYVVcZaWJ9KQfZq43QI5yimNKB3xR2P
E5yhg8QXhr6lNvaXw/38tvh8Uuxz2XvQb54eOimAzy+/JM19QodKNquZtZZz
MeDwndQ9t3Xx9W49+1CD+b5h2+vpBfSfGNdrh3E/HKHEOnAdwH7LNNN6sw3z
ukakTCia6T/t8kSFAWxjoT2C+vj1n/l2r9jPAAHjAIutB6nk79nhDu+jDIhb
vCeQih5I48x5YsmAHe8961QMqETB75Cbrj0DtNffOKx1iEraq3qpPj4MqMh3
5ChGt0TV64k/YoCZsz3T+DCVjApmf3XGfO9Ya6VuaUglWwQ2NZpjnv99z3yu
G+18/5otWwUDfFVMP10ywvN01f/Z//k+8vHB7beNsZ+mBPw1xzwvpaczsIB2
GpPJpQsyIXV2f/x9Eyp5ffjlG8B8zzypIhJ6hEqOj0+kZFsywZhDoUnwKJWY
uEk/6LzJhOZM2bDn6CvvPzvZBzNhXFCMK/UYlfhua5BgK2XCnRLBIhVTKvkZ
817WYIgJK+7w+majT0tf0LTlZIHwj1XzRcex/t1rZsOPsSAwKeKD3gkqya2c
zjO4zYI/N7ZeZKJ53bO+ijxjgb1muojWSSrJ/lzSvauIBU1rdGu+oR9FvNjM
mGLBgeZafw0zKpkR1yubkSiA9AQbjWx0ttEOLvZjBRAGXknp5lSS8WDqfWIu
5nuutVYqp3CeL4uZK/hdAM5NMTwf0c+LznI27imErvjtxQqnqUTJr6xfwb0Q
jlzL9nyLzpGczlNiFkKehoHKNgsqkVbpWXFofREorv4+mIS+1fHG/6dtEXDH
zZrGW+J5/DK/9LdwMXhcvb9a0opKNgm/s3nkUwwj+3jznqGZCfrjwhPFcJoj
zkX0DJU4pn97cdauBErqdm57ivZeuCa9Z7AE9r7I6xA4SyUVfo+qQm6UQtIV
4/BwNNUvMdiVswz8V1xZGmJNJbbKnaOPz5bDbM3f9LU2WL/WJan2EhVw4Vmg
AxXte8p3nGOqAuovC0py2lLJpbbS6fWNlaCzJ6nxAXrEOrXzxcUqSGPfTV1x
Ds+fTBc9d6wKJKtZWr7oK/Hhpm3e1bDkUvfbu+eppObBs8GzVTVwVdXZ9h9a
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
Xb3l7yzaS8jZ0NOjBP4PXf65VQ==
          "]]}, {
         Directive[
          Opacity[1.], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQfeWyMpDqdHjh7rvwtuNF+z86el828yP4qm0Wz9Ll
Efy3rD/4SxwR/FN1++bZJSL4Ro/EOzIbEHwhYZntFosQfHZbde9jBxH8YpO7
Kj8eI/hZYmqRXaxdcH7Zx9JPt1QQ/J8zCy6ed0PwJ1oXiTanIfhbjrNtmdaK
4Psrus3wW47g/y/ueXjkGIKvNqW24P4LBP/GPMaoKK5uOH/+op4VkzUR/LvF
h2wKvRF8A7v/przZCP7vq89KfHsR/MCIRL536xD8PZcf8fieQ/DnyfAHBnxA
8KfGOf0SFOiB88W7Of4Z6yP4Aq2V7r8CEHy5io9f6woQ/CUWIq+WT0Lwtz4+
aWG4BcG/3d72puIygl/x8+3TlK8IvlZKjAu/aC+cn74z9q+kCYIvfYfzz4lQ
BP/J9z3xZqUIvspDKU6P6Qh+5eF6cYntCH7khPIGj2sI/kYtKX3ZHwi+3L7D
ThvE++B8JnmJOc8tEfzCrP/+9dEI/td1bzOuViH4Hw60HT8/B8FnOKPW3bEH
wZ99MHLlwtsI/roWc974vwj+NQeZa7dk+uH8RrM/mbl6CL6Ozp2//+0RfAAn
BqLG
          "]]}}}, {
      DisplayFunction -> Identity, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
       AxesLabel -> {None, None}, AxesOrigin -> {800., 0.12}, DisplayFunction :> 
       Identity, Frame -> {{False, False}, {False, False}}, 
       FrameLabel -> {{None, None}, {None, None}}, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {None, None}, GridLinesStyle -> Directive[
         GrayLevel[0.5, 0.4]], 
       Method -> {
        "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
         AbsolutePointSize[6], "ScalingFunctions" -> None}, 
       PlotRange -> {All, All}, PlotRangeClipping -> True, 
       PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.05], 
          Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
     FormBox[
      FormBox[
       TemplateBox[{"\"Equilibrium (K=2)\"", "\"Cycles (K=4)\""}, 
        "LineLegend", DisplayFunction -> (FormBox[
          StyleBox[
           StyleBox[
            PaneBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
              "Grid"], Alignment -> Left, AppearanceElements -> None, 
             ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
             "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
           FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
           False], TraditionalForm]& ), 
        InterpretationFunction :> (RowBox[{"LineLegend", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
                 ",", 
                 RowBox[{"Directive", "[", 
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], 
                   "]"}]}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{#, ",", #2}], "}"}], ",", 
             RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", "}"}]}], ",", 
             RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
        Editable -> True], TraditionalForm], TraditionalForm]}, "Legended", 
    DisplayFunction -> (GridBox[{{
        TagBox[
         ItemBox[
          PaneBox[
           TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
           BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
         "SkipImageSizeLevel"], 
        ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
      GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
      AutoDelete -> False, GridBoxItemSize -> Automatic, 
      BaselinePosition -> {1, 1}]& ), 
    InterpretationFunction -> (RowBox[{"Legended", "[", 
       RowBox[{#, ",", 
         RowBox[{"Placed", "[", 
           RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> True],
   "\"Time\"","\"Mortality Rate\""},
  "Labeled",
  DisplayFunction->(GridBox[{{
      ItemBox[
       RotationBox[#3, BoxRotation -> 1.5707963267948966`], DefaultBaseStyle -> 
       "LabeledLabel"], 
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> Center, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"]}, {"", 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, 
    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
    BaselinePosition -> {1, 2}]& ),
  InterpretationFunction->(RowBox[{"Labeled", "[", 
     RowBox[{#, ",", 
       RowBox[{"{", 
         RowBox[{#2, ",", #3}], "}"}], ",", 
       RowBox[{"{", 
         RowBox[{"Bottom", ",", "Left"}], "}"}], ",", 
       RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
       RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.687546736601592*^9, 3.687546798361895*^9, 3.687546853458762*^9, {
   3.68754691427789*^9, 3.687546922893104*^9}, {3.6875469879335337`*^9, 
   3.687547003572846*^9}, {3.687547039483445*^9, 3.6875470487608423`*^9}, 
   3.687547085128593*^9, {3.687610487150724*^9, 3.687610501632511*^9}, {
   3.687610542061454*^9, 3.687610565790758*^9}, {3.687610628102021*^9, 
   3.687610667836664*^9}, 3.687610737057477*^9, 3.687610845093503*^9, 
   3.687610916583426*^9}]
}, Open  ]],

Cell[TextData[{
 "NOTES:\nHow close is virulence to virulence needed to stabilize?\nIs \
singular virulence ESS/CSS?\n\nWhat about stage structure?\nWhat about \
resource-dependent development?\n",
 StyleBox["Resource-dependent transmission?",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.6872787381593447`*^9, 3.687278763032021*^9}, {
  3.687278980371414*^9, 3.6872790442140102`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parasite transmission is resource-dependent", "Subsection",
 CellChangeTimes->{{3.687009260219686*^9, 3.6870092666312723`*^9}, {
  3.687101582777829*^9, 3.687101591864902*^9}, {3.6871016259533*^9, 
  3.687101626334909*^9}, {3.6875437514273443`*^9, 3.687543756272276*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "model"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dR", "=", 
     RowBox[{
      RowBox[{"\[Rho]", " ", "R", " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox["R", "K"]}], ")"}]}], "-", 
      RowBox[{
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q", " ", "+", " ", "Qm"}], ")"}]}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dS", "=", 
     RowBox[{
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], " ", 
       RowBox[{"(", 
        RowBox[{"S", "+", "Q", " ", "+", " ", "Qm"}], ")"}]}], "-", 
      RowBox[{"d", " ", "S"}], "-", 
      RowBox[{
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "v"}], "]"}], " ", "S", " ", "Q"}], " ", "-", 
      RowBox[{
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "vm"}], "]"}], " ", "S", " ", "Qm"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "v"}], "]"}], " ", "S", " ", "Q"}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", "Q"}]}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dQm", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "vm"}], "]"}], "S", " ", "Qm"}], "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "vm"}], ")"}], " ", "Qm"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Stability", " ", "analysis"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Calculate", " ", "the", " ", "Jacobian"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"J", "=", 
    RowBox[{"Simplify", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Qm"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dS", ",", "Qm"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQ", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dR", ",", "Qm"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "R"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "S"}], "]"}], ",", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "Q"}], "]"}], ",", " ", 
         RowBox[{"D", "[", 
          RowBox[{"dQm", ",", "Qm"}], "]"}]}], "}"}]}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Evaluate", " ", "the", " ", "Jacobian", " ", "at", " ", "the", " ", 
     "equilibrium", " ", "of", " ", "interest", " ", 
     RowBox[{"(", 
      RowBox[{"Qm", "=", "0"}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"MatrixForm", "[", 
    RowBox[{"J", "/.", 
     RowBox[{"{", 
      RowBox[{"Qm", "\[Rule]", "0"}], "}"}]}], "]"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.683665236459867*^9, 3.683665359323009*^9}, {
   3.683665404813575*^9, 3.68366547699438*^9}, {3.683666132061904*^9, 
   3.6836661691249237`*^9}, {3.683666215246019*^9, 3.683666248315669*^9}, 
   3.6836664294444437`*^9, {3.6836665751017103`*^9, 3.683666620667544*^9}, {
   3.683667219677795*^9, 3.6836672485482407`*^9}, {3.683667323469551*^9, 
   3.683667386683793*^9}, {3.6836675406939783`*^9, 3.683667557779666*^9}, {
   3.683667680285685*^9, 3.683667740513286*^9}, {3.6836677819498453`*^9, 
   3.6836678072856207`*^9}, {3.6836687554044857`*^9, 3.683668812476284*^9}, {
   3.683668845622505*^9, 3.6836688897799597`*^9}, {3.683669595022902*^9, 
   3.683669607643983*^9}, {3.6836698919656057`*^9, 3.683670006005756*^9}, {
   3.683670041941581*^9, 3.68367004901373*^9}, {3.683673275631042*^9, 
   3.683673291212096*^9}, {3.683927147839081*^9, 3.683927214853394*^9}, {
   3.683971388120756*^9, 3.683971474524976*^9}, {3.684406082211471*^9, 
   3.6844061367620363`*^9}, 3.684445377524424*^9, 3.687004050639835*^9, {
   3.687004248107334*^9, 3.687004307597363*^9}, {3.687004439076009*^9, 
   3.6870045097482567`*^9}, {3.687004553669538*^9, 3.687004556335442*^9}, 
   3.687101874409479*^9, {3.687102090904904*^9, 3.68710210488861*^9}, {
   3.687543794174419*^9, 3.687543824425481*^9}, {3.687626304059725*^9, 
   3.687626324287509*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "fs"}], " ", "h", " ", "K", " ", 
        RowBox[{"(", 
         RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"K", "-", 
          RowBox[{"2", " ", "R"}]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "\[Rho]"}]}], 
      RowBox[{"K", " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], "2"]}]], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"-", "Q"}], " ", "S", " ", 
       RowBox[{
        SuperscriptBox["B", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"R", ",", "v"}], "]"}]}], "+", 
      FractionBox[
       RowBox[{
        RowBox[{"es", " ", "fs", " ", "h", " ", 
         RowBox[{"(", 
          RowBox[{"Q", "+", "Qm", "+", "S"}], ")"}]}], "-", 
        RowBox[{"Qm", " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "S", " ", 
         RowBox[{
          SuperscriptBox["B", 
           TagBox[
            RowBox[{"(", 
             RowBox[{"1", ",", "0"}], ")"}],
            Derivative],
           MultilineFunction->None], "[", 
          RowBox[{"R", ",", "vm"}], "]"}]}]}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"h", "+", "R"}], ")"}], "2"]]}], ",", 
     RowBox[{
      RowBox[{"-", "d"}], "+", 
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      RowBox[{"Q", " ", 
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "v"}], "]"}]}], "-", 
      RowBox[{"Qm", " ", 
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "vm"}], "]"}]}]}], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      RowBox[{"S", " ", 
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "v"}], "]"}]}]}], ",", 
     RowBox[{
      FractionBox[
       RowBox[{"es", " ", "fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]], "-", 
      RowBox[{"S", " ", 
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "vm"}], "]"}]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Q", " ", "S", " ", 
      RowBox[{
       SuperscriptBox["B", 
        TagBox[
         RowBox[{"(", 
          RowBox[{"1", ",", "0"}], ")"}],
         Derivative],
        MultilineFunction->None], "[", 
       RowBox[{"R", ",", "v"}], "]"}]}], ",", 
     RowBox[{"Q", " ", 
      RowBox[{"B", "[", 
       RowBox[{"R", ",", "v"}], "]"}]}], ",", 
     RowBox[{
      RowBox[{"-", "d"}], "-", "v", "+", 
      RowBox[{"S", " ", 
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "v"}], "]"}]}]}], ",", 
     RowBox[{"-", 
      FractionBox[
       RowBox[{"fs", " ", "R"}], 
       RowBox[{"h", "+", "R"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Qm", " ", "S", " ", 
      RowBox[{
       SuperscriptBox["B", 
        TagBox[
         RowBox[{"(", 
          RowBox[{"1", ",", "0"}], ")"}],
         Derivative],
        MultilineFunction->None], "[", 
       RowBox[{"R", ",", "vm"}], "]"}]}], ",", 
     RowBox[{"Qm", " ", 
      RowBox[{"B", "[", 
       RowBox[{"R", ",", "vm"}], "]"}]}], ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "d"}], "-", "vm", "+", 
      RowBox[{"S", " ", 
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "vm"}], "]"}]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.684447303215189*^9, 3.6846698191224318`*^9, 3.684676985273048*^9, 
   3.684687531732296*^9, 3.684754634904945*^9, 3.6847549129270983`*^9, 
   3.6850901011536903`*^9, 3.685091425525071*^9, 3.6851934884916983`*^9, 
   3.685194720133748*^9, 3.687004473361158*^9, 3.687004510304344*^9, 
   3.6870045566726923`*^9, 3.6871021141911097`*^9, 3.6875437185707006`*^9, {
   3.68754380976432*^9, 3.6875438251903543`*^9}, 3.6875449345099707`*^9, {
   3.68762632772497*^9, 3.68762633222164*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{
        RowBox[{
         RowBox[{"-", "fs"}], " ", "h", " ", "K", " ", 
         RowBox[{"(", 
          RowBox[{"Q", "+", "S"}], ")"}]}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"K", "-", 
           RowBox[{"2", " ", "R"}]}], ")"}], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"h", "+", "R"}], ")"}], "2"], " ", "\[Rho]"}]}], 
       RowBox[{"K", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"]}]], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}]},
     {
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "h", " ", 
         RowBox[{"(", 
          RowBox[{"Q", "+", "S"}], ")"}]}], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"h", "+", "R"}], ")"}], "2"]], "-", 
       RowBox[{"Q", " ", "S", " ", 
        RowBox[{
         SuperscriptBox["B", 
          TagBox[
           RowBox[{"(", 
            RowBox[{"1", ",", "0"}], ")"}],
           Derivative],
          MultilineFunction->None], "[", 
         RowBox[{"R", ",", "v"}], "]"}]}]}], 
      RowBox[{
       RowBox[{"-", "d"}], "+", 
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       RowBox[{"Q", " ", 
        RowBox[{"B", "[", 
         RowBox[{"R", ",", "v"}], "]"}]}]}], 
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       RowBox[{"S", " ", 
        RowBox[{"B", "[", 
         RowBox[{"R", ",", "v"}], "]"}]}]}], 
      RowBox[{
       FractionBox[
        RowBox[{"es", " ", "fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]], "-", 
       RowBox[{"S", " ", 
        RowBox[{"B", "[", 
         RowBox[{"R", ",", "vm"}], "]"}]}]}]},
     {
      RowBox[{"Q", " ", "S", " ", 
       RowBox[{
        SuperscriptBox["B", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{"R", ",", "v"}], "]"}]}], 
      RowBox[{"Q", " ", 
       RowBox[{"B", "[", 
        RowBox[{"R", ",", "v"}], "]"}]}], 
      RowBox[{
       RowBox[{"-", "d"}], "-", "v", "+", 
       RowBox[{"S", " ", 
        RowBox[{"B", "[", 
         RowBox[{"R", ",", "v"}], "]"}]}]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"fs", " ", "R"}], 
        RowBox[{"h", "+", "R"}]]}]},
     {"0", "0", "0", 
      RowBox[{
       RowBox[{"-", "d"}], "-", "vm", "+", 
       RowBox[{"S", " ", 
        RowBox[{"B", "[", 
         RowBox[{"R", ",", "vm"}], "]"}]}]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.684447303215189*^9, 3.6846698191224318`*^9, 3.684676985273048*^9, 
   3.684687531732296*^9, 3.684754634904945*^9, 3.6847549129270983`*^9, 
   3.6850901011536903`*^9, 3.685091425525071*^9, 3.6851934884916983`*^9, 
   3.685194720133748*^9, 3.687004473361158*^9, 3.687004510304344*^9, 
   3.6870045566726923`*^9, 3.6871021141911097`*^9, 3.6875437185707006`*^9, {
   3.68754380976432*^9, 3.6875438251903543`*^9}, 3.6875449345099707`*^9, {
   3.68762632772497*^9, 3.6876263322435102`*^9}}]
}, Open  ]],

Cell[TextData[{
 "If the system goes to a stable equilibrium, the invasion fitness of the \
mutant is given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["\[Beta]", "0"], "(", 
       RowBox[{
        OverscriptBox["R", "^"], ",", 
        SubscriptBox["v", "m"]}], ")"}], 
      OverscriptBox["S", "^"]}], "-", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["v", "m"], "+", "d"}], ")"}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", where ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["S", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the equilibrium abundance of susceptibles and ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["R", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is the equilibrium abundance of resources, as these are determined by the \
interaction among host, resources, and the resident strain."
}], "Text",
 CellChangeTimes->{{3.68700495951369*^9, 3.6870050296119127`*^9}, {
  3.687007624973708*^9, 3.687007630934164*^9}, {3.687102132103039*^9, 
  3.6871022010963373`*^9}, {3.6875438308514433`*^9, 3.6875438356781054`*^9}, {
  3.687544903059876*^9, 3.687544908498418*^9}, {3.687626344686739*^9, 
  3.687626356068781*^9}}],

Cell[CellGroupData[{

Cell["\<\
Finding the singular strategy when the resident dynamics go to a stable \
equilibrium\
\>", "Subsubsection",
 CellChangeTimes->{{3.687005034044724*^9, 3.6870050485458612`*^9}}],

Cell["\<\
If the resident dynamics approach the stable equilibrium, we can calculate \
the singular strategy analytically. This will be a useful comparison point \
for situations where the dynamics are not stable.\
\>", "Text",
 CellChangeTimes->{{3.687006529062045*^9, 3.68700657177782*^9}, {
   3.68700684139579*^9, 3.6870068833472567`*^9}, {3.687007263676857*^9, 
   3.687007273790606*^9}, 3.687008035080208*^9, {3.687102216229439*^9, 
   3.687102217217678*^9}, {3.6871023902095747`*^9, 3.687102390366184*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"The", " ", "S", " ", "equilibrium", " ", 
    RowBox[{"(", 
     RowBox[{"in", " ", "terms", " ", "of", " ", 
      OverscriptBox["R", "^"]}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Seq", "=", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"dQ", "\[Equal]", "0"}], ",", "S"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.687006576526287*^9, 3.687006696957065*^9}, {
  3.687006794822165*^9, 3.687006834735914*^9}, {3.687007735953511*^9, 
  3.68700774574067*^9}, {3.687102307860471*^9, 3.687102378070306*^9}, {
  3.68710274186125*^9, 3.687102821690981*^9}, {3.68710333942794*^9, 
  3.687103378149366*^9}, {3.687544947782097*^9, 3.687544948174924*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"S", "\[Rule]", 
    FractionBox[
     RowBox[{"d", "+", "v"}], 
     RowBox[{"B", "[", 
      RowBox[{"R", ",", "v"}], "]"}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.687006619835142*^9, 3.687006623975741*^9}, {
   3.687006664029443*^9, 3.6870066973805103`*^9}, {3.6870068069491873`*^9, 
   3.6870068356718197`*^9}, 3.687007746160955*^9, 3.68710222111449*^9, {
   3.6871023300936117`*^9, 3.6871023787069483`*^9}, {3.6871027448983717`*^9, 
   3.687102800198887*^9}, {3.687103368325922*^9, 3.687103378537732*^9}, {
   3.687544940089664*^9, 3.687544948971303*^9}, 3.6876263690794697`*^9}]
}, Open  ]],

Cell[TextData[{
 "Writing the invasion fitness, ",
 StyleBox["r",
  FontSlant->"Italic"],
 ", in terms of this equilibrium. Plugging in the expression for ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["S", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " (which depends on ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["R", "^"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "), ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        RowBox[{"v", "-", 
         SubscriptBox["v", "m"]}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"v", " ", 
          SubscriptBox["v", "m"]}], "-", "d"}], ")"}]}], 
      RowBox[{"v", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SubscriptBox["v", "m"]}], ")"}]}]], 
     FractionBox["1", 
      RowBox[{"f", "(", 
       OverscriptBox["R", "^"], ")"}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.687102737001696*^9, 3.687102738475041*^9}, {
  3.687103383515271*^9, 3.687103413136458*^9}, {3.687103543659143*^9, 
  3.6871035682119217`*^9}, {3.687104067627881*^9, 3.687104140487425*^9}, {
  3.687104174201335*^9, 3.6871041958329887`*^9}, {3.687104301990046*^9, 
  3.687104308123296*^9}, {3.68762638134663*^9, 3.687626386575356*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"r", "=", 
  RowBox[{
   RowBox[{"-", "d"}], "-", "vm", "+", 
   RowBox[{"S", " ", 
    RowBox[{"B", "[", 
     RowBox[{"R", ",", "vm"}], "]"}]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "/.", 
   RowBox[{"Seq", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], "//", "Simplify"}]}], "Input",
 CellChangeTimes->{{3.687102401825045*^9, 3.6871024174224997`*^9}, {
   3.687544962738209*^9, 3.687544966050074*^9}, 3.687626398064535*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "d"}], "-", "vm", "+", 
  RowBox[{"S", " ", 
   RowBox[{"B", "[", 
    RowBox[{"R", ",", "vm"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.687102402123076*^9, 3.687102417692616*^9}, 
   3.6871043205471163`*^9, 3.687544966798156*^9, 3.6875451587786283`*^9, 
   3.687626402717355*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "d"}], "-", "vm", "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{"B", "[", 
     RowBox[{"R", ",", "vm"}], "]"}]}], 
   RowBox[{"B", "[", 
    RowBox[{"R", ",", "v"}], "]"}]]}]], "Output",
 CellChangeTimes->{{3.687102402123076*^9, 3.687102417692616*^9}, 
   3.6871043205471163`*^9, 3.687544966798156*^9, 3.6875451587786283`*^9, 
   3.6876264027350407`*^9}]
}, Open  ]],

Cell[TextData[{
 "To find the singular strategy, we need to find the root of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "r"}], 
     RowBox[{"\[PartialD]", 
      SubscriptBox["v", "m"]}]], 
    SubscriptBox["|", 
     RowBox[{
      SubscriptBox["v", "m"], "=", "v"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " ",
 StyleBox[". ",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.687006893283319*^9, 3.6870070336700783`*^9}, {
   3.687007067668665*^9, 3.6870071681079473`*^9}, {3.687007653358109*^9, 
   3.687007727065876*^9}, {3.68710433440053*^9, 3.687104363063674*^9}, {
   3.687104513316571*^9, 3.6871045296871643`*^9}, {3.687104631679605*^9, 
   3.687104658299712*^9}, {3.687104701927361*^9, 3.687104777367104*^9}, {
   3.687545025114169*^9, 3.687545039422636*^9}, 3.687626444863452*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"r", "/.", 
       RowBox[{"Seq", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ",", "vm"}], "]"}], "/.", 
    RowBox[{"vm", "\[Rule]", "v"}]}], ")"}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.687009437981126*^9, 3.687009439601285*^9}, {
   3.687104373528327*^9, 3.687104507334025*^9}, {3.687104544357779*^9, 
   3.687104620058709*^9}, {3.687104681001733*^9, 3.687104694252643*^9}, 
   3.6871049670989027`*^9, 3.687545014627699*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{"R", ",", "v"}], "]"}]}], 
   RowBox[{"B", "[", 
    RowBox[{"R", ",", "v"}], "]"}]]}]], "Output",
 CellChangeTimes->{{3.68700943616891*^9, 3.6870094398826857`*^9}, {
   3.6871043786142406`*^9, 3.687104415653337*^9}, {3.687104493880618*^9, 
   3.6871045076564007`*^9}, {3.6871045566555862`*^9, 3.687104568288046*^9}, 
   3.6871046204769497`*^9, 3.6871046957861032`*^9, 3.687104967562724*^9, 
   3.68754501527803*^9, 3.687626412928111*^9, 3.687626447748095*^9}]
}, Open  ]],

Cell[TextData[{
 "To determine whether this is an ESS, we need to look at whether the \
derivative ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{
      SuperscriptBox["\[PartialD]", "2"], "r"}], 
     RowBox[{"\[PartialD]", 
      SuperscriptBox[
       SubscriptBox["v", "m"], "2"]}]], 
    SubscriptBox["|", 
     RowBox[{
      SubscriptBox["v", "m"], "=", "v"}]], 
    RowBox[{"\[LessEqual]", " ", "0.", " "}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellChangeTimes->{{3.687007156643914*^9, 3.68700718497147*^9}, {
   3.687007422302196*^9, 3.687007489363682*^9}, {3.687007763741115*^9, 
   3.68700778915688*^9}, {3.687007823785625*^9, 3.687007842625607*^9}, {
   3.6870079225235577`*^9, 3.6870079364957113`*^9}, {3.6871048249814053`*^9, 
   3.687104938241953*^9}, 3.687626456157098*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"r", "/.", 
      RowBox[{"Seq", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"vm", ",", "2"}], "}"}]}], "]"}], "/.", 
   RowBox[{"vm", "\[Rule]", "v"}]}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.687104804671014*^9, 3.687104806437112*^9}, {
   3.687104855566543*^9, 3.6871048621471*^9}, 3.687626470309647*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"d", "+", "v"}], ")"}], " ", 
   RowBox[{
    SuperscriptBox["B", 
     TagBox[
      RowBox[{"(", 
       RowBox[{"0", ",", "2"}], ")"}],
      Derivative],
     MultilineFunction->None], "[", 
    RowBox[{"R", ",", "v"}], "]"}]}], 
  RowBox[{"B", "[", 
   RowBox[{"R", ",", "v"}], "]"}]]], "Output",
 CellChangeTimes->{
  3.6871048067875557`*^9, {3.6871048572332487`*^9, 3.687104862415571*^9}, 
   3.68762647097289*^9}]
}, Open  ]],

Cell[TextData[{
 "To determine whether this is an CSS, we need to look at whether the \
derivative ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     FractionBox["d", "dv"], 
     RowBox[{"(", 
      RowBox[{
       FractionBox[
        RowBox[{"\[PartialD]", "r"}], 
        RowBox[{"\[PartialD]", 
         SubscriptBox["v", "m"]}]], 
       SubscriptBox["|", 
        RowBox[{
         SubscriptBox["v", "m"], "=", "v"}]]}], ")"}]}], "<", "0"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Here we get something this much more complicated, because it depends on \
the sign of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["R", "^"], "'"}], 
    RowBox[{"(", "v", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", as well as ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[PartialD]", "\[Beta]"}], 
    RowBox[{"\[PartialD]", "R"}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     SuperscriptBox["\[PartialD]", "2"], "\[Beta]"}], 
    RowBox[{
     RowBox[{"\[PartialD]", "R"}], 
     RowBox[{"\[PartialD]", "v"}]}]], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". If increasing resources increases the transmission rate (e.g., ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", "\[Beta]"}], 
     RowBox[{"\[PartialD]", "R"}]], ">", "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "), then "
}], "Text",
 CellChangeTimes->{{3.687007156643914*^9, 3.68700718497147*^9}, {
   3.687007422302196*^9, 3.687007509886156*^9}, {3.687007616321352*^9, 
   3.6870076198979673`*^9}, 3.6870078143342323`*^9, {3.687007912972184*^9, 
   3.687007941052844*^9}, {3.687105004133684*^9, 3.687105027378057*^9}, {
   3.687105062993029*^9, 3.687105130698337*^9}, {3.6871051621642733`*^9, 
   3.6871052977917843`*^9}, 3.687626482811693*^9, {3.6876352000231247`*^9, 
   3.687635332893931*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Expand", "[", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"r", "/.", 
          RowBox[{"Seq", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", "vm"}], "]"}], "/.", 
       RowBox[{"vm", "\[Rule]", "v"}]}], "/.", 
      RowBox[{"R", "\[Rule]", 
       RowBox[{"R", "[", "v", "]"}]}]}], ",", "v"}], "]"}], "]"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"At", " ", "the", " ", "singular", " ", "strategy"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"r", "/.", 
          RowBox[{"Seq", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", "vm"}], "]"}], "/.", 
       RowBox[{"vm", "\[Rule]", "v"}]}], ")"}], "\[Equal]", "0"}], ",", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{"R", ",", "v"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"plugging", " ", "that", " ", "into", " ", "the", " ", "above"}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"Expand", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"r", "/.", 
           RowBox[{"Seq", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ",", "vm"}], "]"}], "/.", 
        RowBox[{"vm", "\[Rule]", "v"}]}], "/.", 
       RowBox[{"R", "\[Rule]", 
        RowBox[{"R", "[", "v", "]"}]}]}], ",", "v"}], "]"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["B", 
       TagBox[
        RowBox[{"(", 
         RowBox[{"0", ",", "1"}], ")"}],
        Derivative],
       MultilineFunction->None], "[", 
      RowBox[{
       RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], "\[Rule]", 
     FractionBox[
      RowBox[{"B", "[", 
       RowBox[{
        RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], 
      RowBox[{"d", "+", "v"}]]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.687626495802445*^9, 3.68762658749067*^9}, {
  3.6876266454852533`*^9, 3.687626648307598*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    SuperscriptBox["B", 
     TagBox[
      RowBox[{"(", 
       RowBox[{"0", ",", "1"}], ")"}],
      Derivative],
     MultilineFunction->None], "[", 
    RowBox[{
     RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], 
   RowBox[{"B", "[", 
    RowBox[{
     RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]], "-", 
  FractionBox[
   RowBox[{"d", " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["B", 
       TagBox[
        RowBox[{"(", 
         RowBox[{"0", ",", "1"}], ")"}],
        Derivative],
       MultilineFunction->None], "[", 
      RowBox[{
       RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], "2"]}], 
   SuperscriptBox[
    RowBox[{"B", "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], "2"]], "-", 
  FractionBox[
   RowBox[{"v", " ", 
    SuperscriptBox[
     RowBox[{
      SuperscriptBox["B", 
       TagBox[
        RowBox[{"(", 
         RowBox[{"0", ",", "1"}], ")"}],
        Derivative],
       MultilineFunction->None], "[", 
      RowBox[{
       RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], "2"]}], 
   SuperscriptBox[
    RowBox[{"B", "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], "2"]], "+", 
  FractionBox[
   RowBox[{"d", " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "2"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], 
   RowBox[{"B", "[", 
    RowBox[{
     RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]], "+", 
  FractionBox[
   RowBox[{"v", " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "2"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], 
   RowBox[{"B", "[", 
    RowBox[{
     RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]], "-", 
  FractionBox[
   RowBox[{"d", " ", 
    RowBox[{
     SuperscriptBox["R", "\[Prime]",
      MultilineFunction->None], "[", "v", "]"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], 
   SuperscriptBox[
    RowBox[{"B", "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], "2"]], "-", 
  FractionBox[
   RowBox[{"v", " ", 
    RowBox[{
     SuperscriptBox["R", "\[Prime]",
      MultilineFunction->None], "[", "v", "]"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], 
   SuperscriptBox[
    RowBox[{"B", "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}], "2"]], "+", 
  FractionBox[
   RowBox[{"d", " ", 
    RowBox[{
     SuperscriptBox["R", "\[Prime]",
      MultilineFunction->None], "[", "v", "]"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], 
   RowBox[{"B", "[", 
    RowBox[{
     RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]], "+", 
  FractionBox[
   RowBox[{"v", " ", 
    RowBox[{
     SuperscriptBox["R", "\[Prime]",
      MultilineFunction->None], "[", "v", "]"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], 
   RowBox[{"B", "[", 
    RowBox[{
     RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]]}]], "Output",
 CellChangeTimes->{{3.687626493056446*^9, 3.687626523656255*^9}, {
   3.6876265563120604`*^9, 3.6876265877981873`*^9}, 3.687626649094939*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{"R", ",", "v"}], "]"}], "\[Rule]", 
    FractionBox[
     RowBox[{"B", "[", 
      RowBox[{"R", ",", "v"}], "]"}], 
     RowBox[{"d", "+", "v"}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.687626493056446*^9, 3.687626523656255*^9}, {
   3.6876265563120604`*^9, 3.6876265877981873`*^9}, 3.6876266491152887`*^9}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"d", "+", "v"}], ")"}], " ", 
    RowBox[{
     SuperscriptBox["B", 
      TagBox[
       RowBox[{"(", 
        RowBox[{"0", ",", "2"}], ")"}],
       Derivative],
      MultilineFunction->None], "[", 
     RowBox[{
      RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], "+", 
   RowBox[{
    RowBox[{
     SuperscriptBox["R", "\[Prime]",
      MultilineFunction->None], "[", "v", "]"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{
        SuperscriptBox["B", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "0"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{
         RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"d", "+", "v"}], ")"}], " ", 
       RowBox[{
        SuperscriptBox["B", 
         TagBox[
          RowBox[{"(", 
           RowBox[{"1", ",", "1"}], ")"}],
          Derivative],
         MultilineFunction->None], "[", 
        RowBox[{
         RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]}]}], ")"}]}]}], 
  RowBox[{"B", "[", 
   RowBox[{
    RowBox[{"R", "[", "v", "]"}], ",", "v"}], "]"}]]], "Output",
 CellChangeTimes->{{3.687626493056446*^9, 3.687626523656255*^9}, {
   3.6876265563120604`*^9, 3.6876265877981873`*^9}, 3.687626649131764*^9}]
}, Open  ]],

Cell["\<\
Thus, if the dynamics go to an equilibrium, there is one singular strategy \
that is both evolutionarily and convergence stable. You can also see that \
there is no dependence of the singular strategy or the fitness gradient on \
host resources, indicating that changes in resources will have no effect when \
the system is stable. It seems plausible that resources will have no effect \
when the dynamics are unstable, though that remains to be seen. If that is \
the case, then you might expect the ESS to be fairly similar in both stable \
and unstable populations, so whether the parasite will stabilize the host \
dynamics or not depends on how close the resident-only system is to the \
stability boundary. If the system is just barely unstable in the absence of \
any parasitism, then the addition of parasites will tend to stabilize.\
\>", "Text",
 CellChangeTimes->{{3.687007984748268*^9, 3.687008041672399*^9}, {
  3.687009023744102*^9, 3.687009209672557*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1631, 1347},
WindowMargins->{{146, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
FrontEndVersion->"10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (October 9, \
2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 191, 4, 147, "Section"],
Cell[CellGroupData[{
Cell[796, 30, 215, 4, 65, "Subsection"],
Cell[1014, 36, 1745, 44, 233, "Text"],
Cell[CellGroupData[{
Cell[2784, 84, 5137, 132, 430, "Input"],
Cell[7924, 218, 2936, 88, 201, "Output"],
Cell[10863, 308, 3129, 93, 180, "Output"]
}, Open  ]],
Cell[14007, 404, 808, 24, 83, "Text"],
Cell[14818, 430, 281, 8, 43, "Input"],
Cell[CellGroupData[{
Cell[15124, 442, 186, 4, 52, "Subsubsection"],
Cell[15313, 448, 994, 28, 96, "Text"],
Cell[CellGroupData[{
Cell[16332, 480, 670, 19, 94, "Input"],
Cell[17005, 501, 405, 9, 84, "Output"],
Cell[17413, 512, 463, 11, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17913, 528, 196, 6, 43, "Input"],
Cell[18112, 536, 341, 11, 85, "Output"]
}, Open  ]],
Cell[18468, 550, 543, 19, 48, "Text"],
Cell[19014, 571, 748, 21, 78, "Text"],
Cell[CellGroupData[{
Cell[19787, 596, 315, 9, 43, "Input"],
Cell[20105, 607, 304, 9, 85, "Output"]
}, Open  ]],
Cell[20424, 619, 1950, 56, 139, "Text"],
Cell[CellGroupData[{
Cell[22399, 679, 1379, 44, 69, "Input"],
Cell[23781, 725, 941, 28, 91, "Output"],
Cell[24725, 755, 195, 3, 60, "Output"]
}, Open  ]],
Cell[24935, 761, 1734, 57, 163, "Text"],
Cell[26672, 820, 980, 14, 194, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27689, 839, 124, 1, 52, "Subsubsection"],
Cell[27816, 842, 2377, 45, 532, "Text"],
Cell[CellGroupData[{
Cell[30218, 891, 4496, 128, 338, "Input"],
Cell[34717, 1021, 32354, 541, 349, "Output"]
}, Open  ]],
Cell[67086, 1565, 203, 7, 47, "Text"],
Cell[CellGroupData[{
Cell[67314, 1576, 4208, 124, 338, "Input"],
Cell[71525, 1702, 60096, 997, 349, "Output"]
}, Open  ]],
Cell[131636, 2702, 330, 11, 46, "Text"],
Cell[131969, 2715, 312, 5, 43, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132318, 2725, 199, 3, 52, "Subsubsection"],
Cell[132520, 2730, 16311, 372, 1232, "Input"],
Cell[148834, 3104, 1318, 39, 122, "Text"],
Cell[150155, 3145, 2842, 76, 264, "Input"],
Cell[153000, 3223, 8535, 203, 1061, "Input"],
Cell[161538, 3428, 353, 12, 47, "Text"],
Cell[161894, 3442, 59, 1, 43, "Input"],
Cell[161956, 3445, 410, 10, 47, "Text"],
Cell[CellGroupData[{
Cell[162391, 3459, 437, 9, 50, "Input"],
Cell[162831, 3470, 249, 3, 43, "Output"]
}, Open  ]],
Cell[163095, 3476, 363, 9, 47, "Text"],
Cell[CellGroupData[{
Cell[163483, 3489, 196, 5, 50, "Input"],
Cell[163682, 3496, 251, 3, 43, "Output"]
}, Open  ]],
Cell[163948, 3502, 499, 10, 135, "Text"],
Cell[CellGroupData[{
Cell[164472, 3516, 11992, 335, 920, "Input"],
Cell[176467, 3853, 90, 1, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[176594, 3859, 2914, 76, 245, "Input"],
Cell[179511, 3937, 279, 6, 60, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[179851, 3950, 285, 6, 65, "Subsection"],
Cell[180139, 3958, 281, 8, 43, "Input"],
Cell[CellGroupData[{
Cell[180445, 3970, 186, 4, 52, "Subsubsection"],
Cell[180634, 3976, 994, 28, 96, "Text"],
Cell[CellGroupData[{
Cell[181653, 4008, 670, 19, 94, "Input"],
Cell[182326, 4029, 433, 10, 84, "Output"],
Cell[182762, 4041, 489, 12, 84, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183288, 4058, 196, 6, 43, "Input"],
Cell[183487, 4066, 363, 11, 85, "Output"]
}, Open  ]],
Cell[183865, 4080, 543, 19, 48, "Text"],
Cell[184411, 4101, 748, 21, 78, "Text"],
Cell[CellGroupData[{
Cell[185184, 4126, 315, 9, 43, "Input"],
Cell[185502, 4137, 304, 9, 85, "Output"]
}, Open  ]],
Cell[185821, 4149, 1950, 56, 139, "Text"],
Cell[CellGroupData[{
Cell[187796, 4209, 1379, 44, 69, "Input"],
Cell[189178, 4255, 941, 28, 91, "Output"],
Cell[190122, 4285, 195, 3, 60, "Output"]
}, Open  ]],
Cell[190332, 4291, 928, 24, 120, "Text"],
Cell[CellGroupData[{
Cell[191285, 4319, 1197, 34, 72, "Input"],
Cell[192485, 4355, 991, 29, 157, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193513, 4389, 746, 21, 70, "Input"],
Cell[194262, 4412, 363, 11, 91, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194674, 4429, 199, 3, 52, "Subsubsection"],
Cell[194876, 4434, 16609, 378, 1232, "Input"],
Cell[211488, 4814, 1318, 39, 122, "Text"],
Cell[212809, 4855, 3041, 80, 264, "Input"],
Cell[215853, 4937, 8665, 206, 1061, "Input"],
Cell[224521, 5145, 548, 19, 48, "Text"],
Cell[225072, 5166, 59, 1, 43, "Input"],
Cell[225134, 5169, 410, 10, 47, "Text"],
Cell[CellGroupData[{
Cell[225569, 5183, 545, 10, 50, "Input"],
Cell[226117, 5195, 296, 4, 60, "Output"]
}, Open  ]],
Cell[226428, 5202, 418, 15, 48, "Text"],
Cell[CellGroupData[{
Cell[226871, 5221, 354, 9, 50, "Input"],
Cell[227228, 5232, 366, 11, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227631, 5248, 715, 20, 88, "Input"],
Cell[228349, 5270, 188, 3, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[228574, 5278, 274, 6, 50, "Input"],
Cell[228851, 5286, 91, 1, 60, "Output"]
}, Open  ]],
Cell[228957, 5290, 363, 9, 47, "Text"],
Cell[CellGroupData[{
Cell[229345, 5303, 274, 6, 50, "Input"],
Cell[229622, 5311, 275, 4, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229934, 5320, 276, 6, 50, "Input"],
Cell[230213, 5328, 86, 1, 60, "Output"]
}, Open  ]],
Cell[230314, 5332, 92, 1, 43, "Input"],
Cell[230409, 5335, 499, 10, 135, "Text"],
Cell[CellGroupData[{
Cell[230933, 5349, 11992, 335, 920, "Input"],
Cell[242928, 5686, 90, 1, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243055, 5692, 2914, 76, 245, "Input"],
Cell[245972, 5770, 279, 6, 60, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[246312, 5783, 22, 0, 65, "Subsection"],
Cell[246337, 5785, 1300, 44, 67, "Text"],
Cell[CellGroupData[{
Cell[247662, 5833, 535, 17, 75, "Input"],
Cell[248200, 5852, 991, 29, 99, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[249240, 5887, 260, 5, 65, "Subsection"],
Cell[249503, 5894, 2172, 51, 281, "Text"],
Cell[CellGroupData[{
Cell[251700, 5949, 5809, 156, 547, "Input"],
Cell[257512, 6107, 4346, 136, 212, "Output"],
Cell[261861, 6245, 4346, 133, 204, "Output"]
}, {1, 2, 3}]],
Cell[266225, 6381, 1335, 41, 114, "Text"],
Cell[267563, 6424, 462, 15, 70, "Input"],
Cell[CellGroupData[{
Cell[268050, 6443, 186, 4, 52, "Subsubsection"],
Cell[268239, 6449, 513, 8, 76, "Text"],
Cell[CellGroupData[{
Cell[268777, 6461, 96, 1, 43, "Input"],
Cell[268876, 6464, 602, 19, 66, "Output"]
}, {1, 2}]],
Cell[CellGroupData[{
Cell[269515, 6488, 94, 1, 43, "Input"],
Cell[269612, 6491, 368, 12, 65, "Output"]
}, {1, 2}]],
Cell[CellGroupData[{
Cell[270017, 6508, 94, 1, 43, "Input"],
Cell[270114, 6511, 390, 12, 66, "Output"]
}, {1, 2}]],
Cell[CellGroupData[{
Cell[270541, 6528, 1861, 50, 186, "Input"],
Cell[272405, 6580, 742, 17, 66, "Output"],
Cell[273150, 6599, 1486, 41, 82, "Output"],
Cell[274639, 6642, 22840, 504, 338, "Output"]
}, {1, 2, 3, 4}]],
Cell[297500, 7149, 1482, 47, 103, "Text"],
Cell[CellGroupData[{
Cell[299007, 7200, 205, 5, 43, "Input"],
Cell[299215, 7207, 465, 15, 67, "Output"]
}, {1, 2}]],
Cell[299695, 7225, 2129, 70, 146, "Text"],
Cell[CellGroupData[{
Cell[301849, 7299, 625, 16, 43, "Input"],
Cell[302477, 7317, 642, 16, 75, "Output"]
}, {1, 2}]],
Cell[303134, 7336, 1901, 59, 112, "Text"],
Cell[CellGroupData[{
Cell[305060, 7399, 518, 15, 43, "Input"],
Cell[305581, 7416, 483, 15, 70, "Output"]
}, {1, 2}]],
Cell[306079, 7434, 4058, 138, 180, "Text"],
Cell[310140, 7574, 980, 14, 194, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[311157, 7593, 124, 1, 52, "Subsubsection"],
Cell[311284, 7596, 462, 15, 70, "Input"],
Cell[311749, 7613, 2699, 72, 310, "Text"],
Cell[CellGroupData[{
Cell[314473, 7689, 4835, 138, 373, "Input"],
Cell[319311, 7829, 20933, 354, 349, "Output"]
}, Open  ]],
Cell[340259, 8186, 252, 8, 47, "Text"],
Cell[CellGroupData[{
Cell[340536, 8198, 4647, 135, 373, "Input"],
Cell[345186, 8335, 64594, 1071, 366, "Output"]
}, Open  ]],
Cell[409795, 9409, 378, 12, 46, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[410210, 9426, 199, 3, 52, "Subsubsection"],
Cell[410412, 9431, 630, 17, 78, "Text"],
Cell[411045, 9450, 3831, 102, 302, "Input"],
Cell[414879, 9554, 473, 17, 48, "Text"],
Cell[415355, 9573, 27534, 618, 2049, "Input"],
Cell[442892, 10193, 13358, 291, 1475, "Input"],
Cell[CellGroupData[{
Cell[456275, 10488, 69, 1, 43, "Input"],
Cell[456347, 10491, 235, 7, 83, "Output"]
}, Open  ]],
Cell[456597, 10501, 524, 14, 77, "Text"],
Cell[CellGroupData[{
Cell[457146, 10519, 316, 7, 43, "Input"],
Cell[457465, 10528, 270, 5, 60, "Output"]
}, Open  ]],
Cell[457750, 10536, 245, 5, 46, "Text"],
Cell[CellGroupData[{
Cell[458020, 10545, 267, 6, 43, "Input"],
Cell[458290, 10553, 171, 3, 60, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[458498, 10561, 1162, 27, 133, "Input"],
Cell[459663, 10590, 171, 3, 60, "Output"],
Cell[459837, 10595, 169, 3, 60, "Output"]
}, Open  ]],
Cell[460021, 10601, 336, 10, 47, "Text"],
Cell[CellGroupData[{
Cell[460382, 10615, 364, 8, 50, "Input"],
Cell[CellGroupData[{
Cell[460771, 10627, 280, 6, 30, "Print"],
Cell[461054, 10635, 284, 6, 30, "Print"],
Cell[461341, 10643, 282, 6, 30, "Print"],
Cell[461626, 10651, 282, 6, 30, "Print"],
Cell[461911, 10659, 285, 6, 30, "Print"],
Cell[462199, 10667, 287, 6, 30, "Print"],
Cell[462489, 10675, 287, 6, 39, "Print"],
Cell[462779, 10683, 287, 6, 39, "Print"],
Cell[463069, 10691, 265, 6, 30, "Print"]
}, Open  ]],
Cell[463349, 10700, 260, 4, 60, "Output"]
}, Open  ]],
Cell[463624, 10707, 277, 5, 76, "Text"],
Cell[CellGroupData[{
Cell[463926, 10716, 1636, 40, 188, "Input"],
Cell[CellGroupData[{
Cell[465587, 10760, 306, 7, 30, "Print"],
Cell[465896, 10769, 307, 7, 30, "Print"],
Cell[466206, 10778, 307, 7, 30, "Print"],
Cell[466516, 10787, 305, 7, 30, "Print"],
Cell[466824, 10796, 306, 7, 30, "Print"],
Cell[467133, 10805, 306, 7, 30, "Print"],
Cell[467442, 10814, 307, 7, 30, "Print"],
Cell[467752, 10823, 308, 7, 30, "Print"]
}, Open  ]],
Cell[468075, 10833, 408, 6, 60, "Output"],
Cell[CellGroupData[{
Cell[468508, 10843, 310, 7, 30, "Print"],
Cell[468821, 10852, 306, 7, 39, "Print"],
Cell[469130, 10861, 307, 7, 39, "Print"],
Cell[469440, 10870, 306, 7, 39, "Print"]
}, Open  ]],
Cell[469761, 10880, 409, 6, 60, "Output"],
Cell[CellGroupData[{
Cell[470195, 10890, 308, 7, 39, "Print"],
Cell[470506, 10899, 306, 7, 39, "Print"],
Cell[470815, 10908, 305, 7, 39, "Print"],
Cell[471123, 10917, 304, 7, 39, "Print"],
Cell[471430, 10926, 310, 7, 39, "Print"]
}, Open  ]],
Cell[471755, 10936, 408, 6, 60, "Output"]
}, Open  ]],
Cell[472178, 10945, 1769, 41, 284, "Text"],
Cell[473950, 10988, 629, 10, 105, "Text"],
Cell[474582, 11000, 10028, 288, 748, "Input"],
Cell[CellGroupData[{
Cell[484635, 11292, 3127, 83, 318, "Input"],
Cell[487765, 11377, 51594, 901, 409, "Output"],
Cell[539362, 12280, 62949, 1088, 393, "Output"]
}, Open  ]],
Cell[602326, 13371, 396, 8, 223, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[602771, 13385, 277, 3, 65, "Subsection"],
Cell[CellGroupData[{
Cell[603073, 13392, 5343, 138, 430, "Input"],
Cell[608419, 13532, 4533, 141, 192, "Output"],
Cell[612955, 13675, 4006, 121, 180, "Output"]
}, Open  ]],
Cell[616976, 13799, 1272, 35, 96, "Text"],
Cell[CellGroupData[{
Cell[618273, 13838, 186, 4, 52, "Subsubsection"],
Cell[618462, 13844, 513, 8, 76, "Text"],
Cell[CellGroupData[{
Cell[619000, 13856, 730, 15, 77, "Input"],
Cell[619733, 13873, 651, 13, 84, "Output"]
}, Open  ]],
Cell[620399, 13889, 1344, 41, 68, "Text"],
Cell[CellGroupData[{
Cell[621768, 13934, 463, 12, 69, "Input"],
Cell[622234, 13948, 323, 8, 60, "Output"],
Cell[622560, 13958, 454, 13, 84, "Output"]
}, Open  ]],
Cell[623029, 13974, 860, 22, 61, "Text"],
Cell[CellGroupData[{
Cell[623914, 14000, 548, 13, 43, "Input"],
Cell[624465, 14015, 785, 21, 88, "Output"]
}, Open  ]],
Cell[625265, 14039, 843, 22, 70, "Text"],
Cell[CellGroupData[{
Cell[626133, 14065, 445, 12, 43, "Input"],
Cell[626581, 14079, 489, 17, 88, "Output"]
}, Open  ]],
Cell[627085, 14099, 1985, 61, 112, "Text"],
Cell[CellGroupData[{
Cell[629095, 14164, 2373, 74, 177, "Input"],
Cell[631471, 14240, 4628, 164, 154, "Output"],
Cell[636102, 14406, 559, 17, 82, "Output"],
Cell[636664, 14425, 1411, 47, 92, "Output"]
}, Open  ]],
Cell[638090, 14475, 980, 14, 194, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

